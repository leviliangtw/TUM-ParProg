<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>round_and_return (74 samples, 0.42%)</title><rect x="41.2" y="373" width="4.9" height="15.0" fill="rgb(238,121,35)" rx="2" ry="2" />
<text  x="44.24" y="383.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="56.1" y="357" width="0.2" height="15.0" fill="rgb(235,135,28)" rx="2" ry="2" />
<text  x="59.14" y="367.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (6 samples, 0.03%)</title><rect x="26.6" y="245" width="0.4" height="15.0" fill="rgb(247,159,9)" rx="2" ry="2" />
<text  x="29.62" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_write (6 samples, 0.03%)</title><rect x="26.6" y="373" width="0.4" height="15.0" fill="rgb(249,130,52)" rx="2" ry="2" />
<text  x="29.62" y="383.5" ></text>
</g>
<g >
<title>new_sync_write (6 samples, 0.03%)</title><rect x="26.6" y="277" width="0.4" height="15.0" fill="rgb(225,53,50)" rx="2" ry="2" />
<text  x="29.62" y="287.5" ></text>
</g>
<g >
<title>ttwu_do_activate (2 samples, 0.01%)</title><rect x="1129.4" y="37" width="0.2" height="15.0" fill="rgb(206,228,25)" rx="2" ry="2" />
<text  x="1132.43" y="47.5" ></text>
</g>
<g >
<title>all (17,826 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(224,213,23)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>__munmap (4 samples, 0.02%)</title><rect x="1164.6" y="357" width="0.2" height="15.0" fill="rgb(245,81,13)" rx="2" ry="2" />
<text  x="1167.58" y="367.5" ></text>
</g>
<g >
<title>ktime_get_update_offsets_now (3 samples, 0.02%)</title><rect x="1128.9" y="261" width="0.2" height="15.0" fill="rgb(232,25,34)" rx="2" ry="2" />
<text  x="1131.90" y="271.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="48.3" y="357" width="0.2" height="15.0" fill="rgb(229,205,43)" rx="2" ry="2" />
<text  x="51.26" y="367.5" ></text>
</g>
<g >
<title>read (8 samples, 0.04%)</title><rect x="40.7" y="373" width="0.5" height="15.0" fill="rgb(250,3,19)" rx="2" ry="2" />
<text  x="43.71" y="383.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (39 samples, 0.22%)</title><rect x="1187.4" y="389" width="2.6" height="15.0" fill="rgb(232,174,33)" rx="2" ry="2" />
<text  x="1190.42" y="399.5" ></text>
</g>
<g >
<title>account_process_tick (7 samples, 0.04%)</title><rect x="1126.8" y="197" width="0.4" height="15.0" fill="rgb(223,27,36)" rx="2" ry="2" />
<text  x="1129.78" y="207.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (24 samples, 0.13%)</title><rect x="1171.6" y="389" width="1.6" height="15.0" fill="rgb(205,207,24)" rx="2" ry="2" />
<text  x="1174.60" y="399.5" ></text>
</g>
<g >
<title>malloc (99 samples, 0.56%)</title><rect x="1165.0" y="389" width="6.6" height="15.0" fill="rgb(246,88,52)" rx="2" ry="2" />
<text  x="1168.04" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.03%)</title><rect x="26.6" y="357" width="0.4" height="15.0" fill="rgb(242,47,27)" rx="2" ry="2" />
<text  x="29.62" y="367.5" ></text>
</g>
<g >
<title>account_user_time (7 samples, 0.04%)</title><rect x="1126.8" y="181" width="0.4" height="15.0" fill="rgb(224,44,53)" rx="2" ry="2" />
<text  x="1129.78" y="191.5" ></text>
</g>
<g >
<title>update_load_avg (6 samples, 0.03%)</title><rect x="1128.3" y="165" width="0.4" height="15.0" fill="rgb(245,50,28)" rx="2" ry="2" />
<text  x="1131.31" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.04%)</title><rect x="40.7" y="357" width="0.5" height="15.0" fill="rgb(228,22,31)" rx="2" ry="2" />
<text  x="43.71" y="367.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (9 samples, 0.05%)</title><rect x="1129.2" y="277" width="0.6" height="15.0" fill="rgb(235,62,39)" rx="2" ry="2" />
<text  x="1132.23" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_irq_work (5 samples, 0.03%)</title><rect x="1129.3" y="229" width="0.3" height="15.0" fill="rgb(220,201,27)" rx="2" ry="2" />
<text  x="1132.30" y="239.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="1164.6" y="245" width="0.1" height="15.0" fill="rgb(242,173,45)" rx="2" ry="2" />
<text  x="1167.58" y="255.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.06%)</title><rect x="40.0" y="373" width="0.7" height="15.0" fill="rgb(237,137,8)" rx="2" ry="2" />
<text  x="42.99" y="383.5" ></text>
</g>
<g >
<title>unmap_page_range (2 samples, 0.01%)</title><rect x="1164.7" y="213" width="0.1" height="15.0" fill="rgb(246,133,34)" rx="2" ry="2" />
<text  x="1167.71" y="223.5" ></text>
</g>
<g >
<title>copy_page_to_iter (7 samples, 0.04%)</title><rect x="40.8" y="213" width="0.4" height="15.0" fill="rgb(251,136,15)" rx="2" ry="2" />
<text  x="43.78" y="223.5" ></text>
</g>
<g >
<title>copy_user_generic_string (6 samples, 0.03%)</title><rect x="40.8" y="197" width="0.4" height="15.0" fill="rgb(215,41,50)" rx="2" ry="2" />
<text  x="43.85" y="207.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (25 samples, 0.14%)</title><rect x="1161.1" y="309" width="1.6" height="15.0" fill="rgb(245,96,25)" rx="2" ry="2" />
<text  x="1164.07" y="319.5" ></text>
</g>
<g >
<title>unmap_region (4 samples, 0.02%)</title><rect x="1164.6" y="261" width="0.2" height="15.0" fill="rgb(225,100,19)" rx="2" ry="2" />
<text  x="1167.58" y="271.5" ></text>
</g>
<g >
<title>exc_page_fault (2 samples, 0.01%)</title><rect x="48.0" y="341" width="0.1" height="15.0" fill="rgb(224,215,33)" rx="2" ry="2" />
<text  x="51.00" y="351.5" ></text>
</g>
<g >
<title>ReadLine (520 samples, 2.92%)</title><rect x="1129.8" y="325" width="34.4" height="15.0" fill="rgb(226,205,12)" rx="2" ry="2" />
<text  x="1132.83" y="335.5" >Re..</text>
</g>
<g >
<title>__queue_work (3 samples, 0.02%)</title><rect x="1129.4" y="101" width="0.2" height="15.0" fill="rgb(232,71,36)" rx="2" ry="2" />
<text  x="1132.36" y="111.5" ></text>
</g>
<g >
<title>irq_exit_rcu (9 samples, 0.05%)</title><rect x="1129.2" y="293" width="0.6" height="15.0" fill="rgb(229,85,40)" rx="2" ry="2" />
<text  x="1132.23" y="303.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (32 samples, 0.18%)</title><rect x="46.1" y="373" width="2.2" height="15.0" fill="rgb(239,158,49)" rx="2" ry="2" />
<text  x="49.14" y="383.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (65 samples, 0.36%)</title><rect x="1125.5" y="325" width="4.3" height="15.0" fill="rgb(236,222,4)" rx="2" ry="2" />
<text  x="1128.53" y="335.5" ></text>
</g>
<g >
<title>vfs_read (8 samples, 0.04%)</title><rect x="40.7" y="293" width="0.5" height="15.0" fill="rgb(251,138,47)" rx="2" ry="2" />
<text  x="43.71" y="303.5" ></text>
</g>
<g >
<title>perf_pmu_disable.part.0 (3 samples, 0.02%)</title><rect x="1127.6" y="165" width="0.2" height="15.0" fill="rgb(213,38,30)" rx="2" ry="2" />
<text  x="1130.64" y="175.5" ></text>
</g>
<g >
<title>_int_free (24 samples, 0.13%)</title><rect x="1142.5" y="293" width="1.6" height="15.0" fill="rgb(224,3,51)" rx="2" ry="2" />
<text  x="1145.47" y="303.5" ></text>
</g>
<g >
<title>__strlen_avx2 (72 samples, 0.40%)</title><rect x="29.4" y="373" width="4.8" height="15.0" fill="rgb(245,92,52)" rx="2" ry="2" />
<text  x="32.40" y="383.5" ></text>
</g>
<g >
<title>clear_page_rep (12 samples, 0.07%)</title><rect x="1171.7" y="229" width="0.8" height="15.0" fill="rgb(227,13,14)" rx="2" ry="2" />
<text  x="1174.73" y="239.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (3 samples, 0.02%)</title><rect x="14.5" y="373" width="0.2" height="15.0" fill="rgb(239,212,53)" rx="2" ry="2" />
<text  x="17.50" y="383.5" ></text>
</g>
<g >
<title>page_add_new_anon_rmap (2 samples, 0.01%)</title><rect x="1173.1" y="277" width="0.1" height="15.0" fill="rgb(209,52,23)" rx="2" ry="2" />
<text  x="1176.05" y="287.5" ></text>
</g>
<g >
<title>_int_free (57 samples, 0.32%)</title><rect x="34.3" y="373" width="3.8" height="15.0" fill="rgb(220,195,42)" rx="2" ry="2" />
<text  x="37.29" y="383.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (23 samples, 0.13%)</title><rect x="1162.7" y="309" width="1.5" height="15.0" fill="rgb(246,87,39)" rx="2" ry="2" />
<text  x="1165.73" y="319.5" ></text>
</g>
<g >
<title>handle_mm_fault (24 samples, 0.13%)</title><rect x="1171.6" y="325" width="1.6" height="15.0" fill="rgb(218,81,40)" rx="2" ry="2" />
<text  x="1174.60" y="335.5" ></text>
</g>
<g >
<title>irq_work_run (4 samples, 0.02%)</title><rect x="1129.3" y="181" width="0.3" height="15.0" fill="rgb(238,60,17)" rx="2" ry="2" />
<text  x="1132.30" y="191.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;double&gt; (2 samples, 0.01%)</title><rect x="56.1" y="341" width="0.2" height="15.0" fill="rgb(210,123,5)" rx="2" ry="2" />
<text  x="59.14" y="351.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.01%)</title><rect x="1129.4" y="53" width="0.2" height="15.0" fill="rgb(234,115,19)" rx="2" ry="2" />
<text  x="1132.43" y="63.5" ></text>
</g>
<g >
<title>timekeeping_update (2 samples, 0.01%)</title><rect x="1126.6" y="165" width="0.1" height="15.0" fill="rgb(236,216,11)" rx="2" ry="2" />
<text  x="1129.58" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 0.04%)</title><rect x="40.7" y="341" width="0.5" height="15.0" fill="rgb(224,73,10)" rx="2" ry="2" />
<text  x="43.71" y="351.5" ></text>
</g>
<g >
<title>insert_work (2 samples, 0.01%)</title><rect x="26.8" y="149" width="0.1" height="15.0" fill="rgb(230,172,21)" rx="2" ry="2" />
<text  x="29.81" y="159.5" ></text>
</g>
<g >
<title>__remove_hrtimer (2 samples, 0.01%)</title><rect x="1125.9" y="245" width="0.2" height="15.0" fill="rgb(237,176,45)" rx="2" ry="2" />
<text  x="1128.92" y="255.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (50 samples, 0.28%)</title><rect x="1125.8" y="293" width="3.3" height="15.0" fill="rgb(228,175,37)" rx="2" ry="2" />
<text  x="1128.79" y="303.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.01%)</title><rect x="1164.6" y="213" width="0.1" height="15.0" fill="rgb(222,46,0)" rx="2" ry="2" />
<text  x="1167.58" y="223.5" ></text>
</g>
<g >
<title>pty_write (4 samples, 0.02%)</title><rect x="26.7" y="213" width="0.2" height="15.0" fill="rgb(218,50,26)" rx="2" ry="2" />
<text  x="29.68" y="223.5" ></text>
</g>
<g >
<title>__libc_start_main (16,520 samples, 92.67%)</title><rect x="71.3" y="389" width="1093.5" height="15.0" fill="rgb(250,201,8)" rx="2" ry="2" />
<text  x="74.30" y="399.5" >__libc_start_main</text>
</g>
<g >
<title>dbs_update_util_handler (4 samples, 0.02%)</title><rect x="1128.4" y="149" width="0.3" height="15.0" fill="rgb(245,176,45)" rx="2" ry="2" />
<text  x="1131.44" y="159.5" ></text>
</g>
<g >
<title>serialge (17,826 samples, 100.00%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(232,50,18)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >serialge</text>
</g>
<g >
<title>ext4_file_read_iter (8 samples, 0.04%)</title><rect x="40.7" y="261" width="0.5" height="15.0" fill="rgb(214,117,43)" rx="2" ry="2" />
<text  x="43.71" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (4 samples, 0.02%)</title><rect x="47.9" y="357" width="0.2" height="15.0" fill="rgb(253,170,22)" rx="2" ry="2" />
<text  x="50.86" y="367.5" ></text>
</g>
<g >
<title>__schedule (2 samples, 0.01%)</title><rect x="1129.1" y="229" width="0.1" height="15.0" fill="rgb(206,0,28)" rx="2" ry="2" />
<text  x="1132.10" y="239.5" ></text>
</g>
<g >
<title>main (16,520 samples, 92.67%)</title><rect x="71.3" y="373" width="1093.5" height="15.0" fill="rgb(213,227,52)" rx="2" ry="2" />
<text  x="74.30" y="383.5" >main</text>
</g>
<g >
<title>rcu_core_si (3 samples, 0.02%)</title><rect x="1129.6" y="229" width="0.2" height="15.0" fill="rgb(214,54,52)" rx="2" ry="2" />
<text  x="1132.63" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.02%)</title><rect x="1164.6" y="325" width="0.2" height="15.0" fill="rgb(210,70,23)" rx="2" ry="2" />
<text  x="1167.58" y="335.5" ></text>
</g>
<g >
<title>amd_pmu_disable_all (3 samples, 0.02%)</title><rect x="1127.6" y="133" width="0.2" height="15.0" fill="rgb(219,1,34)" rx="2" ry="2" />
<text  x="1130.64" y="143.5" ></text>
</g>
<g >
<title>tick_sched_timer (42 samples, 0.24%)</title><rect x="1126.1" y="245" width="2.8" height="15.0" fill="rgb(206,93,48)" rx="2" ry="2" />
<text  x="1129.12" y="255.5" ></text>
</g>
<g >
<title>Serial::ForwardElimination (15,984 samples, 89.67%)</title><rect x="71.8" y="341" width="1058.0" height="15.0" fill="rgb(249,185,50)" rx="2" ry="2" />
<text  x="74.76" y="351.5" >Serial::ForwardElimination</text>
</g>
<g >
<title>__GI_____strtod_l_internal (167 samples, 0.94%)</title><rect x="15.6" y="373" width="11.0" height="15.0" fill="rgb(245,228,35)" rx="2" ry="2" />
<text  x="18.56" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_write (6 samples, 0.03%)</title><rect x="26.6" y="325" width="0.4" height="15.0" fill="rgb(243,37,41)" rx="2" ry="2" />
<text  x="29.62" y="335.5" ></text>
</g>
<g >
<title>queue_work_on (3 samples, 0.02%)</title><rect x="26.7" y="181" width="0.2" height="15.0" fill="rgb(233,214,2)" rx="2" ry="2" />
<text  x="29.75" y="191.5" ></text>
</g>
<g >
<title>std::string::reserve (12 samples, 0.07%)</title><rect x="1160.3" y="293" width="0.8" height="15.0" fill="rgb(231,126,2)" rx="2" ry="2" />
<text  x="1163.28" y="303.5" ></text>
</g>
<g >
<title>ksys_read (8 samples, 0.04%)</title><rect x="40.7" y="309" width="0.5" height="15.0" fill="rgb(254,132,35)" rx="2" ry="2" />
<text  x="43.71" y="319.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (24 samples, 0.13%)</title><rect x="1149.2" y="293" width="1.6" height="15.0" fill="rgb(213,10,31)" rx="2" ry="2" />
<text  x="1152.22" y="303.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (2 samples, 0.01%)</title><rect x="1164.7" y="197" width="0.1" height="15.0" fill="rgb(209,77,8)" rx="2" ry="2" />
<text  x="1167.71" y="207.5" ></text>
</g>
<g >
<title>irq_work_single (4 samples, 0.02%)</title><rect x="1129.3" y="149" width="0.3" height="15.0" fill="rgb(223,26,3)" rx="2" ry="2" />
<text  x="1132.30" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (17 samples, 0.10%)</title><rect x="1171.7" y="245" width="1.2" height="15.0" fill="rgb(252,59,42)" rx="2" ry="2" />
<text  x="1174.73" y="255.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (7 samples, 0.04%)</title><rect x="40.8" y="229" width="0.4" height="15.0" fill="rgb(231,187,27)" rx="2" ry="2" />
<text  x="43.78" y="239.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_put (2 samples, 0.01%)</title><rect x="56.1" y="373" width="0.2" height="15.0" fill="rgb(211,7,12)" rx="2" ry="2" />
<text  x="59.14" y="383.5" ></text>
</g>
<g >
<title>cpuacct_account_field (4 samples, 0.02%)</title><rect x="1127.0" y="165" width="0.2" height="15.0" fill="rgb(234,6,34)" rx="2" ry="2" />
<text  x="1129.98" y="175.5" ></text>
</g>
<g >
<title>[unknown] (717 samples, 4.02%)</title><rect x="14.7" y="389" width="47.5" height="15.0" fill="rgb(214,18,23)" rx="2" ry="2" />
<text  x="17.70" y="399.5" >[unk..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.02%)</title><rect x="1164.6" y="341" width="0.2" height="15.0" fill="rgb(223,160,26)" rx="2" ry="2" />
<text  x="1167.58" y="351.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (89 samples, 0.50%)</title><rect x="1154.4" y="293" width="5.9" height="15.0" fill="rgb(253,146,16)" rx="2" ry="2" />
<text  x="1157.39" y="303.5" ></text>
</g>
<g >
<title>rcu_sched_clock_irq (2 samples, 0.01%)</title><rect x="1127.2" y="197" width="0.2" height="15.0" fill="rgb(252,160,11)" rx="2" ry="2" />
<text  x="1130.25" y="207.5" ></text>
</g>
<g >
<title>n_tty_write (5 samples, 0.03%)</title><rect x="26.6" y="229" width="0.3" height="15.0" fill="rgb(231,3,2)" rx="2" ry="2" />
<text  x="29.62" y="239.5" ></text>
</g>
<g >
<title>native_write_msr (2 samples, 0.01%)</title><rect x="1127.6" y="117" width="0.2" height="15.0" fill="rgb(226,195,37)" rx="2" ry="2" />
<text  x="1130.64" y="127.5" ></text>
</g>
<g >
<title>do_anonymous_page (23 samples, 0.13%)</title><rect x="1171.7" y="293" width="1.5" height="15.0" fill="rgb(236,50,9)" rx="2" ry="2" />
<text  x="1174.66" y="303.5" ></text>
</g>
<g >
<title>ksys_write (6 samples, 0.03%)</title><rect x="26.6" y="309" width="0.4" height="15.0" fill="rgb(229,208,38)" rx="2" ry="2" />
<text  x="29.62" y="319.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.04%)</title><rect x="1148.2" y="293" width="0.5" height="15.0" fill="rgb(245,105,13)" rx="2" ry="2" />
<text  x="1151.23" y="303.5" ></text>
</g>
<g >
<title>__do_munmap (4 samples, 0.02%)</title><rect x="1164.6" y="277" width="0.2" height="15.0" fill="rgb(242,104,14)" rx="2" ry="2" />
<text  x="1167.58" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (6 samples, 0.03%)</title><rect x="26.6" y="341" width="0.4" height="15.0" fill="rgb(229,192,5)" rx="2" ry="2" />
<text  x="29.62" y="351.5" ></text>
</g>
<g >
<title>note_gp_changes (2 samples, 0.01%)</title><rect x="1129.7" y="197" width="0.1" height="15.0" fill="rgb(248,54,54)" rx="2" ry="2" />
<text  x="1132.70" y="207.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.01%)</title><rect x="1164.6" y="197" width="0.1" height="15.0" fill="rgb(254,30,27)" rx="2" ry="2" />
<text  x="1167.58" y="207.5" ></text>
</g>
<g >
<title>wake_up_process (2 samples, 0.01%)</title><rect x="1129.4" y="69" width="0.2" height="15.0" fill="rgb(229,98,39)" rx="2" ry="2" />
<text  x="1132.43" y="79.5" ></text>
</g>
<g >
<title>malloc (28 samples, 0.16%)</title><rect x="38.1" y="373" width="1.9" height="15.0" fill="rgb(249,60,27)" rx="2" ry="2" />
<text  x="41.13" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_vma (18 samples, 0.10%)</title><rect x="1171.7" y="277" width="1.2" height="15.0" fill="rgb(240,69,2)" rx="2" ry="2" />
<text  x="1174.73" y="287.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (10 samples, 0.06%)</title><rect x="1126.1" y="229" width="0.7" height="15.0" fill="rgb(226,102,23)" rx="2" ry="2" />
<text  x="1129.12" y="239.5" ></text>
</g>
<g >
<title>__correctly_grouped_prefixmb (4 samples, 0.02%)</title><rect x="71.0" y="389" width="0.3" height="15.0" fill="rgb(221,82,10)" rx="2" ry="2" />
<text  x="74.03" y="399.5" ></text>
</g>
<g >
<title>new_sync_read (8 samples, 0.04%)</title><rect x="40.7" y="277" width="0.5" height="15.0" fill="rgb(244,126,37)" rx="2" ry="2" />
<text  x="43.71" y="287.5" ></text>
</g>
<g >
<title>__strtod_l (2 samples, 0.01%)</title><rect x="34.2" y="373" width="0.1" height="15.0" fill="rgb(234,110,53)" rx="2" ry="2" />
<text  x="37.16" y="383.5" ></text>
</g>
<g >
<title>wake_up_process (2 samples, 0.01%)</title><rect x="26.8" y="133" width="0.1" height="15.0" fill="rgb(209,83,33)" rx="2" ry="2" />
<text  x="29.81" y="143.5" ></text>
</g>
<g >
<title>__vm_munmap (4 samples, 0.02%)</title><rect x="1164.6" y="293" width="0.2" height="15.0" fill="rgb(235,184,49)" rx="2" ry="2" />
<text  x="1167.58" y="303.5" ></text>
</g>
<g >
<title>update_curr (2 samples, 0.01%)</title><rect x="1128.2" y="165" width="0.1" height="15.0" fill="rgb(225,132,50)" rx="2" ry="2" />
<text  x="1131.17" y="175.5" ></text>
</g>
<g >
<title>__sysvec_irq_work (4 samples, 0.02%)</title><rect x="1129.3" y="197" width="0.3" height="15.0" fill="rgb(240,65,1)" rx="2" ry="2" />
<text  x="1132.30" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_read (8 samples, 0.04%)</title><rect x="40.7" y="325" width="0.5" height="15.0" fill="rgb(223,56,19)" rx="2" ry="2" />
<text  x="43.71" y="335.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (443 samples, 2.49%)</title><rect x="1131.7" y="309" width="29.4" height="15.0" fill="rgb(207,41,50)" rx="2" ry="2" />
<text  x="1134.75" y="319.5" >st..</text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (73 samples, 0.41%)</title><rect x="1137.6" y="293" width="4.9" height="15.0" fill="rgb(246,166,29)" rx="2" ry="2" />
<text  x="1140.64" y="303.5" ></text>
</g>
<g >
<title>insert_work (2 samples, 0.01%)</title><rect x="1129.4" y="85" width="0.2" height="15.0" fill="rgb(219,21,52)" rx="2" ry="2" />
<text  x="1132.43" y="95.5" ></text>
</g>
<g >
<title>cpufreq_this_cpu_can_update (2 samples, 0.01%)</title><rect x="1128.5" y="133" width="0.1" height="15.0" fill="rgb(229,45,45)" rx="2" ry="2" />
<text  x="1131.50" y="143.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (24 samples, 0.13%)</title><rect x="1171.6" y="373" width="1.6" height="15.0" fill="rgb(253,34,31)" rx="2" ry="2" />
<text  x="1174.60" y="383.5" ></text>
</g>
<g >
<title>idtentry_exit_cond_rcu (2 samples, 0.01%)</title><rect x="1129.1" y="293" width="0.1" height="15.0" fill="rgb(206,222,52)" rx="2" ry="2" />
<text  x="1132.10" y="303.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (62 samples, 0.35%)</title><rect x="1125.7" y="309" width="4.1" height="15.0" fill="rgb(238,82,1)" rx="2" ry="2" />
<text  x="1128.72" y="319.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (50 samples, 0.28%)</title><rect x="1125.8" y="277" width="3.3" height="15.0" fill="rgb(223,157,7)" rx="2" ry="2" />
<text  x="1128.79" y="287.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (116 samples, 0.65%)</title><rect x="48.5" y="373" width="7.6" height="15.0" fill="rgb(205,1,9)" rx="2" ry="2" />
<text  x="51.46" y="383.5" ></text>
</g>
<g >
<title>dbs_irq_work (4 samples, 0.02%)</title><rect x="1129.3" y="133" width="0.3" height="15.0" fill="rgb(224,209,40)" rx="2" ry="2" />
<text  x="1132.30" y="143.5" ></text>
</g>
<g >
<title>update_process_times (32 samples, 0.18%)</title><rect x="1126.8" y="213" width="2.1" height="15.0" fill="rgb(221,188,14)" rx="2" ry="2" />
<text  x="1129.78" y="223.5" ></text>
</g>
<g >
<title>do_lookup_x (2 samples, 0.01%)</title><rect x="1164.9" y="389" width="0.1" height="15.0" fill="rgb(243,222,31)" rx="2" ry="2" />
<text  x="1167.91" y="399.5" ></text>
</g>
<g >
<title>task_tick_fair (12 samples, 0.07%)</title><rect x="1127.9" y="181" width="0.8" height="15.0" fill="rgb(250,198,27)" rx="2" ry="2" />
<text  x="1130.91" y="191.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64.part.0 (10 samples, 0.06%)</title><rect x="1126.1" y="213" width="0.7" height="15.0" fill="rgb(249,4,39)" rx="2" ry="2" />
<text  x="1129.12" y="223.5" ></text>
</g>
<g >
<title>__queue_work (3 samples, 0.02%)</title><rect x="26.7" y="165" width="0.2" height="15.0" fill="rgb(229,90,31)" rx="2" ry="2" />
<text  x="29.75" y="175.5" ></text>
</g>
<g >
<title>timekeeping_advance (7 samples, 0.04%)</title><rect x="1126.3" y="181" width="0.5" height="15.0" fill="rgb(207,12,44)" rx="2" ry="2" />
<text  x="1129.32" y="191.5" ></text>
</g>
<g >
<title>queue_work_on (3 samples, 0.02%)</title><rect x="1129.4" y="117" width="0.2" height="15.0" fill="rgb(211,156,10)" rx="2" ry="2" />
<text  x="1132.36" y="127.5" ></text>
</g>
<g >
<title>generic_file_read_iter (7 samples, 0.04%)</title><rect x="40.8" y="245" width="0.4" height="15.0" fill="rgb(251,153,14)" rx="2" ry="2" />
<text  x="43.78" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (70 samples, 0.39%)</title><rect x="10.1" y="389" width="4.6" height="15.0" fill="rgb(253,45,24)" rx="2" ry="2" />
<text  x="13.07" y="399.5" ></text>
</g>
<g >
<title>perf_event_task_tick (8 samples, 0.04%)</title><rect x="1127.4" y="181" width="0.5" height="15.0" fill="rgb(216,130,37)" rx="2" ry="2" />
<text  x="1130.38" y="191.5" ></text>
</g>
<g >
<title>x86_pmu_disable (3 samples, 0.02%)</title><rect x="1127.6" y="149" width="0.2" height="15.0" fill="rgb(205,169,43)" rx="2" ry="2" />
<text  x="1130.64" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (4 samples, 0.02%)</title><rect x="1164.6" y="309" width="0.2" height="15.0" fill="rgb(219,12,1)" rx="2" ry="2" />
<text  x="1167.58" y="319.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_filebuf (3 samples, 0.02%)</title><rect x="48.3" y="373" width="0.2" height="15.0" fill="rgb(211,143,4)" rx="2" ry="2" />
<text  x="51.26" y="383.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.01%)</title><rect x="1129.1" y="277" width="0.1" height="15.0" fill="rgb(248,116,25)" rx="2" ry="2" />
<text  x="1132.10" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (24 samples, 0.13%)</title><rect x="1171.6" y="309" width="1.6" height="15.0" fill="rgb(245,128,37)" rx="2" ry="2" />
<text  x="1174.60" y="319.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (28 samples, 0.16%)</title><rect x="60.3" y="373" width="1.9" height="15.0" fill="rgb(219,192,53)" rx="2" ry="2" />
<text  x="63.31" y="383.5" ></text>
</g>
<g >
<title>Utility::InitializeArray (524 samples, 2.94%)</title><rect x="1129.8" y="341" width="34.7" height="15.0" fill="rgb(210,220,25)" rx="2" ry="2" />
<text  x="1132.83" y="351.5" >Ut..</text>
</g>
<g >
<title>__vfprintf_internal (3 samples, 0.02%)</title><rect x="14.5" y="357" width="0.2" height="15.0" fill="rgb(215,96,35)" rx="2" ry="2" />
<text  x="17.50" y="367.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (8 samples, 0.04%)</title><rect x="1148.7" y="293" width="0.5" height="15.0" fill="rgb(244,109,13)" rx="2" ry="2" />
<text  x="1151.69" y="303.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (63 samples, 0.35%)</title><rect x="1144.1" y="293" width="4.1" height="15.0" fill="rgb(238,176,8)" rx="2" ry="2" />
<text  x="1147.06" y="303.5" ></text>
</g>
<g >
<title>__mpn_construct_double (10 samples, 0.06%)</title><rect x="27.1" y="373" width="0.6" height="15.0" fill="rgb(230,203,7)" rx="2" ry="2" />
<text  x="30.08" y="383.5" ></text>
</g>
<g >
<title>rmqueue (5 samples, 0.03%)</title><rect x="1172.5" y="229" width="0.4" height="15.0" fill="rgb(222,116,22)" rx="2" ry="2" />
<text  x="1175.52" y="239.5" ></text>
</g>
<g >
<title>unmap_vmas (2 samples, 0.01%)</title><rect x="1164.7" y="245" width="0.1" height="15.0" fill="rgb(242,31,33)" rx="2" ry="2" />
<text  x="1167.71" y="255.5" ></text>
</g>
<g >
<title>std::string::reserve (29 samples, 0.16%)</title><rect x="58.4" y="373" width="1.9" height="15.0" fill="rgb(221,41,8)" rx="2" ry="2" />
<text  x="61.39" y="383.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.01%)</title><rect x="26.8" y="117" width="0.1" height="15.0" fill="rgb(253,172,44)" rx="2" ry="2" />
<text  x="29.81" y="127.5" ></text>
</g>
<g >
<title>exc_page_fault (24 samples, 0.13%)</title><rect x="1171.6" y="357" width="1.6" height="15.0" fill="rgb(221,209,35)" rx="2" ry="2" />
<text  x="1174.60" y="367.5" ></text>
</g>
<g >
<title>rcu_core (3 samples, 0.02%)</title><rect x="1129.6" y="213" width="0.2" height="15.0" fill="rgb(232,161,7)" rx="2" ry="2" />
<text  x="1132.63" y="223.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_clone (18 samples, 0.10%)</title><rect x="56.3" y="373" width="1.2" height="15.0" fill="rgb(224,57,34)" rx="2" ry="2" />
<text  x="59.27" y="383.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (9 samples, 0.05%)</title><rect x="1129.2" y="245" width="0.6" height="15.0" fill="rgb(241,160,33)" rx="2" ry="2" />
<text  x="1132.23" y="255.5" ></text>
</g>
<g >
<title>tty_write (6 samples, 0.03%)</title><rect x="26.6" y="261" width="0.4" height="15.0" fill="rgb(235,122,19)" rx="2" ry="2" />
<text  x="29.62" y="271.5" ></text>
</g>
<g >
<title>scheduler_tick (23 samples, 0.13%)</title><rect x="1127.4" y="197" width="1.5" height="15.0" fill="rgb(246,175,50)" rx="2" ry="2" />
<text  x="1130.38" y="207.5" ></text>
</g>
<g >
<title>calc_global_load (3 samples, 0.02%)</title><rect x="1126.1" y="197" width="0.2" height="15.0" fill="rgb(254,209,51)" rx="2" ry="2" />
<text  x="1129.12" y="207.5" ></text>
</g>
<g >
<title>update_wall_time (7 samples, 0.04%)</title><rect x="1126.3" y="197" width="0.5" height="15.0" fill="rgb(210,191,18)" rx="2" ry="2" />
<text  x="1129.32" y="207.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (9 samples, 0.05%)</title><rect x="1129.2" y="261" width="0.6" height="15.0" fill="rgb(215,124,7)" rx="2" ry="2" />
<text  x="1132.23" y="271.5" ></text>
</g>
<g >
<title>hrtimer_active (2 samples, 0.01%)</title><rect x="1128.0" y="165" width="0.2" height="15.0" fill="rgb(235,45,45)" rx="2" ry="2" />
<text  x="1131.04" y="175.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (134 samples, 0.75%)</title><rect x="62.2" y="389" width="8.8" height="15.0" fill="rgb(226,150,9)" rx="2" ry="2" />
<text  x="65.16" y="399.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (17 samples, 0.10%)</title><rect x="1171.7" y="261" width="1.2" height="15.0" fill="rgb(240,199,53)" rx="2" ry="2" />
<text  x="1174.73" y="271.5" ></text>
</g>
<g >
<title>__prepare_exit_to_usermode (2 samples, 0.01%)</title><rect x="1129.1" y="261" width="0.1" height="15.0" fill="rgb(207,7,26)" rx="2" ry="2" />
<text  x="1132.10" y="271.5" ></text>
</g>
<g >
<title>vfs_write (6 samples, 0.03%)</title><rect x="26.6" y="293" width="0.4" height="15.0" fill="rgb(237,126,52)" rx="2" ry="2" />
<text  x="29.62" y="303.5" ></text>
</g>
<g >
<title>__mpn_lshift (25 samples, 0.14%)</title><rect x="27.7" y="373" width="1.7" height="15.0" fill="rgb(254,174,11)" rx="2" ry="2" />
<text  x="30.74" y="383.5" ></text>
</g>
<g >
<title>irq_work_run_list (4 samples, 0.02%)</title><rect x="1129.3" y="165" width="0.3" height="15.0" fill="rgb(226,17,36)" rx="2" ry="2" />
<text  x="1132.30" y="175.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (215 samples, 1.21%)</title><rect x="1173.2" y="389" width="14.2" height="15.0" fill="rgb(244,142,39)" rx="2" ry="2" />
<text  x="1176.19" y="399.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (47 samples, 0.26%)</title><rect x="1125.8" y="261" width="3.1" height="15.0" fill="rgb(242,157,13)" rx="2" ry="2" />
<text  x="1128.79" y="271.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="1164.6" y="229" width="0.1" height="15.0" fill="rgb(251,2,50)" rx="2" ry="2" />
<text  x="1167.58" y="239.5" ></text>
</g>
<g >
<title>sysvec_irq_work (5 samples, 0.03%)</title><rect x="1129.3" y="213" width="0.3" height="15.0" fill="rgb(228,162,34)" rx="2" ry="2" />
<text  x="1132.30" y="223.5" ></text>
</g>
<g >
<title>unmap_single_vma (2 samples, 0.01%)</title><rect x="1164.7" y="229" width="0.1" height="15.0" fill="rgb(210,38,50)" rx="2" ry="2" />
<text  x="1167.71" y="239.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="1150.8" y="293" width="0.1" height="15.0" fill="rgb(242,176,44)" rx="2" ry="2" />
<text  x="1153.81" y="303.5" ></text>
</g>
<g >
<title>std::string::_Rep::_S_create (14 samples, 0.08%)</title><rect x="57.5" y="373" width="0.9" height="15.0" fill="rgb(209,159,18)" rx="2" ry="2" />
<text  x="60.46" y="383.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (3 samples, 0.02%)</title><rect x="1164.3" y="325" width="0.2" height="15.0" fill="rgb(216,181,30)" rx="2" ry="2" />
<text  x="1167.32" y="335.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (52 samples, 0.29%)</title><rect x="1150.9" y="293" width="3.5" height="15.0" fill="rgb(223,74,5)" rx="2" ry="2" />
<text  x="1153.94" y="303.5" ></text>
</g>
<g >
<title>Serial::SerialSolve (16,516 samples, 92.65%)</title><rect x="71.3" y="357" width="1093.3" height="15.0" fill="rgb(252,137,12)" rx="2" ry="2" />
<text  x="74.30" y="367.5" >Serial::SerialSolve</text>
</g>
<g >
<title>tick_sched_handle.isra.0 (32 samples, 0.18%)</title><rect x="1126.8" y="229" width="2.1" height="15.0" fill="rgb(222,107,12)" rx="2" ry="2" />
<text  x="1129.78" y="239.5" ></text>
</g>
<g >
<title>free_unref_page_prepare.part.0 (2 samples, 0.01%)</title><rect x="1164.6" y="181" width="0.1" height="15.0" fill="rgb(233,57,3)" rx="2" ry="2" />
<text  x="1167.58" y="191.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (12 samples, 0.07%)</title><rect x="14.7" y="373" width="0.8" height="15.0" fill="rgb(224,124,42)" rx="2" ry="2" />
<text  x="17.70" y="383.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.01%)</title><rect x="1129.1" y="245" width="0.1" height="15.0" fill="rgb(239,161,26)" rx="2" ry="2" />
<text  x="1132.10" y="255.5" ></text>
</g>
<g >
<title>tty_flip_buffer_push (3 samples, 0.02%)</title><rect x="26.7" y="197" width="0.2" height="15.0" fill="rgb(237,37,15)" rx="2" ry="2" />
<text  x="29.75" y="207.5" ></text>
</g>
<g >
<title>do_user_addr_fault (24 samples, 0.13%)</title><rect x="1171.6" y="341" width="1.6" height="15.0" fill="rgb(237,186,42)" rx="2" ry="2" />
<text  x="1174.60" y="351.5" ></text>
</g>
</g>
</svg>
