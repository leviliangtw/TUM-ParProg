<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >On-CPU Time Flame Graph: $ ./serialge ./ge_data/size1024x1024 (Optimized)</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>n_tty_write (3 samples, 0.19%)</title><rect x="62.2" y="245" width="2.2" height="15.0" fill="rgb(210,60,7)" rx="2" ry="2" />
<text  x="65.16" y="255.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (1 samples, 0.06%)</title><rect x="1113.7" y="357" width="0.7" height="15.0" fill="rgb(232,31,34)" rx="2" ry="2" />
<text  x="1116.65" y="367.5" ></text>
</g>
<g >
<title>ksys_write (3 samples, 0.19%)</title><rect x="62.2" y="325" width="2.2" height="15.0" fill="rgb(234,220,15)" rx="2" ry="2" />
<text  x="65.16" y="335.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.06%)</title><rect x="190.7" y="277" width="0.7" height="15.0" fill="rgb(251,44,2)" rx="2" ry="2" />
<text  x="193.67" y="287.5" ></text>
</g>
<g >
<title>std::string::reserve (16 samples, 1.02%)</title><rect x="142.3" y="389" width="12.1" height="15.0" fill="rgb(227,208,16)" rx="2" ry="2" />
<text  x="145.29" y="399.5" ></text>
</g>
<g >
<title>insert_work (1 samples, 0.06%)</title><rect x="62.9" y="165" width="0.8" height="15.0" fill="rgb(254,216,2)" rx="2" ry="2" />
<text  x="65.91" y="175.5" ></text>
</g>
<g >
<title>vfs_write (3 samples, 0.19%)</title><rect x="62.2" y="309" width="2.2" height="15.0" fill="rgb(226,82,49)" rx="2" ry="2" />
<text  x="65.16" y="319.5" ></text>
</g>
<g >
<title>std::locale::locale (1 samples, 0.06%)</title><rect x="1114.4" y="357" width="0.8" height="15.0" fill="rgb(215,205,52)" rx="2" ry="2" />
<text  x="1117.41" y="367.5" ></text>
</g>
<g >
<title>__sysvec_irq_work (2 samples, 0.13%)</title><rect x="992.7" y="229" width="1.5" height="15.0" fill="rgb(252,68,54)" rx="2" ry="2" />
<text  x="995.70" y="239.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (7 samples, 0.45%)</title><rect x="110.5" y="389" width="5.3" height="15.0" fill="rgb(248,109,43)" rx="2" ry="2" />
<text  x="113.54" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (6 samples, 0.38%)</title><rect x="1139.4" y="389" width="4.5" height="15.0" fill="rgb(228,52,25)" rx="2" ry="2" />
<text  x="1142.35" y="399.5" ></text>
</g>
<g >
<title>__mpn_construct_double (1 samples, 0.06%)</title><rect x="64.4" y="389" width="0.8" height="15.0" fill="rgb(237,1,13)" rx="2" ry="2" />
<text  x="67.43" y="399.5" ></text>
</g>
<g >
<title>__munmap (2 samples, 0.13%)</title><rect x="1115.2" y="389" width="1.5" height="15.0" fill="rgb(221,32,21)" rx="2" ry="2" />
<text  x="1118.16" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="132.5" y="341" width="0.7" height="15.0" fill="rgb(229,222,11)" rx="2" ry="2" />
<text  x="135.46" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.19%)</title><rect x="62.2" y="373" width="2.2" height="15.0" fill="rgb(226,13,18)" rx="2" ry="2" />
<text  x="65.16" y="383.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.06%)</title><rect x="1115.2" y="261" width="0.7" height="15.0" fill="rgb(206,175,32)" rx="2" ry="2" />
<text  x="1118.16" y="271.5" ></text>
</g>
<g >
<title>update_cfs_group (1 samples, 0.06%)</title><rect x="993.5" y="37" width="0.7" height="15.0" fill="rgb(239,122,37)" rx="2" ry="2" />
<text  x="996.46" y="47.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (3 samples, 0.19%)</title><rect x="1081.1" y="325" width="2.3" height="15.0" fill="rgb(217,141,17)" rx="2" ry="2" />
<text  x="1084.15" y="335.5" ></text>
</g>
<g >
<title>run_posix_cpu_timers (1 samples, 0.06%)</title><rect x="131.7" y="245" width="0.8" height="15.0" fill="rgb(241,120,33)" rx="2" ry="2" />
<text  x="134.70" y="255.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.06%)</title><rect x="1143.1" y="261" width="0.8" height="15.0" fill="rgb(248,125,28)" rx="2" ry="2" />
<text  x="1146.13" y="271.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (35 samples, 2.24%)</title><rect x="1021.4" y="325" width="26.5" height="15.0" fill="rgb(249,111,19)" rx="2" ry="2" />
<text  x="1024.43" y="335.5" >[..</text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.06%)</title><rect x="1115.9" y="261" width="0.8" height="15.0" fill="rgb(224,120,12)" rx="2" ry="2" />
<text  x="1118.92" y="271.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (2 samples, 0.13%)</title><rect x="100.0" y="245" width="1.5" height="15.0" fill="rgb(214,14,19)" rx="2" ry="2" />
<text  x="102.96" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.06%)</title><rect x="87.9" y="197" width="0.7" height="15.0" fill="rgb(205,71,36)" rx="2" ry="2" />
<text  x="90.86" y="207.5" ></text>
</g>
<g >
<title>clear_user (1 samples, 0.06%)</title><rect x="87.9" y="293" width="0.7" height="15.0" fill="rgb(236,13,30)" rx="2" ry="2" />
<text  x="90.86" y="303.5" ></text>
</g>
<g >
<title>read (2 samples, 0.13%)</title><rect x="100.0" y="389" width="1.5" height="15.0" fill="rgb(244,67,44)" rx="2" ry="2" />
<text  x="102.96" y="399.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (7 samples, 0.45%)</title><rect x="154.4" y="389" width="5.3" height="15.0" fill="rgb(219,160,30)" rx="2" ry="2" />
<text  x="157.38" y="399.5" ></text>
</g>
<g >
<title>new_sync_read (2 samples, 0.13%)</title><rect x="100.0" y="293" width="1.5" height="15.0" fill="rgb(205,88,49)" rx="2" ry="2" />
<text  x="102.96" y="303.5" ></text>
</g>
<g >
<title>Serial::SerialSolve (1,222 samples, 78.28%)</title><rect x="191.4" y="389" width="923.8" height="15.0" fill="rgb(209,76,47)" rx="2" ry="2" />
<text  x="194.42" y="399.5" >Serial::SerialSolve</text>
</g>
<g >
<title>__schedule (1 samples, 0.06%)</title><rect x="991.9" y="261" width="0.8" height="15.0" fill="rgb(214,149,53)" rx="2" ry="2" />
<text  x="994.95" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.06%)</title><rect x="87.9" y="357" width="0.7" height="15.0" fill="rgb(205,41,6)" rx="2" ry="2" />
<text  x="90.86" y="367.5" ></text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.06%)</title><rect x="100.0" y="213" width="0.7" height="15.0" fill="rgb(253,68,39)" rx="2" ry="2" />
<text  x="102.96" y="223.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (24 samples, 1.54%)</title><rect x="1055.4" y="325" width="18.2" height="15.0" fill="rgb(230,201,19)" rx="2" ry="2" />
<text  x="1058.45" y="335.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.13%)</title><rect x="1115.2" y="325" width="1.5" height="15.0" fill="rgb(228,136,51)" rx="2" ry="2" />
<text  x="1118.16" y="335.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.13%)</title><rect x="992.7" y="277" width="1.5" height="15.0" fill="rgb(225,90,48)" rx="2" ry="2" />
<text  x="995.70" y="287.5" ></text>
</g>
<g >
<title>__strlen_avx2 (17 samples, 1.09%)</title><rect x="68.2" y="389" width="12.9" height="15.0" fill="rgb(205,109,29)" rx="2" ry="2" />
<text  x="71.21" y="399.5" ></text>
</g>
<g >
<title>do_user_addr_fault (6 samples, 0.38%)</title><rect x="1139.4" y="357" width="4.5" height="15.0" fill="rgb(236,218,20)" rx="2" ry="2" />
<text  x="1142.35" y="367.5" ></text>
</g>
<g >
<title>std::string::_Rep::_S_create (2 samples, 0.13%)</title><rect x="140.8" y="389" width="1.5" height="15.0" fill="rgb(222,161,15)" rx="2" ry="2" />
<text  x="143.78" y="399.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.06%)</title><rect x="1143.1" y="293" width="0.8" height="15.0" fill="rgb(243,219,42)" rx="2" ry="2" />
<text  x="1146.13" y="303.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.06%)</title><rect x="131.7" y="309" width="0.8" height="15.0" fill="rgb(222,198,33)" rx="2" ry="2" />
<text  x="134.70" y="319.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.06%)</title><rect x="190.7" y="261" width="0.7" height="15.0" fill="rgb(220,183,34)" rx="2" ry="2" />
<text  x="193.67" y="271.5" ></text>
</g>
<g >
<title>pagecache_get_page (1 samples, 0.06%)</title><rect x="100.7" y="229" width="0.8" height="15.0" fill="rgb(249,48,51)" rx="2" ry="2" />
<text  x="103.71" y="239.5" ></text>
</g>
<g >
<title>_int_free (10 samples, 0.64%)</title><rect x="1047.9" y="325" width="7.5" height="15.0" fill="rgb(223,46,20)" rx="2" ry="2" />
<text  x="1050.89" y="335.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;double&gt; (1 samples, 0.06%)</title><rect x="132.5" y="357" width="0.7" height="15.0" fill="rgb(236,212,53)" rx="2" ry="2" />
<text  x="135.46" y="367.5" ></text>
</g>
<g >
<title>irq_work_run_list (2 samples, 0.13%)</title><rect x="992.7" y="197" width="1.5" height="15.0" fill="rgb(240,222,24)" rx="2" ry="2" />
<text  x="995.70" y="207.5" ></text>
</g>
<g >
<title>new_sync_write (3 samples, 0.19%)</title><rect x="62.2" y="293" width="2.2" height="15.0" fill="rgb(210,195,6)" rx="2" ry="2" />
<text  x="65.16" y="303.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.13%)</title><rect x="1115.2" y="309" width="1.5" height="15.0" fill="rgb(216,105,32)" rx="2" ry="2" />
<text  x="1118.16" y="319.5" ></text>
</g>
<g >
<title>wake_up_process (2 samples, 0.13%)</title><rect x="992.7" y="101" width="1.5" height="15.0" fill="rgb(229,21,24)" rx="2" ry="2" />
<text  x="995.70" y="111.5" ></text>
</g>
<g >
<title>__queue_work (1 samples, 0.06%)</title><rect x="62.9" y="181" width="0.8" height="15.0" fill="rgb(209,12,34)" rx="2" ry="2" />
<text  x="65.91" y="191.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.06%)</title><rect x="1115.2" y="181" width="0.7" height="15.0" fill="rgb(210,76,5)" rx="2" ry="2" />
<text  x="1118.16" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="190.7" y="405" width="0.7" height="15.0" fill="rgb(252,141,47)" rx="2" ry="2" />
<text  x="193.67" y="415.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.06%)</title><rect x="1115.2" y="229" width="0.7" height="15.0" fill="rgb(240,193,43)" rx="2" ry="2" />
<text  x="1118.16" y="239.5" ></text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.2.5 (1 samples, 0.06%)</title><rect x="159.7" y="405" width="0.7" height="15.0" fill="rgb(233,47,51)" rx="2" ry="2" />
<text  x="162.67" y="415.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.06%)</title><rect x="87.9" y="213" width="0.7" height="15.0" fill="rgb(219,19,6)" rx="2" ry="2" />
<text  x="90.86" y="223.5" ></text>
</g>
<g >
<title>clear_page_rep (2 samples, 0.13%)</title><rect x="1140.9" y="245" width="1.5" height="15.0" fill="rgb(227,176,32)" rx="2" ry="2" />
<text  x="1143.86" y="255.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.06%)</title><rect x="189.9" y="405" width="0.8" height="15.0" fill="rgb(238,112,7)" rx="2" ry="2" />
<text  x="192.91" y="415.5" ></text>
</g>
<g >
<title>__clear_user (1 samples, 0.06%)</title><rect x="87.9" y="277" width="0.7" height="15.0" fill="rgb(218,46,16)" rx="2" ry="2" />
<text  x="90.86" y="287.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.06%)</title><rect x="991.9" y="277" width="0.8" height="15.0" fill="rgb(212,164,20)" rx="2" ry="2" />
<text  x="994.95" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.06%)</title><rect x="62.9" y="117" width="0.8" height="15.0" fill="rgb(216,211,15)" rx="2" ry="2" />
<text  x="65.91" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.06%)</title><rect x="190.7" y="389" width="0.7" height="15.0" fill="rgb(229,163,22)" rx="2" ry="2" />
<text  x="193.67" y="399.5" ></text>
</g>
<g >
<title>malloc (12 samples, 0.77%)</title><rect x="88.6" y="389" width="9.1" height="15.0" fill="rgb(247,61,23)" rx="2" ry="2" />
<text  x="91.62" y="399.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.06%)</title><rect x="190.7" y="309" width="0.7" height="15.0" fill="rgb(215,116,4)" rx="2" ry="2" />
<text  x="193.67" y="319.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.06%)</title><rect x="190.7" y="325" width="0.7" height="15.0" fill="rgb(253,164,52)" rx="2" ry="2" />
<text  x="193.67" y="335.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.06%)</title><rect x="1115.9" y="245" width="0.8" height="15.0" fill="rgb(207,55,25)" rx="2" ry="2" />
<text  x="1118.92" y="255.5" ></text>
</g>
<g >
<title>handle_mm_fault (4 samples, 0.26%)</title><rect x="1140.9" y="341" width="3.0" height="15.0" fill="rgb(234,179,44)" rx="2" ry="2" />
<text  x="1143.86" y="351.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.06%)</title><rect x="1115.9" y="277" width="0.8" height="15.0" fill="rgb(246,199,17)" rx="2" ry="2" />
<text  x="1118.92" y="287.5" ></text>
</g>
<g >
<title>__prepare_exit_to_usermode (1 samples, 0.06%)</title><rect x="991.9" y="293" width="0.8" height="15.0" fill="rgb(239,155,15)" rx="2" ry="2" />
<text  x="994.95" y="303.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.13%)</title><rect x="1115.2" y="293" width="1.5" height="15.0" fill="rgb(227,224,37)" rx="2" ry="2" />
<text  x="1118.16" y="303.5" ></text>
</g>
<g >
<title>pmd_page_vaddr (1 samples, 0.06%)</title><rect x="87.9" y="133" width="0.7" height="15.0" fill="rgb(212,210,9)" rx="2" ry="2" />
<text  x="90.86" y="143.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (52 samples, 3.33%)</title><rect x="22.9" y="389" width="39.3" height="15.0" fill="rgb(211,32,5)" rx="2" ry="2" />
<text  x="25.85" y="399.5" >__G..</text>
</g>
<g >
<title>std::string::reserve (2 samples, 0.13%)</title><rect x="1105.3" y="325" width="1.5" height="15.0" fill="rgb(223,157,30)" rx="2" ry="2" />
<text  x="1108.34" y="335.5" ></text>
</g>
<g >
<title>malloc (30 samples, 1.92%)</title><rect x="1116.7" y="405" width="22.7" height="15.0" fill="rgb(207,215,33)" rx="2" ry="2" />
<text  x="1119.68" y="415.5" >m..</text>
</g>
<g >
<title>operator delete (4 samples, 0.26%)</title><rect x="1073.6" y="325" width="3.0" height="15.0" fill="rgb(240,45,48)" rx="2" ry="2" />
<text  x="1076.59" y="335.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (17 samples, 1.09%)</title><rect x="1091.7" y="325" width="12.9" height="15.0" fill="rgb(218,192,17)" rx="2" ry="2" />
<text  x="1094.73" y="335.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.06%)</title><rect x="1115.2" y="213" width="0.7" height="15.0" fill="rgb(210,70,50)" rx="2" ry="2" />
<text  x="1118.16" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_write (3 samples, 0.19%)</title><rect x="62.2" y="341" width="2.2" height="15.0" fill="rgb(209,97,7)" rx="2" ry="2" />
<text  x="65.16" y="351.5" ></text>
</g>
<g >
<title>find_get_entry (1 samples, 0.06%)</title><rect x="100.7" y="213" width="0.8" height="15.0" fill="rgb(207,0,22)" rx="2" ry="2" />
<text  x="103.71" y="223.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.06%)</title><rect x="991.9" y="309" width="0.8" height="15.0" fill="rgb(254,173,23)" rx="2" ry="2" />
<text  x="994.95" y="319.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (2 samples, 0.13%)</title><rect x="100.0" y="277" width="1.5" height="15.0" fill="rgb(247,3,10)" rx="2" ry="2" />
<text  x="102.96" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.19%)</title><rect x="62.2" y="357" width="2.2" height="15.0" fill="rgb(241,199,4)" rx="2" ry="2" />
<text  x="65.16" y="367.5" ></text>
</g>
<g >
<title>do_anonymous_page (4 samples, 0.26%)</title><rect x="1140.9" y="309" width="3.0" height="15.0" fill="rgb(232,120,39)" rx="2" ry="2" />
<text  x="1143.86" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (15 samples, 0.96%)</title><rect x="10.0" y="405" width="11.3" height="15.0" fill="rgb(220,111,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (2 samples, 0.13%)</title><rect x="1106.8" y="341" width="1.6" height="15.0" fill="rgb(227,114,28)" rx="2" ry="2" />
<text  x="1109.85" y="351.5" ></text>
</g>
<g >
<title>irq_work_run (2 samples, 0.13%)</title><rect x="992.7" y="213" width="1.5" height="15.0" fill="rgb(251,225,32)" rx="2" ry="2" />
<text  x="995.70" y="223.5" ></text>
</g>
<g >
<title>irq_exit_rcu (2 samples, 0.13%)</title><rect x="992.7" y="325" width="1.5" height="15.0" fill="rgb(226,122,33)" rx="2" ry="2" />
<text  x="995.70" y="335.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.06%)</title><rect x="87.9" y="261" width="0.7" height="15.0" fill="rgb(251,192,45)" rx="2" ry="2" />
<text  x="90.86" y="271.5" ></text>
</g>
<g >
<title>insert_work (2 samples, 0.13%)</title><rect x="992.7" y="117" width="1.5" height="15.0" fill="rgb(221,148,30)" rx="2" ry="2" />
<text  x="995.70" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.13%)</title><rect x="1115.2" y="357" width="1.5" height="15.0" fill="rgb(208,107,34)" rx="2" ry="2" />
<text  x="1118.16" y="367.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.06%)</title><rect x="190.7" y="341" width="0.7" height="15.0" fill="rgb(212,80,38)" rx="2" ry="2" />
<text  x="193.67" y="351.5" ></text>
</g>
<g >
<title>_int_free (9 samples, 0.58%)</title><rect x="81.1" y="389" width="6.8" height="15.0" fill="rgb(229,211,1)" rx="2" ry="2" />
<text  x="84.06" y="399.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.06%)</title><rect x="190.7" y="293" width="0.7" height="15.0" fill="rgb(213,26,10)" rx="2" ry="2" />
<text  x="193.67" y="303.5" ></text>
</g>
<g >
<title>Serial::ForwardElimination (1,060 samples, 67.91%)</title><rect x="192.9" y="373" width="801.3" height="15.0" fill="rgb(234,13,45)" rx="2" ry="2" />
<text  x="195.93" y="383.5" >Serial::ForwardElimination</text>
</g>
<g >
<title>__handle_mm_fault (4 samples, 0.26%)</title><rect x="1140.9" y="325" width="3.0" height="15.0" fill="rgb(209,218,52)" rx="2" ry="2" />
<text  x="1143.86" y="335.5" ></text>
</g>
<g >
<title>alloc_pages_vma (3 samples, 0.19%)</title><rect x="1140.9" y="293" width="2.2" height="15.0" fill="rgb(250,39,24)" rx="2" ry="2" />
<text  x="1143.86" y="303.5" ></text>
</g>
<g >
<title>finish_fault (1 samples, 0.06%)</title><rect x="87.9" y="165" width="0.7" height="15.0" fill="rgb(216,96,3)" rx="2" ry="2" />
<text  x="90.86" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.06%)</title><rect x="87.9" y="373" width="0.7" height="15.0" fill="rgb(230,190,47)" rx="2" ry="2" />
<text  x="90.86" y="383.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (38 samples, 2.43%)</title><rect x="160.4" y="405" width="28.8" height="15.0" fill="rgb(236,125,34)" rx="2" ry="2" />
<text  x="163.43" y="415.5" >__..</text>
</g>
<g >
<title>__x64_sys_read (2 samples, 0.13%)</title><rect x="100.0" y="341" width="1.5" height="15.0" fill="rgb(237,98,52)" rx="2" ry="2" />
<text  x="102.96" y="351.5" ></text>
</g>
<g >
<title>vfs_read (2 samples, 0.13%)</title><rect x="100.0" y="309" width="1.5" height="15.0" fill="rgb(228,91,18)" rx="2" ry="2" />
<text  x="102.96" y="319.5" ></text>
</g>
<g >
<title>sysvec_irq_work (2 samples, 0.13%)</title><rect x="992.7" y="245" width="1.5" height="15.0" fill="rgb(223,74,32)" rx="2" ry="2" />
<text  x="995.70" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.06%)</title><rect x="1143.1" y="245" width="0.8" height="15.0" fill="rgb(233,184,4)" rx="2" ry="2" />
<text  x="1146.13" y="255.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.06%)</title><rect x="1115.9" y="229" width="0.8" height="15.0" fill="rgb(231,103,52)" rx="2" ry="2" />
<text  x="1118.92" y="239.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (3 samples, 0.19%)</title><rect x="991.9" y="357" width="2.3" height="15.0" fill="rgb(211,109,17)" rx="2" ry="2" />
<text  x="994.95" y="367.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.19%)</title><rect x="97.7" y="389" width="2.3" height="15.0" fill="rgb(253,21,48)" rx="2" ry="2" />
<text  x="100.69" y="399.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (3 samples, 0.19%)</title><rect x="1076.6" y="325" width="2.3" height="15.0" fill="rgb(208,148,30)" rx="2" ry="2" />
<text  x="1079.61" y="335.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.06%)</title><rect x="190.7" y="357" width="0.7" height="15.0" fill="rgb(207,31,3)" rx="2" ry="2" />
<text  x="193.67" y="367.5" ></text>
</g>
<g >
<title>__queue_work (2 samples, 0.13%)</title><rect x="992.7" y="133" width="1.5" height="15.0" fill="rgb(232,17,49)" rx="2" ry="2" />
<text  x="995.70" y="143.5" ></text>
</g>
<g >
<title>asm_sysvec_irq_work (2 samples, 0.13%)</title><rect x="992.7" y="261" width="1.5" height="15.0" fill="rgb(210,213,27)" rx="2" ry="2" />
<text  x="995.70" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.13%)</title><rect x="1115.2" y="373" width="1.5" height="15.0" fill="rgb(232,193,5)" rx="2" ry="2" />
<text  x="1118.16" y="383.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (2 samples, 0.13%)</title><rect x="992.7" y="293" width="1.5" height="15.0" fill="rgb(254,184,24)" rx="2" ry="2" />
<text  x="995.70" y="303.5" ></text>
</g>
<g >
<title>ReadLine (157 samples, 10.06%)</title><rect x="994.2" y="357" width="118.7" height="15.0" fill="rgb(219,199,35)" rx="2" ry="2" />
<text  x="997.22" y="367.5" >ReadLine</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.13%)</title><rect x="100.0" y="373" width="1.5" height="15.0" fill="rgb(231,152,15)" rx="2" ry="2" />
<text  x="102.96" y="383.5" ></text>
</g>
<g >
<title>ksys_read (2 samples, 0.13%)</title><rect x="100.0" y="325" width="1.5" height="15.0" fill="rgb(224,167,25)" rx="2" ry="2" />
<text  x="102.96" y="335.5" ></text>
</g>
<g >
<title>__mpn_lshift (4 samples, 0.26%)</title><rect x="65.2" y="389" width="3.0" height="15.0" fill="rgb(251,109,16)" rx="2" ry="2" />
<text  x="68.18" y="399.5" ></text>
</g>
<g >
<title>ttwu_do_activate (2 samples, 0.13%)</title><rect x="992.7" y="69" width="1.5" height="15.0" fill="rgb(235,44,13)" rx="2" ry="2" />
<text  x="995.70" y="79.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="131.7" y="341" width="0.8" height="15.0" fill="rgb(238,168,9)" rx="2" ry="2" />
<text  x="134.70" y="351.5" ></text>
</g>
<g >
<title>xas_start (1 samples, 0.06%)</title><rect x="100.7" y="197" width="0.8" height="15.0" fill="rgb(211,61,49)" rx="2" ry="2" />
<text  x="103.71" y="207.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.06%)</title><rect x="132.5" y="373" width="0.7" height="15.0" fill="rgb(215,63,49)" rx="2" ry="2" />
<text  x="135.46" y="383.5" ></text>
</g>
<g >
<title>alloc_set_pte (1 samples, 0.06%)</title><rect x="87.9" y="149" width="0.7" height="15.0" fill="rgb(227,88,26)" rx="2" ry="2" />
<text  x="90.86" y="159.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.06%)</title><rect x="87.9" y="245" width="0.7" height="15.0" fill="rgb(212,197,14)" rx="2" ry="2" />
<text  x="90.86" y="255.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (56 samples, 3.59%)</title><rect x="1143.9" y="405" width="42.3" height="15.0" fill="rgb(250,207,31)" rx="2" ry="2" />
<text  x="1146.89" y="415.5" >std..</text>
</g>
<g >
<title>str_to_mpn.isra.0 (5 samples, 0.32%)</title><rect x="1186.2" y="405" width="3.8" height="15.0" fill="rgb(254,153,47)" rx="2" ry="2" />
<text  x="1189.22" y="415.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (6 samples, 0.38%)</title><rect x="1139.4" y="405" width="4.5" height="15.0" fill="rgb(222,14,18)" rx="2" ry="2" />
<text  x="1142.35" y="415.5" ></text>
</g>
<g >
<title>idtentry_exit_cond_rcu (1 samples, 0.06%)</title><rect x="991.9" y="325" width="0.8" height="15.0" fill="rgb(231,210,52)" rx="2" ry="2" />
<text  x="994.95" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.06%)</title><rect x="190.7" y="373" width="0.7" height="15.0" fill="rgb(221,14,27)" rx="2" ry="2" />
<text  x="193.67" y="383.5" ></text>
</g>
<g >
<title>round_and_return (12 samples, 0.77%)</title><rect x="101.5" y="389" width="9.0" height="15.0" fill="rgb(217,204,10)" rx="2" ry="2" />
<text  x="104.47" y="399.5" ></text>
</g>
<g >
<title>exec_binprm (1 samples, 0.06%)</title><rect x="87.9" y="325" width="0.7" height="15.0" fill="rgb(241,104,21)" rx="2" ry="2" />
<text  x="90.86" y="335.5" ></text>
</g>
<g >
<title>copy_page_to_iter (1 samples, 0.06%)</title><rect x="100.0" y="229" width="0.7" height="15.0" fill="rgb(247,72,50)" rx="2" ry="2" />
<text  x="102.96" y="239.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.06%)</title><rect x="131.7" y="325" width="0.8" height="15.0" fill="rgb(248,51,33)" rx="2" ry="2" />
<text  x="134.70" y="335.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (3 samples, 0.19%)</title><rect x="991.9" y="341" width="2.3" height="15.0" fill="rgb(219,102,43)" rx="2" ry="2" />
<text  x="994.95" y="351.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.06%)</title><rect x="87.9" y="229" width="0.7" height="15.0" fill="rgb(218,223,44)" rx="2" ry="2" />
<text  x="90.86" y="239.5" ></text>
</g>
<g >
<title>tty_write (3 samples, 0.19%)</title><rect x="62.2" y="277" width="2.2" height="15.0" fill="rgb(214,94,43)" rx="2" ry="2" />
<text  x="65.16" y="287.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.13%)</title><rect x="992.7" y="85" width="1.5" height="15.0" fill="rgb(219,106,26)" rx="2" ry="2" />
<text  x="995.70" y="95.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.06%)</title><rect x="1142.4" y="245" width="0.7" height="15.0" fill="rgb(236,89,46)" rx="2" ry="2" />
<text  x="1145.38" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="87.9" y="389" width="0.7" height="15.0" fill="rgb(211,128,27)" rx="2" ry="2" />
<text  x="90.86" y="399.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_destroy (1 samples, 0.06%)</title><rect x="1104.6" y="325" width="0.7" height="15.0" fill="rgb(239,180,36)" rx="2" ry="2" />
<text  x="1107.58" y="335.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (2 samples, 0.13%)</title><rect x="992.7" y="309" width="1.5" height="15.0" fill="rgb(235,98,21)" rx="2" ry="2" />
<text  x="995.70" y="319.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.0 (1 samples, 0.06%)</title><rect x="87.9" y="341" width="0.7" height="15.0" fill="rgb(233,129,1)" rx="2" ry="2" />
<text  x="90.86" y="351.5" ></text>
</g>
<g >
<title>[unknown] (183 samples, 11.72%)</title><rect x="21.3" y="405" width="138.4" height="15.0" fill="rgb(242,194,41)" rx="2" ry="2" />
<text  x="24.34" y="415.5" >[unknown]</text>
</g>
<g >
<title>__GI___libc_write (3 samples, 0.19%)</title><rect x="62.2" y="389" width="2.2" height="15.0" fill="rgb(216,71,54)" rx="2" ry="2" />
<text  x="65.16" y="399.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="131.7" y="357" width="0.8" height="15.0" fill="rgb(246,82,53)" rx="2" ry="2" />
<text  x="134.70" y="367.5" ></text>
</g>
<g >
<title>serialge (1,561 samples, 100.00%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(227,96,22)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >serialge</text>
</g>
<g >
<title>operator new (1 samples, 0.06%)</title><rect x="1112.9" y="357" width="0.8" height="15.0" fill="rgb(251,96,26)" rx="2" ry="2" />
<text  x="1115.90" y="367.5" ></text>
</g>
<g >
<title>tty_flip_buffer_push (2 samples, 0.13%)</title><rect x="62.9" y="213" width="1.5" height="15.0" fill="rgb(207,126,13)" rx="2" ry="2" />
<text  x="65.91" y="223.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.06%)</title><rect x="1115.2" y="277" width="0.7" height="15.0" fill="rgb(236,15,31)" rx="2" ry="2" />
<text  x="1118.16" y="287.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (11 samples, 0.70%)</title><rect x="1083.4" y="325" width="8.3" height="15.0" fill="rgb(228,182,22)" rx="2" ry="2" />
<text  x="1086.41" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (2 samples, 0.13%)</title><rect x="21.3" y="389" width="1.6" height="15.0" fill="rgb(237,33,13)" rx="2" ry="2" />
<text  x="24.34" y="399.5" ></text>
</g>
<g >
<title>dbs_irq_work (2 samples, 0.13%)</title><rect x="992.7" y="165" width="1.5" height="15.0" fill="rgb(228,14,22)" rx="2" ry="2" />
<text  x="995.70" y="175.5" ></text>
</g>
<g >
<title>pty_write (3 samples, 0.19%)</title><rect x="62.2" y="229" width="2.2" height="15.0" fill="rgb(228,187,9)" rx="2" ry="2" />
<text  x="65.16" y="239.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (22 samples, 1.41%)</title><rect x="115.8" y="389" width="16.7" height="15.0" fill="rgb(227,144,15)" rx="2" ry="2" />
<text  x="118.83" y="399.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.06%)</title><rect x="131.7" y="261" width="0.8" height="15.0" fill="rgb(245,221,49)" rx="2" ry="2" />
<text  x="134.70" y="271.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.06%)</title><rect x="87.9" y="181" width="0.7" height="15.0" fill="rgb(218,109,45)" rx="2" ry="2" />
<text  x="90.86" y="191.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_clone (10 samples, 0.64%)</title><rect x="133.2" y="389" width="7.6" height="15.0" fill="rgb(241,158,31)" rx="2" ry="2" />
<text  x="136.22" y="399.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (3 samples, 0.19%)</title><rect x="62.2" y="261" width="2.2" height="15.0" fill="rgb(212,162,9)" rx="2" ry="2" />
<text  x="65.16" y="271.5" ></text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.06%)</title><rect x="1115.2" y="197" width="0.7" height="15.0" fill="rgb(224,177,38)" rx="2" ry="2" />
<text  x="1118.16" y="207.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="131.7" y="373" width="0.8" height="15.0" fill="rgb(237,147,43)" rx="2" ry="2" />
<text  x="134.70" y="383.5" ></text>
</g>
<g >
<title>enqueue_task_fair (2 samples, 0.13%)</title><rect x="992.7" y="53" width="1.5" height="15.0" fill="rgb(231,56,46)" rx="2" ry="2" />
<text  x="995.70" y="63.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.13%)</title><rect x="100.0" y="357" width="1.5" height="15.0" fill="rgb(215,224,9)" rx="2" ry="2" />
<text  x="102.96" y="367.5" ></text>
</g>
<g >
<title>get_page_from_freelist (3 samples, 0.19%)</title><rect x="1140.9" y="261" width="2.2" height="15.0" fill="rgb(223,116,27)" rx="2" ry="2" />
<text  x="1143.86" y="271.5" ></text>
</g>
<g >
<title>insert_work (1 samples, 0.06%)</title><rect x="63.7" y="181" width="0.7" height="15.0" fill="rgb(231,18,38)" rx="2" ry="2" />
<text  x="66.67" y="191.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.06%)</title><rect x="131.7" y="293" width="0.8" height="15.0" fill="rgb(220,42,36)" rx="2" ry="2" />
<text  x="134.70" y="303.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (3 samples, 0.19%)</title><rect x="1078.9" y="325" width="2.2" height="15.0" fill="rgb(234,188,27)" rx="2" ry="2" />
<text  x="1081.88" y="335.5" ></text>
</g>
<g >
<title>tick_sched_handle.isra.0 (1 samples, 0.06%)</title><rect x="131.7" y="277" width="0.8" height="15.0" fill="rgb(252,206,3)" rx="2" ry="2" />
<text  x="134.70" y="287.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_put (1 samples, 0.06%)</title><rect x="132.5" y="389" width="0.7" height="15.0" fill="rgb(252,64,35)" rx="2" ry="2" />
<text  x="135.46" y="399.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_out (1 samples, 0.06%)</title><rect x="991.9" y="245" width="0.8" height="15.0" fill="rgb(235,117,43)" rx="2" ry="2" />
<text  x="994.95" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.13%)</title><rect x="1115.2" y="341" width="1.5" height="15.0" fill="rgb(253,106,47)" rx="2" ry="2" />
<text  x="1118.16" y="351.5" ></text>
</g>
<g >
<title>wake_up_process (1 samples, 0.06%)</title><rect x="62.9" y="149" width="0.8" height="15.0" fill="rgb(237,120,30)" rx="2" ry="2" />
<text  x="65.91" y="159.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.06%)</title><rect x="62.9" y="133" width="0.8" height="15.0" fill="rgb(243,131,3)" rx="2" ry="2" />
<text  x="65.91" y="143.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (6 samples, 0.38%)</title><rect x="1108.4" y="341" width="4.5" height="15.0" fill="rgb(221,21,0)" rx="2" ry="2" />
<text  x="1111.36" y="351.5" ></text>
</g>
<g >
<title>all (1,561 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(240,107,21)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>queue_work_on (2 samples, 0.13%)</title><rect x="62.9" y="197" width="1.5" height="15.0" fill="rgb(225,216,27)" rx="2" ry="2" />
<text  x="65.91" y="207.5" ></text>
</g>
<g >
<title>Utility::InitializeArray (160 samples, 10.25%)</title><rect x="994.2" y="373" width="121.0" height="15.0" fill="rgb(217,84,39)" rx="2" ry="2" />
<text  x="997.22" y="383.5" >Utility::Initia..</text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.06%)</title><rect x="87.9" y="309" width="0.7" height="15.0" fill="rgb(240,223,28)" rx="2" ry="2" />
<text  x="90.86" y="319.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (3 samples, 0.19%)</title><rect x="1140.9" y="277" width="2.2" height="15.0" fill="rgb(226,121,46)" rx="2" ry="2" />
<text  x="1143.86" y="287.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (137 samples, 8.78%)</title><rect x="1003.3" y="341" width="103.5" height="15.0" fill="rgb(242,146,44)" rx="2" ry="2" />
<text  x="1006.29" y="351.5" >std::istream..</text>
</g>
<g >
<title>exc_page_fault (6 samples, 0.38%)</title><rect x="1139.4" y="373" width="4.5" height="15.0" fill="rgb(243,157,51)" rx="2" ry="2" />
<text  x="1142.35" y="383.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (1 samples, 0.06%)</title><rect x="189.2" y="405" width="0.7" height="15.0" fill="rgb(249,111,19)" rx="2" ry="2" />
<text  x="192.15" y="415.5" ></text>
</g>
<g >
<title>place_entity (1 samples, 0.06%)</title><rect x="992.7" y="37" width="0.8" height="15.0" fill="rgb(223,56,41)" rx="2" ry="2" />
<text  x="995.70" y="47.5" ></text>
</g>
<g >
<title>main (1,224 samples, 78.41%)</title><rect x="191.4" y="405" width="925.3" height="15.0" fill="rgb(247,15,34)" rx="2" ry="2" />
<text  x="194.42" y="415.5" >main</text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.06%)</title><rect x="1115.2" y="245" width="0.7" height="15.0" fill="rgb(230,57,43)" rx="2" ry="2" />
<text  x="1118.16" y="255.5" ></text>
</g>
<g >
<title>generic_file_read_iter (2 samples, 0.13%)</title><rect x="100.0" y="261" width="1.5" height="15.0" fill="rgb(240,188,15)" rx="2" ry="2" />
<text  x="102.96" y="271.5" ></text>
</g>
<g >
<title>queue_work_on (2 samples, 0.13%)</title><rect x="992.7" y="149" width="1.5" height="15.0" fill="rgb(227,95,32)" rx="2" ry="2" />
<text  x="995.70" y="159.5" ></text>
</g>
<g >
<title>irq_work_single (2 samples, 0.13%)</title><rect x="992.7" y="181" width="1.5" height="15.0" fill="rgb(206,70,41)" rx="2" ry="2" />
<text  x="995.70" y="191.5" ></text>
</g>
<g >
<title>lru_cache_add (1 samples, 0.06%)</title><rect x="1143.1" y="277" width="0.8" height="15.0" fill="rgb(219,115,33)" rx="2" ry="2" />
<text  x="1146.13" y="287.5" ></text>
</g>
</g>
</svg>
