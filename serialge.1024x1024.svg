<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>main (2,170 samples, 85.67%)</title><rect x="137.6" y="421" width="1010.9" height="15.0" fill="rgb(227,212,6)" rx="2" ry="2" />
<text  x="140.64" y="431.5" >main</text>
</g>
<g >
<title>_find_next_bit.constprop.0 (1 samples, 0.04%)</title><rect x="1080.1" y="181" width="0.4" height="15.0" fill="rgb(240,107,22)" rx="2" ry="2" />
<text  x="1083.06" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.12%)</title><rect x="70.1" y="405" width="1.4" height="15.0" fill="rgb(228,66,41)" rx="2" ry="2" />
<text  x="73.09" y="415.5" ></text>
</g>
<g >
<title>new_sync_write (4 samples, 0.16%)</title><rect x="43.1" y="325" width="1.8" height="15.0" fill="rgb(229,46,48)" rx="2" ry="2" />
<text  x="46.08" y="335.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (8 samples, 0.32%)</title><rect x="1077.3" y="325" width="3.7" height="15.0" fill="rgb(237,120,45)" rx="2" ry="2" />
<text  x="1080.26" y="335.5" ></text>
</g>
<g >
<title>tty_flip_buffer_push (1 samples, 0.04%)</title><rect x="44.5" y="245" width="0.4" height="15.0" fill="rgb(213,16,13)" rx="2" ry="2" />
<text  x="47.47" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (3 samples, 0.12%)</title><rect x="18.4" y="421" width="1.4" height="15.0" fill="rgb(254,155,21)" rx="2" ry="2" />
<text  x="21.39" y="431.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;double&gt; (2 samples, 0.08%)</title><rect x="101.8" y="389" width="0.9" height="15.0" fill="rgb(250,96,16)" rx="2" ry="2" />
<text  x="104.77" y="399.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (35 samples, 1.38%)</title><rect x="85.5" y="421" width="16.3" height="15.0" fill="rgb(220,23,5)" rx="2" ry="2" />
<text  x="88.47" y="431.5" ></text>
</g>
<g >
<title>__remove_hrtimer (1 samples, 0.04%)</title><rect x="1074.0" y="293" width="0.5" height="15.0" fill="rgb(237,31,46)" rx="2" ry="2" />
<text  x="1077.00" y="303.5" ></text>
</g>
<g >
<title>extract_crng (1 samples, 0.04%)</title><rect x="64.5" y="277" width="0.5" height="15.0" fill="rgb(251,114,5)" rx="2" ry="2" />
<text  x="67.50" y="287.5" ></text>
</g>
<g >
<title>irq_work_tick (1 samples, 0.04%)</title><rect x="1075.4" y="245" width="0.5" height="15.0" fill="rgb(207,118,45)" rx="2" ry="2" />
<text  x="1078.40" y="255.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_put (2 samples, 0.08%)</title><rect x="101.8" y="421" width="0.9" height="15.0" fill="rgb(213,215,50)" rx="2" ry="2" />
<text  x="104.77" y="431.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64.part.0 (2 samples, 0.08%)</title><rect x="1074.5" y="261" width="0.9" height="15.0" fill="rgb(210,225,53)" rx="2" ry="2" />
<text  x="1077.47" y="271.5" ></text>
</g>
<g >
<title>std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.04%)</title><rect x="85.0" y="389" width="0.5" height="15.0" fill="rgb(224,81,33)" rx="2" ry="2" />
<text  x="88.00" y="399.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_destroy (1 samples, 0.04%)</title><rect x="1138.8" y="341" width="0.4" height="15.0" fill="rgb(223,168,46)" rx="2" ry="2" />
<text  x="1141.76" y="351.5" ></text>
</g>
<g >
<title>asm_sysvec_irq_work (4 samples, 0.16%)</title><rect x="1078.2" y="277" width="1.9" height="15.0" fill="rgb(237,69,40)" rx="2" ry="2" />
<text  x="1081.20" y="287.5" ></text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 0.16%)</title><rect x="1159.7" y="325" width="1.9" height="15.0" fill="rgb(249,149,30)" rx="2" ry="2" />
<text  x="1162.72" y="335.5" ></text>
</g>
<g >
<title>do_anonymous_page (6 samples, 0.24%)</title><rect x="1159.3" y="341" width="2.7" height="15.0" fill="rgb(246,24,18)" rx="2" ry="2" />
<text  x="1162.25" y="351.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (16 samples, 0.63%)</title><rect x="1123.4" y="341" width="7.4" height="15.0" fill="rgb(251,143,19)" rx="2" ry="2" />
<text  x="1126.38" y="351.5" ></text>
</g>
<g >
<title>wake_up_process (2 samples, 0.08%)</title><rect x="43.5" y="165" width="1.0" height="15.0" fill="rgb(242,139,7)" rx="2" ry="2" />
<text  x="46.54" y="175.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="1149.0" y="405" width="0.5" height="15.0" fill="rgb(247,26,47)" rx="2" ry="2" />
<text  x="1152.01" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 0.04%)</title><rect x="101.8" y="373" width="0.4" height="15.0" fill="rgb(207,72,40)" rx="2" ry="2" />
<text  x="104.77" y="383.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.0 (1 samples, 0.04%)</title><rect x="64.5" y="373" width="0.5" height="15.0" fill="rgb(248,189,5)" rx="2" ry="2" />
<text  x="67.50" y="383.5" ></text>
</g>
<g >
<title>round_and_return (13 samples, 0.51%)</title><rect x="71.5" y="421" width="6.0" height="15.0" fill="rgb(207,146,17)" rx="2" ry="2" />
<text  x="74.49" y="431.5" ></text>
</g>
<g >
<title>exec_binprm (1 samples, 0.04%)</title><rect x="64.5" y="357" width="0.5" height="15.0" fill="rgb(212,68,34)" rx="2" ry="2" />
<text  x="67.50" y="367.5" ></text>
</g>
<g >
<title>psi_task_switch (2 samples, 0.08%)</title><rect x="1076.3" y="261" width="1.0" height="15.0" fill="rgb(228,201,14)" rx="2" ry="2" />
<text  x="1079.33" y="271.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (8 samples, 0.32%)</title><rect x="1077.3" y="309" width="3.7" height="15.0" fill="rgb(254,147,31)" rx="2" ry="2" />
<text  x="1080.26" y="319.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="84.5" y="405" width="0.5" height="15.0" fill="rgb(251,162,11)" rx="2" ry="2" />
<text  x="87.54" y="415.5" ></text>
</g>
<g >
<title>new_sync_read (3 samples, 0.12%)</title><rect x="70.1" y="325" width="1.4" height="15.0" fill="rgb(222,64,42)" rx="2" ry="2" />
<text  x="73.09" y="335.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.16%)</title><rect x="1159.7" y="309" width="1.9" height="15.0" fill="rgb(222,94,50)" rx="2" ry="2" />
<text  x="1162.72" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1149.9" y="421" width="0.5" height="15.0" fill="rgb(220,213,45)" rx="2" ry="2" />
<text  x="1152.94" y="431.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (2 samples, 0.08%)</title><rect x="1147.1" y="373" width="1.0" height="15.0" fill="rgb(252,114,49)" rx="2" ry="2" />
<text  x="1150.14" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="64.5" y="421" width="0.5" height="15.0" fill="rgb(252,227,39)" rx="2" ry="2" />
<text  x="67.50" y="431.5" ></text>
</g>
<g >
<title>vfs_read (3 samples, 0.12%)</title><rect x="70.1" y="341" width="1.4" height="15.0" fill="rgb(213,145,41)" rx="2" ry="2" />
<text  x="73.09" y="351.5" ></text>
</g>
<g >
<title>psi_group_change (1 samples, 0.04%)</title><rect x="1076.8" y="245" width="0.5" height="15.0" fill="rgb(230,6,5)" rx="2" ry="2" />
<text  x="1079.80" y="255.5" ></text>
</g>
<g >
<title>update_wall_time (2 samples, 0.08%)</title><rect x="1074.5" y="245" width="0.9" height="15.0" fill="rgb(230,101,15)" rx="2" ry="2" />
<text  x="1077.47" y="255.5" ></text>
</g>
<g >
<title>rebalance_domains (1 samples, 0.04%)</title><rect x="1080.1" y="261" width="0.4" height="15.0" fill="rgb(239,204,9)" rx="2" ry="2" />
<text  x="1083.06" y="271.5" ></text>
</g>
<g >
<title>update_cfs_rq_h_load (1 samples, 0.04%)</title><rect x="44.5" y="149" width="0.4" height="15.0" fill="rgb(235,18,28)" rx="2" ry="2" />
<text  x="47.47" y="159.5" ></text>
</g>
<g >
<title>std::string::reserve (12 samples, 0.47%)</title><rect x="110.2" y="421" width="5.5" height="15.0" fill="rgb(251,150,18)" rx="2" ry="2" />
<text  x="113.16" y="431.5" ></text>
</g>
<g >
<title>__strlen_avx2 (20 samples, 0.79%)</title><rect x="50.1" y="421" width="9.3" height="15.0" fill="rgb(245,37,54)" rx="2" ry="2" />
<text  x="53.06" y="431.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.04%)</title><rect x="1149.9" y="389" width="0.5" height="15.0" fill="rgb(217,37,1)" rx="2" ry="2" />
<text  x="1152.94" y="399.5" ></text>
</g>
<g >
<title>copy_page_to_iter (2 samples, 0.08%)</title><rect x="70.6" y="261" width="0.9" height="15.0" fill="rgb(221,164,32)" rx="2" ry="2" />
<text  x="73.56" y="271.5" ></text>
</g>
<g >
<title>task_tick_fair (1 samples, 0.04%)</title><rect x="1075.9" y="229" width="0.4" height="15.0" fill="rgb(245,20,16)" rx="2" ry="2" />
<text  x="1078.87" y="239.5" ></text>
</g>
<g >
<title>ksys_write (4 samples, 0.16%)</title><rect x="43.1" y="357" width="1.8" height="15.0" fill="rgb(213,108,43)" rx="2" ry="2" />
<text  x="46.08" y="367.5" ></text>
</g>
<g >
<title>__sysvec_irq_work (4 samples, 0.16%)</title><rect x="1078.2" y="245" width="1.9" height="15.0" fill="rgb(249,67,54)" rx="2" ry="2" />
<text  x="1081.20" y="255.5" ></text>
</g>
<g >
<title>insert_work (1 samples, 0.04%)</title><rect x="1079.6" y="149" width="0.5" height="15.0" fill="rgb(239,159,44)" rx="2" ry="2" />
<text  x="1082.59" y="159.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.04%)</title><rect x="1080.1" y="229" width="0.4" height="15.0" fill="rgb(250,133,44)" rx="2" ry="2" />
<text  x="1083.06" y="239.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.08%)</title><rect x="1076.3" y="325" width="1.0" height="15.0" fill="rgb(212,127,6)" rx="2" ry="2" />
<text  x="1079.33" y="335.5" ></text>
</g>
<g >
<title>read (4 samples, 0.16%)</title><rect x="69.6" y="421" width="1.9" height="15.0" fill="rgb(246,170,37)" rx="2" ry="2" />
<text  x="72.63" y="431.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (4 samples, 0.16%)</title><rect x="43.1" y="293" width="1.8" height="15.0" fill="rgb(225,163,10)" rx="2" ry="2" />
<text  x="46.08" y="303.5" ></text>
</g>
<g >
<title>rb_next (1 samples, 0.04%)</title><rect x="1074.0" y="277" width="0.5" height="15.0" fill="rgb(251,15,27)" rx="2" ry="2" />
<text  x="1077.00" y="287.5" ></text>
</g>
<g >
<title>irq_work_run (4 samples, 0.16%)</title><rect x="1078.2" y="229" width="1.9" height="15.0" fill="rgb(213,33,31)" rx="2" ry="2" />
<text  x="1081.20" y="239.5" ></text>
</g>
<g >
<title>queue_work_on (1 samples, 0.04%)</title><rect x="44.5" y="229" width="0.4" height="15.0" fill="rgb(234,45,23)" rx="2" ry="2" />
<text  x="47.47" y="239.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (7 samples, 0.28%)</title><rect x="1077.3" y="293" width="3.2" height="15.0" fill="rgb(231,10,40)" rx="2" ry="2" />
<text  x="1080.26" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_write (4 samples, 0.16%)</title><rect x="43.1" y="373" width="1.8" height="15.0" fill="rgb(223,36,31)" rx="2" ry="2" />
<text  x="46.08" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (1 samples, 0.04%)</title><rect x="1148.1" y="357" width="0.4" height="15.0" fill="rgb(218,191,7)" rx="2" ry="2" />
<text  x="1151.07" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1148.1" y="389" width="0.4" height="15.0" fill="rgb(239,195,39)" rx="2" ry="2" />
<text  x="1151.07" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (8 samples, 0.32%)</title><rect x="1158.8" y="421" width="3.7" height="15.0" fill="rgb(205,150,48)" rx="2" ry="2" />
<text  x="1161.79" y="431.5" ></text>
</g>
<g >
<title>wake_up_process (3 samples, 0.12%)</title><rect x="1078.2" y="117" width="1.4" height="15.0" fill="rgb(211,53,43)" rx="2" ry="2" />
<text  x="1081.20" y="127.5" ></text>
</g>
<g >
<title>timekeeping_advance (2 samples, 0.08%)</title><rect x="1074.5" y="229" width="0.9" height="15.0" fill="rgb(238,7,51)" rx="2" ry="2" />
<text  x="1077.47" y="239.5" ></text>
</g>
<g >
<title>_dl_start (1 samples, 0.04%)</title><rect x="1149.0" y="421" width="0.5" height="15.0" fill="rgb(214,172,49)" rx="2" ry="2" />
<text  x="1152.01" y="431.5" ></text>
</g>
<g >
<title>queue_work_on (4 samples, 0.16%)</title><rect x="1078.2" y="165" width="1.9" height="15.0" fill="rgb(229,160,49)" rx="2" ry="2" />
<text  x="1081.20" y="175.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.04%)</title><rect x="1149.0" y="341" width="0.5" height="15.0" fill="rgb(236,2,29)" rx="2" ry="2" />
<text  x="1152.01" y="351.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (1 samples, 0.04%)</title><rect x="137.2" y="437" width="0.4" height="15.0" fill="rgb(220,50,20)" rx="2" ry="2" />
<text  x="140.18" y="447.5" ></text>
</g>
<g >
<title>insert_work (2 samples, 0.08%)</title><rect x="43.5" y="181" width="1.0" height="15.0" fill="rgb(230,21,0)" rx="2" ry="2" />
<text  x="46.54" y="191.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.04%)</title><rect x="1149.0" y="325" width="0.5" height="15.0" fill="rgb(231,72,32)" rx="2" ry="2" />
<text  x="1152.01" y="335.5" ></text>
</g>
<g >
<title>idtentry_exit_cond_rcu (2 samples, 0.08%)</title><rect x="1076.3" y="341" width="1.0" height="15.0" fill="rgb(223,164,17)" rx="2" ry="2" />
<text  x="1079.33" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (18 samples, 0.71%)</title><rect x="10.0" y="437" width="8.4" height="15.0" fill="rgb(225,165,21)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (8 samples, 0.32%)</title><rect x="1119.2" y="341" width="3.7" height="15.0" fill="rgb(253,174,33)" rx="2" ry="2" />
<text  x="1122.19" y="351.5" ></text>
</g>
<g >
<title>mem_cgroup_charge (1 samples, 0.04%)</title><rect x="1149.0" y="309" width="0.5" height="15.0" fill="rgb(254,180,16)" rx="2" ry="2" />
<text  x="1152.01" y="319.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (17 samples, 0.67%)</title><rect x="1130.8" y="341" width="8.0" height="15.0" fill="rgb(225,24,28)" rx="2" ry="2" />
<text  x="1133.84" y="351.5" ></text>
</g>
<g >
<title>all (2,533 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(224,126,18)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1149.9" y="437" width="0.5" height="15.0" fill="rgb(250,219,49)" rx="2" ry="2" />
<text  x="1152.94" y="447.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.04%)</title><rect x="1149.9" y="357" width="0.5" height="15.0" fill="rgb(225,11,37)" rx="2" ry="2" />
<text  x="1152.94" y="367.5" ></text>
</g>
<g >
<title>dbs_irq_work (4 samples, 0.16%)</title><rect x="1078.2" y="181" width="1.9" height="15.0" fill="rgb(213,144,20)" rx="2" ry="2" />
<text  x="1081.20" y="191.5" ></text>
</g>
<g >
<title>tty_flip_buffer_push (2 samples, 0.08%)</title><rect x="43.5" y="229" width="1.0" height="15.0" fill="rgb(240,145,30)" rx="2" ry="2" />
<text  x="46.54" y="239.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (3 samples, 0.12%)</title><rect x="70.1" y="309" width="1.4" height="15.0" fill="rgb(211,82,48)" rx="2" ry="2" />
<text  x="73.09" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="64.5" y="405" width="0.5" height="15.0" fill="rgb(232,226,2)" rx="2" ry="2" />
<text  x="67.50" y="415.5" ></text>
</g>
<g >
<title>tick_sched_timer (4 samples, 0.16%)</title><rect x="1074.5" y="293" width="1.8" height="15.0" fill="rgb(238,11,21)" rx="2" ry="2" />
<text  x="1077.47" y="303.5" ></text>
</g>
<g >
<title>malloc (10 samples, 0.39%)</title><rect x="65.0" y="421" width="4.6" height="15.0" fill="rgb(250,59,11)" rx="2" ry="2" />
<text  x="67.97" y="431.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.04%)</title><rect x="1149.9" y="229" width="0.5" height="15.0" fill="rgb(236,37,37)" rx="2" ry="2" />
<text  x="1152.94" y="239.5" ></text>
</g>
<g >
<title>insert_work (1 samples, 0.04%)</title><rect x="44.5" y="197" width="0.4" height="15.0" fill="rgb(230,10,46)" rx="2" ry="2" />
<text  x="47.47" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.12%)</title><rect x="70.1" y="389" width="1.4" height="15.0" fill="rgb(216,16,40)" rx="2" ry="2" />
<text  x="73.09" y="399.5" ></text>
</g>
<g >
<title>_int_free (9 samples, 0.36%)</title><rect x="60.3" y="421" width="4.2" height="15.0" fill="rgb(253,132,23)" rx="2" ry="2" />
<text  x="63.31" y="431.5" ></text>
</g>
<g >
<title>tty_write (4 samples, 0.16%)</title><rect x="43.1" y="309" width="1.8" height="15.0" fill="rgb(254,76,40)" rx="2" ry="2" />
<text  x="46.08" y="319.5" ></text>
</g>
<g >
<title>ksys_read (3 samples, 0.12%)</title><rect x="70.1" y="357" width="1.4" height="15.0" fill="rgb(238,46,28)" rx="2" ry="2" />
<text  x="73.09" y="367.5" ></text>
</g>
<g >
<title>do_output_char (2 samples, 0.08%)</title><rect x="43.5" y="261" width="1.0" height="15.0" fill="rgb(235,3,47)" rx="2" ry="2" />
<text  x="46.54" y="271.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.12%)</title><rect x="1117.8" y="341" width="1.4" height="15.0" fill="rgb(212,200,0)" rx="2" ry="2" />
<text  x="1120.79" y="351.5" ></text>
</g>
<g >
<title>native_apic_wait_icr_idle (1 samples, 0.04%)</title><rect x="1075.9" y="149" width="0.4" height="15.0" fill="rgb(220,177,1)" rx="2" ry="2" />
<text  x="1078.87" y="159.5" ></text>
</g>
<g >
<title>update_load_avg (1 samples, 0.04%)</title><rect x="1075.9" y="213" width="0.4" height="15.0" fill="rgb(239,113,47)" rx="2" ry="2" />
<text  x="1078.87" y="223.5" ></text>
</g>
<g >
<title>std::string::_Rep::_S_create (7 samples, 0.28%)</title><rect x="106.9" y="421" width="3.3" height="15.0" fill="rgb(233,58,14)" rx="2" ry="2" />
<text  x="109.90" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (21 samples, 0.83%)</title><rect x="1095.9" y="341" width="9.8" height="15.0" fill="rgb(210,204,10)" rx="2" ry="2" />
<text  x="1098.90" y="351.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (5 samples, 0.20%)</title><rect x="1074.0" y="341" width="2.3" height="15.0" fill="rgb(250,129,27)" rx="2" ry="2" />
<text  x="1077.00" y="351.5" ></text>
</g>
<g >
<title>update_fast_timekeeper (1 samples, 0.04%)</title><rect x="1074.9" y="213" width="0.5" height="15.0" fill="rgb(213,97,43)" rx="2" ry="2" />
<text  x="1077.93" y="223.5" ></text>
</g>
<g >
<title>_extract_crng (1 samples, 0.04%)</title><rect x="64.5" y="261" width="0.5" height="15.0" fill="rgb(238,54,22)" rx="2" ry="2" />
<text  x="67.50" y="271.5" ></text>
</g>
<g >
<title>__handle_mm_fault (6 samples, 0.24%)</title><rect x="1159.3" y="357" width="2.7" height="15.0" fill="rgb(210,225,15)" rx="2" ry="2" />
<text  x="1162.25" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.04%)</title><rect x="1149.9" y="405" width="0.5" height="15.0" fill="rgb(234,39,18)" rx="2" ry="2" />
<text  x="1152.94" y="415.5" ></text>
</g>
<g >
<title>Serial::SerialSolve (2,169 samples, 85.63%)</title><rect x="137.6" y="405" width="1010.5" height="15.0" fill="rgb(242,137,2)" rx="2" ry="2" />
<text  x="140.64" y="415.5" >Serial::SerialSolve</text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (13 samples, 0.51%)</title><rect x="1141.1" y="357" width="6.0" height="15.0" fill="rgb(244,104,23)" rx="2" ry="2" />
<text  x="1144.09" y="367.5" ></text>
</g>
<g >
<title>irq_work_queue (1 samples, 0.04%)</title><rect x="1075.9" y="181" width="0.4" height="15.0" fill="rgb(237,130,9)" rx="2" ry="2" />
<text  x="1078.87" y="191.5" ></text>
</g>
<g >
<title>std::string::reserve (1 samples, 0.04%)</title><rect x="1139.2" y="341" width="0.5" height="15.0" fill="rgb(242,1,3)" rx="2" ry="2" />
<text  x="1142.22" y="351.5" ></text>
</g>
<g >
<title>__tlb_remove_page_size (1 samples, 0.04%)</title><rect x="1149.9" y="261" width="0.5" height="15.0" fill="rgb(237,37,9)" rx="2" ry="2" />
<text  x="1152.94" y="271.5" ></text>
</g>
<g >
<title>__queue_work (2 samples, 0.08%)</title><rect x="43.5" y="197" width="1.0" height="15.0" fill="rgb(225,202,32)" rx="2" ry="2" />
<text  x="46.54" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.16%)</title><rect x="43.1" y="389" width="1.8" height="15.0" fill="rgb(252,63,23)" rx="2" ry="2" />
<text  x="46.08" y="399.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="1149.0" y="373" width="0.5" height="15.0" fill="rgb(219,84,25)" rx="2" ry="2" />
<text  x="1152.01" y="383.5" ></text>
</g>
<g >
<title>setup_new_exec (1 samples, 0.04%)</title><rect x="64.5" y="325" width="0.5" height="15.0" fill="rgb(241,0,40)" rx="2" ry="2" />
<text  x="67.50" y="335.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.08%)</title><rect x="43.5" y="149" width="1.0" height="15.0" fill="rgb(205,2,25)" rx="2" ry="2" />
<text  x="46.54" y="159.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (5 samples, 0.20%)</title><rect x="115.7" y="421" width="2.4" height="15.0" fill="rgb(208,61,6)" rx="2" ry="2" />
<text  x="118.75" y="431.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (2 samples, 0.08%)</title><rect x="1074.5" y="277" width="0.9" height="15.0" fill="rgb(211,16,24)" rx="2" ry="2" />
<text  x="1077.47" y="287.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (5 samples, 0.20%)</title><rect x="1074.0" y="309" width="2.3" height="15.0" fill="rgb(230,137,20)" rx="2" ry="2" />
<text  x="1077.00" y="319.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.04%)</title><rect x="1149.9" y="293" width="0.5" height="15.0" fill="rgb(228,59,27)" rx="2" ry="2" />
<text  x="1152.94" y="303.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (8 samples, 0.32%)</title><rect x="1186.3" y="437" width="3.7" height="15.0" fill="rgb(207,134,52)" rx="2" ry="2" />
<text  x="1189.27" y="447.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (2 samples, 0.08%)</title><rect x="59.4" y="421" width="0.9" height="15.0" fill="rgb(224,127,15)" rx="2" ry="2" />
<text  x="62.38" y="431.5" ></text>
</g>
<g >
<title>psi_task_change (1 samples, 0.04%)</title><rect x="1078.7" y="69" width="0.4" height="15.0" fill="rgb(242,85,13)" rx="2" ry="2" />
<text  x="1081.66" y="79.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (8 samples, 0.32%)</title><rect x="1158.8" y="437" width="3.7" height="15.0" fill="rgb(252,178,43)" rx="2" ry="2" />
<text  x="1161.79" y="447.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.04%)</title><rect x="19.8" y="421" width="0.4" height="15.0" fill="rgb(211,224,33)" rx="2" ry="2" />
<text  x="22.78" y="431.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (119 samples, 4.70%)</title><rect x="1084.3" y="357" width="55.4" height="15.0" fill="rgb(219,103,24)" rx="2" ry="2" />
<text  x="1087.25" y="367.5" >std::..</text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.04%)</title><rect x="1080.1" y="213" width="0.4" height="15.0" fill="rgb(241,110,2)" rx="2" ry="2" />
<text  x="1083.06" y="223.5" ></text>
</g>
<g >
<title>unmap_region (1 samples, 0.04%)</title><rect x="1148.1" y="309" width="0.4" height="15.0" fill="rgb(216,218,30)" rx="2" ry="2" />
<text  x="1151.07" y="319.5" ></text>
</g>
<g >
<title>std::locale::operator= (1 samples, 0.04%)</title><rect x="19.8" y="405" width="0.4" height="15.0" fill="rgb(251,17,2)" rx="2" ry="2" />
<text  x="22.78" y="415.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (41 samples, 1.62%)</title><rect x="118.1" y="437" width="19.1" height="15.0" fill="rgb(232,49,33)" rx="2" ry="2" />
<text  x="121.08" y="447.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.08%)</title><rect x="101.8" y="405" width="0.9" height="15.0" fill="rgb(233,157,7)" rx="2" ry="2" />
<text  x="104.77" y="415.5" ></text>
</g>
<g >
<title>__vm_munmap (1 samples, 0.04%)</title><rect x="1148.1" y="341" width="0.4" height="15.0" fill="rgb(237,107,52)" rx="2" ry="2" />
<text  x="1151.07" y="351.5" ></text>
</g>
<g >
<title>copyin (1 samples, 0.04%)</title><rect x="43.1" y="277" width="0.4" height="15.0" fill="rgb(224,60,50)" rx="2" ry="2" />
<text  x="46.08" y="287.5" ></text>
</g>
<g >
<title>update_process_times (2 samples, 0.08%)</title><rect x="1075.4" y="261" width="0.9" height="15.0" fill="rgb(241,14,16)" rx="2" ry="2" />
<text  x="1078.40" y="271.5" ></text>
</g>
<g >
<title>n_tty_write (3 samples, 0.12%)</title><rect x="43.5" y="277" width="1.4" height="15.0" fill="rgb(254,126,19)" rx="2" ry="2" />
<text  x="46.54" y="287.5" ></text>
</g>
<g >
<title>__prepare_exit_to_usermode (2 samples, 0.08%)</title><rect x="1076.3" y="309" width="1.0" height="15.0" fill="rgb(221,45,8)" rx="2" ry="2" />
<text  x="1079.33" y="319.5" ></text>
</g>
<g >
<title>get_random_u64 (1 samples, 0.04%)</title><rect x="64.5" y="293" width="0.5" height="15.0" fill="rgb(252,67,34)" rx="2" ry="2" />
<text  x="67.50" y="303.5" ></text>
</g>
<g >
<title>__queue_work (3 samples, 0.12%)</title><rect x="1078.2" y="149" width="1.4" height="15.0" fill="rgb(225,217,37)" rx="2" ry="2" />
<text  x="1081.20" y="159.5" ></text>
</g>
<g >
<title>__queue_work (1 samples, 0.04%)</title><rect x="44.5" y="213" width="0.4" height="15.0" fill="rgb(236,163,21)" rx="2" ry="2" />
<text  x="47.47" y="223.5" ></text>
</g>
<g >
<title>check_preempt_curr (1 samples, 0.04%)</title><rect x="1079.1" y="53" width="0.5" height="15.0" fill="rgb(228,69,54)" rx="2" ry="2" />
<text  x="1082.13" y="63.5" ></text>
</g>
<g >
<title>tick_sched_handle.isra.0 (2 samples, 0.08%)</title><rect x="1075.4" y="277" width="0.9" height="15.0" fill="rgb(234,45,17)" rx="2" ry="2" />
<text  x="1078.40" y="287.5" ></text>
</g>
<g >
<title>copy_user_generic_string (2 samples, 0.08%)</title><rect x="70.6" y="245" width="0.9" height="15.0" fill="rgb(216,31,37)" rx="2" ry="2" />
<text  x="73.56" y="255.5" ></text>
</g>
<g >
<title>__mpn_construct_double (5 samples, 0.20%)</title><rect x="44.9" y="421" width="2.4" height="15.0" fill="rgb(220,4,28)" rx="2" ry="2" />
<text  x="47.94" y="431.5" ></text>
</g>
<g >
<title>serialge (2,533 samples, 100.00%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(227,42,45)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >serialge</text>
</g>
<g >
<title>cpumask_next_and (1 samples, 0.04%)</title><rect x="1080.1" y="197" width="0.4" height="15.0" fill="rgb(254,138,7)" rx="2" ry="2" />
<text  x="1083.06" y="207.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.04%)</title><rect x="1075.9" y="245" width="0.4" height="15.0" fill="rgb(252,131,33)" rx="2" ry="2" />
<text  x="1078.87" y="255.5" ></text>
</g>
<g >
<title>exc_page_fault (8 samples, 0.32%)</title><rect x="1158.8" y="405" width="3.7" height="15.0" fill="rgb(214,228,21)" rx="2" ry="2" />
<text  x="1161.79" y="415.5" ></text>
</g>
<g >
<title>Utility::InitializeArray (144 samples, 5.68%)</title><rect x="1081.0" y="389" width="67.1" height="15.0" fill="rgb(218,45,12)" rx="2" ry="2" />
<text  x="1083.99" y="399.5" >Utility..</text>
</g>
<g >
<title>__wcsnlen_ifunc (1 samples, 0.04%)</title><rect x="59.4" y="389" width="0.4" height="15.0" fill="rgb(207,143,33)" rx="2" ry="2" />
<text  x="62.38" y="399.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.04%)</title><rect x="102.2" y="373" width="0.5" height="15.0" fill="rgb(218,60,35)" rx="2" ry="2" />
<text  x="105.24" y="383.5" ></text>
</g>
<g >
<title>asm_sysvec_irq_work (1 samples, 0.04%)</title><rect x="1080.5" y="293" width="0.5" height="15.0" fill="rgb(241,68,24)" rx="2" ry="2" />
<text  x="1083.53" y="303.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.04%)</title><rect x="1149.9" y="309" width="0.5" height="15.0" fill="rgb(207,100,34)" rx="2" ry="2" />
<text  x="1152.94" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.16%)</title><rect x="43.1" y="405" width="1.8" height="15.0" fill="rgb(233,108,0)" rx="2" ry="2" />
<text  x="46.08" y="415.5" ></text>
</g>
<g >
<title>_dl_addr (1 samples, 0.04%)</title><rect x="1148.5" y="437" width="0.5" height="15.0" fill="rgb(217,61,24)" rx="2" ry="2" />
<text  x="1151.54" y="447.5" ></text>
</g>
<g >
<title>Serial::ForwardElimination (2,023 samples, 79.87%)</title><rect x="138.6" y="389" width="942.4" height="15.0" fill="rgb(241,116,20)" rx="2" ry="2" />
<text  x="141.57" y="399.5" >Serial::ForwardElimination</text>
</g>
<g >
<title>_int_malloc (1 samples, 0.04%)</title><rect x="1149.5" y="437" width="0.4" height="15.0" fill="rgb(215,30,2)" rx="2" ry="2" />
<text  x="1152.47" y="447.5" ></text>
</g>
<g >
<title>clear_page_rep (3 samples, 0.12%)</title><rect x="1160.2" y="277" width="1.4" height="15.0" fill="rgb(251,36,37)" rx="2" ry="2" />
<text  x="1163.19" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1148.1" y="373" width="0.4" height="15.0" fill="rgb(242,195,38)" rx="2" ry="2" />
<text  x="1151.07" y="383.5" ></text>
</g>
<g >
<title>try_to_wake_up (3 samples, 0.12%)</title><rect x="1078.2" y="101" width="1.4" height="15.0" fill="rgb(227,227,7)" rx="2" ry="2" />
<text  x="1081.20" y="111.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (5 samples, 0.20%)</title><rect x="1074.0" y="325" width="2.3" height="15.0" fill="rgb(247,80,54)" rx="2" ry="2" />
<text  x="1077.00" y="335.5" ></text>
</g>
<g >
<title>__mpn_lshift (6 samples, 0.24%)</title><rect x="47.3" y="421" width="2.8" height="15.0" fill="rgb(230,76,45)" rx="2" ry="2" />
<text  x="50.27" y="431.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.04%)</title><rect x="85.0" y="405" width="0.5" height="15.0" fill="rgb(253,216,46)" rx="2" ry="2" />
<text  x="88.00" y="415.5" ></text>
</g>
<g >
<title>__get_free_pages (1 samples, 0.04%)</title><rect x="1149.9" y="245" width="0.5" height="15.0" fill="rgb(213,206,8)" rx="2" ry="2" />
<text  x="1152.94" y="255.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (14 samples, 0.55%)</title><rect x="1111.3" y="341" width="6.5" height="15.0" fill="rgb(226,28,12)" rx="2" ry="2" />
<text  x="1114.27" y="351.5" ></text>
</g>
<g >
<title>irq_work_run_list (4 samples, 0.16%)</title><rect x="1078.2" y="213" width="1.9" height="15.0" fill="rgb(216,56,23)" rx="2" ry="2" />
<text  x="1081.20" y="223.5" ></text>
</g>
<g >
<title>ReadLine (142 samples, 5.61%)</title><rect x="1081.0" y="373" width="66.1" height="15.0" fill="rgb(229,64,49)" rx="2" ry="2" />
<text  x="1083.99" y="383.5" >ReadLine</text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.04%)</title><rect x="1148.1" y="277" width="0.4" height="15.0" fill="rgb(238,154,34)" rx="2" ry="2" />
<text  x="1151.07" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (15 samples, 0.59%)</title><rect x="1074.0" y="373" width="7.0" height="15.0" fill="rgb(251,60,36)" rx="2" ry="2" />
<text  x="1077.00" y="383.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.04%)</title><rect x="1080.1" y="245" width="0.4" height="15.0" fill="rgb(221,26,8)" rx="2" ry="2" />
<text  x="1083.06" y="255.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.04%)</title><rect x="44.5" y="165" width="0.4" height="15.0" fill="rgb(215,109,43)" rx="2" ry="2" />
<text  x="47.47" y="175.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.04%)</title><rect x="1148.1" y="245" width="0.4" height="15.0" fill="rgb(228,19,9)" rx="2" ry="2" />
<text  x="1151.07" y="255.5" ></text>
</g>
<g >
<title>malloc (18 samples, 0.71%)</title><rect x="1150.4" y="437" width="8.4" height="15.0" fill="rgb(221,27,24)" rx="2" ry="2" />
<text  x="1153.40" y="447.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.04%)</title><rect x="1149.0" y="357" width="0.5" height="15.0" fill="rgb(230,157,7)" rx="2" ry="2" />
<text  x="1152.01" y="367.5" ></text>
</g>
<g >
<title>_dl_relocate_object (1 samples, 0.04%)</title><rect x="59.8" y="389" width="0.5" height="15.0" fill="rgb(242,7,44)" rx="2" ry="2" />
<text  x="62.85" y="399.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_filebuf (1 samples, 0.04%)</title><rect x="85.0" y="421" width="0.5" height="15.0" fill="rgb(210,147,24)" rx="2" ry="2" />
<text  x="88.00" y="431.5" ></text>
</g>
<g >
<title>queue_work_on (2 samples, 0.08%)</title><rect x="43.5" y="213" width="1.0" height="15.0" fill="rgb(239,222,23)" rx="2" ry="2" />
<text  x="46.54" y="223.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.04%)</title><rect x="1149.9" y="325" width="0.5" height="15.0" fill="rgb(241,46,45)" rx="2" ry="2" />
<text  x="1152.94" y="335.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="69.6" y="405" width="0.5" height="15.0" fill="rgb(236,53,39)" rx="2" ry="2" />
<text  x="72.63" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.04%)</title><rect x="64.5" y="389" width="0.5" height="15.0" fill="rgb(226,129,25)" rx="2" ry="2" />
<text  x="67.50" y="399.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.04%)</title><rect x="1122.9" y="341" width="0.5" height="15.0" fill="rgb(245,159,37)" rx="2" ry="2" />
<text  x="1125.92" y="351.5" ></text>
</g>
<g >
<title>sysvec_irq_work (4 samples, 0.16%)</title><rect x="1078.2" y="261" width="1.9" height="15.0" fill="rgb(241,144,47)" rx="2" ry="2" />
<text  x="1081.20" y="271.5" ></text>
</g>
<g >
<title>get_page_from_freelist (3 samples, 0.12%)</title><rect x="1160.2" y="293" width="1.4" height="15.0" fill="rgb(219,205,43)" rx="2" ry="2" />
<text  x="1163.19" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (6 samples, 0.24%)</title><rect x="1159.3" y="373" width="2.7" height="15.0" fill="rgb(205,118,6)" rx="2" ry="2" />
<text  x="1162.25" y="383.5" ></text>
</g>
<g >
<title>psi_flags_change (1 samples, 0.04%)</title><rect x="1078.7" y="53" width="0.4" height="15.0" fill="rgb(215,120,7)" rx="2" ry="2" />
<text  x="1081.66" y="63.5" ></text>
</g>
<g >
<title>[unknown] (214 samples, 8.45%)</title><rect x="18.4" y="437" width="99.7" height="15.0" fill="rgb(211,112,21)" rx="2" ry="2" />
<text  x="21.39" y="447.5" >[unknown]</text>
</g>
<g >
<title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="1080.1" y="277" width="0.4" height="15.0" fill="rgb(249,135,34)" rx="2" ry="2" />
<text  x="1083.06" y="287.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.04%)</title><rect x="1149.0" y="389" width="0.5" height="15.0" fill="rgb(215,150,47)" rx="2" ry="2" />
<text  x="1152.01" y="399.5" ></text>
</g>
<g >
<title>mem_cgroup_from_task (1 samples, 0.04%)</title><rect x="1162.0" y="373" width="0.5" height="15.0" fill="rgb(224,9,36)" rx="2" ry="2" />
<text  x="1165.05" y="383.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.08%)</title><rect x="1076.3" y="293" width="1.0" height="15.0" fill="rgb(214,71,10)" rx="2" ry="2" />
<text  x="1079.33" y="303.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.04%)</title><rect x="1149.9" y="373" width="0.5" height="15.0" fill="rgb(242,166,24)" rx="2" ry="2" />
<text  x="1152.94" y="383.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.04%)</title><rect x="1149.9" y="277" width="0.5" height="15.0" fill="rgb(221,212,34)" rx="2" ry="2" />
<text  x="1152.94" y="287.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.04%)</title><rect x="1149.9" y="341" width="0.5" height="15.0" fill="rgb(216,134,5)" rx="2" ry="2" />
<text  x="1152.94" y="351.5" ></text>
</g>
<g >
<title>dl_main (2 samples, 0.08%)</title><rect x="59.4" y="405" width="0.9" height="15.0" fill="rgb(215,52,39)" rx="2" ry="2" />
<text  x="62.38" y="415.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.04%)</title><rect x="1148.1" y="325" width="0.4" height="15.0" fill="rgb(239,102,22)" rx="2" ry="2" />
<text  x="1151.07" y="335.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (15 samples, 0.59%)</title><rect x="1074.0" y="357" width="7.0" height="15.0" fill="rgb(209,92,18)" rx="2" ry="2" />
<text  x="1077.00" y="367.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_clone (9 samples, 0.36%)</title><rect x="102.7" y="421" width="4.2" height="15.0" fill="rgb(209,200,0)" rx="2" ry="2" />
<text  x="105.70" y="431.5" ></text>
</g>
<g >
<title>do_user_addr_fault (7 samples, 0.28%)</title><rect x="1159.3" y="389" width="3.2" height="15.0" fill="rgb(233,229,25)" rx="2" ry="2" />
<text  x="1162.25" y="399.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (49 samples, 1.93%)</title><rect x="20.2" y="421" width="22.9" height="15.0" fill="rgb(229,39,29)" rx="2" ry="2" />
<text  x="23.25" y="431.5" >_..</text>
</g>
<g >
<title>__munmap (1 samples, 0.04%)</title><rect x="1148.1" y="405" width="0.4" height="15.0" fill="rgb(212,64,29)" rx="2" ry="2" />
<text  x="1151.07" y="415.5" ></text>
</g>
<g >
<title>_int_free (12 samples, 0.47%)</title><rect x="1105.7" y="341" width="5.6" height="15.0" fill="rgb(253,211,1)" rx="2" ry="2" />
<text  x="1108.68" y="351.5" ></text>
</g>
<g >
<title>vfs_write (4 samples, 0.16%)</title><rect x="43.1" y="341" width="1.8" height="15.0" fill="rgb(228,158,19)" rx="2" ry="2" />
<text  x="46.08" y="351.5" ></text>
</g>
<g >
<title>__libc_start_main (2,170 samples, 85.67%)</title><rect x="137.6" y="437" width="1010.9" height="15.0" fill="rgb(250,14,46)" rx="2" ry="2" />
<text  x="140.64" y="447.5" >__libc_start_main</text>
</g>
<g >
<title>wake_up_process (1 samples, 0.04%)</title><rect x="44.5" y="181" width="0.4" height="15.0" fill="rgb(232,161,43)" rx="2" ry="2" />
<text  x="47.47" y="191.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (2 samples, 0.08%)</title><rect x="43.5" y="133" width="1.0" height="15.0" fill="rgb(250,58,48)" rx="2" ry="2" />
<text  x="46.54" y="143.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (51 samples, 2.01%)</title><rect x="1162.5" y="437" width="23.8" height="15.0" fill="rgb(223,65,52)" rx="2" ry="2" />
<text  x="1165.51" y="447.5" >s..</text>
</g>
<g >
<title>ttwu_do_wakeup (1 samples, 0.04%)</title><rect x="1079.1" y="69" width="0.5" height="15.0" fill="rgb(236,47,0)" rx="2" ry="2" />
<text  x="1082.13" y="79.5" ></text>
</g>
<g >
<title>ttwu_do_activate (2 samples, 0.08%)</title><rect x="1078.7" y="85" width="0.9" height="15.0" fill="rgb(237,210,30)" rx="2" ry="2" />
<text  x="1081.66" y="95.5" ></text>
</g>
<g >
<title>irq_exit_rcu (8 samples, 0.32%)</title><rect x="1077.3" y="341" width="3.7" height="15.0" fill="rgb(228,2,32)" rx="2" ry="2" />
<text  x="1080.26" y="351.5" ></text>
</g>
<g >
<title>irq_work_single (4 samples, 0.16%)</title><rect x="1078.2" y="197" width="1.9" height="15.0" fill="rgb(217,34,21)" rx="2" ry="2" />
<text  x="1081.20" y="207.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (3 samples, 0.12%)</title><rect x="1139.7" y="357" width="1.4" height="15.0" fill="rgb(247,2,47)" rx="2" ry="2" />
<text  x="1142.69" y="367.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (2 samples, 0.08%)</title><rect x="70.6" y="277" width="0.9" height="15.0" fill="rgb(239,123,10)" rx="2" ry="2" />
<text  x="73.56" y="287.5" ></text>
</g>
<g >
<title>dbs_update_util_handler (1 samples, 0.04%)</title><rect x="1075.9" y="197" width="0.4" height="15.0" fill="rgb(230,52,25)" rx="2" ry="2" />
<text  x="1078.87" y="207.5" ></text>
</g>
<g >
<title>check_preempt_wakeup (1 samples, 0.04%)</title><rect x="1079.1" y="37" width="0.5" height="15.0" fill="rgb(251,104,32)" rx="2" ry="2" />
<text  x="1082.13" y="47.5" ></text>
</g>
<g >
<title>__irq_work_queue_local (1 samples, 0.04%)</title><rect x="1075.9" y="165" width="0.4" height="15.0" fill="rgb(254,154,50)" rx="2" ry="2" />
<text  x="1078.87" y="175.5" ></text>
</g>
<g >
<title>__schedule (2 samples, 0.08%)</title><rect x="1076.3" y="277" width="1.0" height="15.0" fill="rgb(254,113,19)" rx="2" ry="2" />
<text  x="1079.33" y="287.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.04%)</title><rect x="1148.1" y="293" width="0.4" height="15.0" fill="rgb(221,156,47)" rx="2" ry="2" />
<text  x="1151.07" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_read (3 samples, 0.12%)</title><rect x="70.1" y="373" width="1.4" height="15.0" fill="rgb(237,118,25)" rx="2" ry="2" />
<text  x="73.09" y="383.5" ></text>
</g>
<g >
<title>_dl_start_user (1 samples, 0.04%)</title><rect x="1149.0" y="437" width="0.5" height="15.0" fill="rgb(217,154,38)" rx="2" ry="2" />
<text  x="1152.01" y="447.5" ></text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.04%)</title><rect x="64.5" y="341" width="0.5" height="15.0" fill="rgb(243,29,5)" rx="2" ry="2" />
<text  x="67.50" y="351.5" ></text>
</g>
<g >
<title>generic_file_read_iter (2 samples, 0.08%)</title><rect x="70.6" y="293" width="0.9" height="15.0" fill="rgb(249,17,39)" rx="2" ry="2" />
<text  x="73.56" y="303.5" ></text>
</g>
<g >
<title>insert_work (3 samples, 0.12%)</title><rect x="1078.2" y="133" width="1.4" height="15.0" fill="rgb(217,185,20)" rx="2" ry="2" />
<text  x="1081.20" y="143.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.04%)</title><rect x="1148.1" y="261" width="0.4" height="15.0" fill="rgb(229,122,47)" rx="2" ry="2" />
<text  x="1151.07" y="271.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (16 samples, 0.63%)</title><rect x="77.5" y="421" width="7.5" height="15.0" fill="rgb(235,222,18)" rx="2" ry="2" />
<text  x="80.55" y="431.5" ></text>
</g>
<g >
<title>cgroup_throttle_swaprate (1 samples, 0.04%)</title><rect x="1161.6" y="325" width="0.4" height="15.0" fill="rgb(228,117,18)" rx="2" ry="2" />
<text  x="1164.58" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_write (4 samples, 0.16%)</title><rect x="43.1" y="421" width="1.8" height="15.0" fill="rgb(246,183,1)" rx="2" ry="2" />
<text  x="46.08" y="431.5" ></text>
</g>
<g >
<title>arch_pick_mmap_layout (1 samples, 0.04%)</title><rect x="64.5" y="309" width="0.5" height="15.0" fill="rgb(241,32,39)" rx="2" ry="2" />
<text  x="67.50" y="319.5" ></text>
</g>
<g >
<title>pty_write (2 samples, 0.08%)</title><rect x="43.5" y="245" width="1.0" height="15.0" fill="rgb(252,10,25)" rx="2" ry="2" />
<text  x="46.54" y="255.5" ></text>
</g>
<g >
<title>pty_write (1 samples, 0.04%)</title><rect x="44.5" y="261" width="0.4" height="15.0" fill="rgb(218,139,8)" rx="2" ry="2" />
<text  x="47.47" y="271.5" ></text>
</g>
</g>
</svg>
