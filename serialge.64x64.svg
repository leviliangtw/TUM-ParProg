<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>_dl_start (1 samples, 8.33%)</title><rect x="796.7" y="197" width="98.3" height="15.0" fill="rgb(221,112,19)" rx="2" ry="2" />
<text  x="799.67" y="207.5" >_dl_start</text>
</g>
<g >
<title>mmput (1 samples, 8.33%)</title><rect x="895.0" y="133" width="98.3" height="15.0" fill="rgb(211,164,33)" rx="2" ry="2" />
<text  x="898.00" y="143.5" >mmput</text>
</g>
<g >
<title>do_fault (1 samples, 8.33%)</title><rect x="206.7" y="69" width="98.3" height="15.0" fill="rgb(205,28,33)" rx="2" ry="2" />
<text  x="209.67" y="79.5" >do_fault</text>
</g>
<g >
<title>setup_arg_pages (1 samples, 8.33%)</title><rect x="305.0" y="101" width="98.3" height="15.0" fill="rgb(243,176,49)" rx="2" ry="2" />
<text  x="308.00" y="111.5" >setup_arg_p..</text>
</g>
<g >
<title>exec_binprm (1 samples, 8.33%)</title><rect x="305.0" y="133" width="98.3" height="15.0" fill="rgb(230,179,30)" rx="2" ry="2" />
<text  x="308.00" y="143.5" >exec_binprm</text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 8.33%)</title><rect x="305.0" y="165" width="98.3" height="15.0" fill="rgb(251,160,23)" rx="2" ry="2" />
<text  x="308.00" y="175.5" >__x64_sys_e..</text>
</g>
<g >
<title>change_protection (1 samples, 8.33%)</title><rect x="305.0" y="69" width="98.3" height="15.0" fill="rgb(249,102,9)" rx="2" ry="2" />
<text  x="308.00" y="79.5" >change_prot..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 8.33%)</title><rect x="305.0" y="181" width="98.3" height="15.0" fill="rgb(237,21,36)" rx="2" ry="2" />
<text  x="308.00" y="191.5" >do_syscall_64</text>
</g>
<g >
<title>Utility::InitializeArray (2 samples, 16.67%)</title><rect x="600.0" y="165" width="196.7" height="15.0" fill="rgb(214,21,48)" rx="2" ry="2" />
<text  x="603.00" y="175.5" >Utility::InitializeArray</text>
</g>
<g >
<title>Serial::ForwardElimination (1 samples, 8.33%)</title><rect x="501.7" y="165" width="98.3" height="15.0" fill="rgb(237,95,8)" rx="2" ry="2" />
<text  x="504.67" y="175.5" >Serial::For..</text>
</g>
<g >
<title>Serial::SerialSolve (3 samples, 25.00%)</title><rect x="501.7" y="181" width="295.0" height="15.0" fill="rgb(217,80,37)" rx="2" ry="2" />
<text  x="504.67" y="191.5" >Serial::SerialSolve</text>
</g>
<g >
<title>__GI___printf_fp_l (1 samples, 8.33%)</title><rect x="10.0" y="165" width="98.3" height="15.0" fill="rgb(220,191,9)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >__GI___prin..</text>
</g>
<g >
<title>mprotect_fixup (1 samples, 8.33%)</title><rect x="305.0" y="85" width="98.3" height="15.0" fill="rgb(244,227,36)" rx="2" ry="2" />
<text  x="308.00" y="95.5" >mprotect_fi..</text>
</g>
<g >
<title>pmd_devmap_trans_unstable (1 samples, 8.33%)</title><rect x="796.7" y="117" width="98.3" height="15.0" fill="rgb(240,156,44)" rx="2" ry="2" />
<text  x="799.67" y="127.5" >pmd_devmap_..</text>
</g>
<g >
<title>load_elf_binary (1 samples, 8.33%)</title><rect x="305.0" y="117" width="98.3" height="15.0" fill="rgb(233,1,38)" rx="2" ry="2" />
<text  x="308.00" y="127.5" >load_elf_bi..</text>
</g>
<g >
<title>exit_mmap (1 samples, 8.33%)</title><rect x="895.0" y="117" width="98.3" height="15.0" fill="rgb(218,29,7)" rx="2" ry="2" />
<text  x="898.00" y="127.5" >exit_mmap</text>
</g>
<g >
<title>__vsnprintf_internal (1 samples, 8.33%)</title><rect x="10.0" y="197" width="98.3" height="15.0" fill="rgb(216,11,20)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >__vsnprintf..</text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 8.33%)</title><rect x="206.7" y="149" width="98.3" height="15.0" fill="rgb(215,17,3)" rx="2" ry="2" />
<text  x="209.67" y="159.5" >asm_exc_pag..</text>
</g>
<g >
<title>unmap_single_vma (1 samples, 8.33%)</title><rect x="895.0" y="85" width="98.3" height="15.0" fill="rgb(217,217,16)" rx="2" ry="2" />
<text  x="898.00" y="95.5" >unmap_singl..</text>
</g>
<g >
<title>__libc_start_main (3 samples, 25.00%)</title><rect x="501.7" y="213" width="295.0" height="15.0" fill="rgb(214,205,39)" rx="2" ry="2" />
<text  x="504.67" y="223.5" >__libc_start_main</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 8.33%)</title><rect x="206.7" y="101" width="98.3" height="15.0" fill="rgb(244,22,6)" rx="2" ry="2" />
<text  x="209.67" y="111.5" >handle_mm_f..</text>
</g>
<g >
<title>ReadLine (2 samples, 16.67%)</title><rect x="600.0" y="149" width="196.7" height="15.0" fill="rgb(207,2,21)" rx="2" ry="2" />
<text  x="603.00" y="159.5" >ReadLine</text>
</g>
<g >
<title>all (12 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(241,219,54)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 8.33%)</title><rect x="895.0" y="69" width="98.3" height="15.0" fill="rgb(228,50,37)" rx="2" ry="2" />
<text  x="898.00" y="79.5" >unmap_page_..</text>
</g>
<g >
<title>_int_free (1 samples, 8.33%)</title><rect x="600.0" y="117" width="98.3" height="15.0" fill="rgb(232,81,21)" rx="2" ry="2" />
<text  x="603.00" y="127.5" >_int_free</text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (2 samples, 16.67%)</title><rect x="600.0" y="133" width="196.7" height="15.0" fill="rgb(230,35,9)" rx="2" ry="2" />
<text  x="603.00" y="143.5" >std::istream::_M_extract&lt;..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (1 samples, 8.33%)</title><rect x="993.3" y="197" width="98.4" height="15.0" fill="rgb(211,86,17)" rx="2" ry="2" />
<text  x="996.33" y="207.5" >_dl_lookup_..</text>
</g>
<g >
<title>operator delete (1 samples, 8.33%)</title><rect x="698.3" y="117" width="98.4" height="15.0" fill="rgb(232,71,0)" rx="2" ry="2" />
<text  x="701.33" y="127.5" >operator de..</text>
</g>
<g >
<title>change_pte_range (1 samples, 8.33%)</title><rect x="305.0" y="37" width="98.3" height="15.0" fill="rgb(212,152,3)" rx="2" ry="2" />
<text  x="308.00" y="47.5" >change_pte_..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_streambuf (1 samples, 8.33%)</title><rect x="993.3" y="213" width="98.4" height="15.0" fill="rgb(210,87,33)" rx="2" ry="2" />
<text  x="996.33" y="223.5" >std::basic_..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 8.33%)</title><rect x="796.7" y="165" width="98.3" height="15.0" fill="rgb(220,201,51)" rx="2" ry="2" />
<text  x="799.67" y="175.5" >exc_page_fa..</text>
</g>
<g >
<title>[unknown] (4 samples, 33.33%)</title><rect x="108.3" y="213" width="393.4" height="15.0" fill="rgb(247,47,53)" rx="2" ry="2" />
<text  x="111.33" y="223.5" >[unknown]</text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 8.33%)</title><rect x="10.0" y="181" width="98.3" height="15.0" fill="rgb(253,3,18)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >__vfprintf_..</text>
</g>
<g >
<title>unmap_vmas (1 samples, 8.33%)</title><rect x="895.0" y="101" width="98.3" height="15.0" fill="rgb(248,91,54)" rx="2" ry="2" />
<text  x="898.00" y="111.5" >unmap_vmas</text>
</g>
<g >
<title>_dl_sysdep_start (2 samples, 16.67%)</title><rect x="108.3" y="197" width="196.7" height="15.0" fill="rgb(239,27,35)" rx="2" ry="2" />
<text  x="111.33" y="207.5" >_dl_sysdep_start</text>
</g>
<g >
<title>main (3 samples, 25.00%)</title><rect x="501.7" y="197" width="295.0" height="15.0" fill="rgb(251,4,11)" rx="2" ry="2" />
<text  x="504.67" y="207.5" >main</text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 8.33%)</title><rect x="895.0" y="53" width="98.3" height="15.0" fill="rgb(230,121,20)" rx="2" ry="2" />
<text  x="898.00" y="63.5" >zap_pte_ran..</text>
</g>
<g >
<title>dl_main (2 samples, 16.67%)</title><rect x="108.3" y="181" width="196.7" height="15.0" fill="rgb(246,118,26)" rx="2" ry="2" />
<text  x="111.33" y="191.5" >dl_main</text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 8.33%)</title><rect x="796.7" y="181" width="98.3" height="15.0" fill="rgb(211,55,9)" rx="2" ry="2" />
<text  x="799.67" y="191.5" >asm_exc_pag..</text>
</g>
<g >
<title>change_p4d_range (1 samples, 8.33%)</title><rect x="305.0" y="53" width="98.3" height="15.0" fill="rgb(241,79,11)" rx="2" ry="2" />
<text  x="308.00" y="63.5" >change_p4d_..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 8.33%)</title><rect x="206.7" y="133" width="98.3" height="15.0" fill="rgb(207,189,52)" rx="2" ry="2" />
<text  x="209.67" y="143.5" >exc_page_fa..</text>
</g>
<g >
<title>do_exit (1 samples, 8.33%)</title><rect x="895.0" y="149" width="98.3" height="15.0" fill="rgb(229,199,30)" rx="2" ry="2" />
<text  x="898.00" y="159.5" >do_exit</text>
</g>
<g >
<title>__do_execve_file.isra.0 (1 samples, 8.33%)</title><rect x="305.0" y="149" width="98.3" height="15.0" fill="rgb(206,212,50)" rx="2" ry="2" />
<text  x="308.00" y="159.5" >__do_execve..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 8.33%)</title><rect x="305.0" y="197" width="98.3" height="15.0" fill="rgb(219,56,7)" rx="2" ry="2" />
<text  x="308.00" y="207.5" >entry_SYSCA..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 8.33%)</title><rect x="895.0" y="197" width="98.3" height="15.0" fill="rgb(223,149,19)" rx="2" ry="2" />
<text  x="898.00" y="207.5" >do_syscall_64</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 8.33%)</title><rect x="206.7" y="85" width="98.3" height="15.0" fill="rgb(242,200,41)" rx="2" ry="2" />
<text  x="209.67" y="95.5" >__handle_mm..</text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (1 samples, 8.33%)</title><rect x="1091.7" y="213" width="98.3" height="15.0" fill="rgb(223,181,53)" rx="2" ry="2" />
<text  x="1094.67" y="223.5" >std::num_ge..</text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 8.33%)</title><rect x="895.0" y="181" width="98.3" height="15.0" fill="rgb(237,82,14)" rx="2" ry="2" />
<text  x="898.00" y="191.5" >__x64_sys_e..</text>
</g>
<g >
<title>do_group_exit (1 samples, 8.33%)</title><rect x="895.0" y="165" width="98.3" height="15.0" fill="rgb(245,176,8)" rx="2" ry="2" />
<text  x="898.00" y="175.5" >do_group_exit</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 8.33%)</title><rect x="895.0" y="213" width="98.3" height="15.0" fill="rgb(240,121,17)" rx="2" ry="2" />
<text  x="898.00" y="223.5" >entry_SYSCA..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (1 samples, 8.33%)</title><rect x="108.3" y="165" width="98.4" height="15.0" fill="rgb(247,198,30)" rx="2" ry="2" />
<text  x="111.33" y="175.5" >_dl_lookup_..</text>
</g>
<g >
<title>serialge (12 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(254,80,20)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >serialge</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 8.33%)</title><rect x="796.7" y="133" width="98.3" height="15.0" fill="rgb(237,60,21)" rx="2" ry="2" />
<text  x="799.67" y="143.5" >handle_mm_f..</text>
</g>
<g >
<title>std::string::reserve (1 samples, 8.33%)</title><rect x="403.3" y="197" width="98.4" height="15.0" fill="rgb(240,205,7)" rx="2" ry="2" />
<text  x="406.33" y="207.5" >std::string..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 8.33%)</title><rect x="206.7" y="117" width="98.3" height="15.0" fill="rgb(224,138,32)" rx="2" ry="2" />
<text  x="209.67" y="127.5" >do_user_add..</text>
</g>
<g >
<title>filemap_map_pages (1 samples, 8.33%)</title><rect x="206.7" y="53" width="98.3" height="15.0" fill="rgb(236,79,15)" rx="2" ry="2" />
<text  x="209.67" y="63.5" >filemap_map..</text>
</g>
<g >
<title>_dl_start_user (1 samples, 8.33%)</title><rect x="796.7" y="213" width="98.3" height="15.0" fill="rgb(230,187,54)" rx="2" ry="2" />
<text  x="799.67" y="223.5" >_dl_start_u..</text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 8.33%)</title><rect x="10.0" y="213" width="98.3" height="15.0" fill="rgb(246,10,54)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >[libstdc++...</text>
</g>
<g >
<title>expf@@GLIBC_2.27 (1 samples, 8.33%)</title><rect x="206.7" y="165" width="98.3" height="15.0" fill="rgb(253,67,2)" rx="2" ry="2" />
<text  x="209.67" y="175.5" >expf@@GLIBC..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 8.33%)</title><rect x="796.7" y="149" width="98.3" height="15.0" fill="rgb(245,37,44)" rx="2" ry="2" />
<text  x="799.67" y="159.5" >do_user_add..</text>
</g>
</g>
</svg>
