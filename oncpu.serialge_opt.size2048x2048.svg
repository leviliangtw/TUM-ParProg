<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >On-CPU Time Flame Graph: $ ./serialge ./ge_data/size2048x2048 (Optimized)</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="86.9" y="325" width="0.1" height="15.0" fill="rgb(205,39,14)" rx="2" ry="2" />
<text  x="89.93" y="335.5" ></text>
</g>
<g >
<title>unmap_single_vma (4 samples, 0.04%)</title><rect x="1147.0" y="277" width="0.5" height="15.0" fill="rgb(249,178,25)" rx="2" ry="2" />
<text  x="1150.03" y="287.5" ></text>
</g>
<g >
<title>update_load_avg (7 samples, 0.06%)</title><rect x="1082.5" y="213" width="0.8" height="15.0" fill="rgb(241,29,34)" rx="2" ry="2" />
<text  x="1085.52" y="223.5" ></text>
</g>
<g >
<title>clockevents_program_event (1 samples, 0.01%)</title><rect x="1084.1" y="293" width="0.1" height="15.0" fill="rgb(237,78,27)" rx="2" ry="2" />
<text  x="1087.11" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="1146.0" y="373" width="0.1" height="15.0" fill="rgb(243,229,32)" rx="2" ry="2" />
<text  x="1148.97" y="383.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="111.8" y="373" width="0.1" height="15.0" fill="rgb(243,229,4)" rx="2" ry="2" />
<text  x="114.76" y="383.5" ></text>
</g>
<g >
<title>rcu_segcblist_ready_cbs (1 samples, 0.01%)</title><rect x="1080.9" y="245" width="0.1" height="15.0" fill="rgb(216,186,31)" rx="2" ry="2" />
<text  x="1083.92" y="255.5" ></text>
</g>
<g >
<title>new_sync_write (6 samples, 0.05%)</title><rect x="41.0" y="309" width="0.6" height="15.0" fill="rgb(223,168,47)" rx="2" ry="2" />
<text  x="43.98" y="319.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10 samples, 0.09%)</title><rect x="1084.7" y="293" width="1.1" height="15.0" fill="rgb(209,87,6)" rx="2" ry="2" />
<text  x="1087.74" y="303.5" ></text>
</g>
<g >
<title>ksys_read (8 samples, 0.07%)</title><rect x="60.2" y="341" width="0.8" height="15.0" fill="rgb(246,189,23)" rx="2" ry="2" />
<text  x="63.19" y="351.5" ></text>
</g>
<g >
<title>irq_exit_rcu (11 samples, 0.10%)</title><rect x="1084.7" y="341" width="1.2" height="15.0" fill="rgb(226,65,32)" rx="2" ry="2" />
<text  x="1087.74" y="351.5" ></text>
</g>
<g >
<title>dbs_irq_work (6 samples, 0.05%)</title><rect x="1085.0" y="181" width="0.6" height="15.0" fill="rgb(214,51,1)" rx="2" ry="2" />
<text  x="1087.96" y="191.5" ></text>
</g>
<g >
<title>__prepare_exit_to_usermode (4 samples, 0.04%)</title><rect x="1084.3" y="309" width="0.4" height="15.0" fill="rgb(228,10,49)" rx="2" ry="2" />
<text  x="1087.32" y="319.5" ></text>
</g>
<g >
<title>__queue_work (5 samples, 0.04%)</title><rect x="1085.1" y="149" width="0.5" height="15.0" fill="rgb(253,23,49)" rx="2" ry="2" />
<text  x="1088.06" y="159.5" ></text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.01%)</title><rect x="58.0" y="325" width="0.1" height="15.0" fill="rgb(205,17,5)" rx="2" ry="2" />
<text  x="60.96" y="335.5" ></text>
</g>
<g >
<title>__queue_work (2 samples, 0.02%)</title><rect x="41.3" y="197" width="0.2" height="15.0" fill="rgb(219,141,36)" rx="2" ry="2" />
<text  x="44.30" y="207.5" ></text>
</g>
<g >
<title>_dl_map_object (1 samples, 0.01%)</title><rect x="111.9" y="421" width="0.1" height="15.0" fill="rgb(249,76,27)" rx="2" ry="2" />
<text  x="114.86" y="431.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (41 samples, 0.37%)</title><rect x="1079.3" y="309" width="4.4" height="15.0" fill="rgb(246,89,28)" rx="2" ry="2" />
<text  x="1082.33" y="319.5" ></text>
</g>
<g >
<title>wake_up_process (2 samples, 0.02%)</title><rect x="41.3" y="165" width="0.2" height="15.0" fill="rgb(236,213,2)" rx="2" ry="2" />
<text  x="44.30" y="175.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.02%)</title><rect x="1084.5" y="293" width="0.2" height="15.0" fill="rgb(248,38,37)" rx="2" ry="2" />
<text  x="1087.53" y="303.5" ></text>
</g>
<g >
<title>_int_free (34 samples, 0.31%)</title><rect x="1107.0" y="341" width="3.6" height="15.0" fill="rgb(205,229,53)" rx="2" ry="2" />
<text  x="1110.03" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_write (7 samples, 0.06%)</title><rect x="40.9" y="357" width="0.7" height="15.0" fill="rgb(239,171,28)" rx="2" ry="2" />
<text  x="43.88" y="367.5" ></text>
</g>
<g >
<title>all (11,121 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(253,18,52)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>update_vsyscall (1 samples, 0.01%)</title><rect x="1080.2" y="213" width="0.1" height="15.0" fill="rgb(214,144,43)" rx="2" ry="2" />
<text  x="1083.18" y="223.5" ></text>
</g>
<g >
<title>ntp_tick_length (1 samples, 0.01%)</title><rect x="1079.8" y="229" width="0.1" height="15.0" fill="rgb(210,42,13)" rx="2" ry="2" />
<text  x="1082.76" y="239.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (6 samples, 0.05%)</title><rect x="41.0" y="277" width="0.6" height="15.0" fill="rgb(207,124,40)" rx="2" ry="2" />
<text  x="43.98" y="287.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (19 samples, 0.17%)</title><rect x="1162.9" y="293" width="2.1" height="15.0" fill="rgb(243,84,40)" rx="2" ry="2" />
<text  x="1165.94" y="303.5" ></text>
</g>
<g >
<title>serialge (11,121 samples, 100.00%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(245,161,5)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >serialge</text>
</g>
<g >
<title>hrtimer_active (3 samples, 0.03%)</title><rect x="1081.6" y="213" width="0.3" height="15.0" fill="rgb(225,177,30)" rx="2" ry="2" />
<text  x="1084.56" y="223.5" ></text>
</g>
<g >
<title>irq_work_run (6 samples, 0.05%)</title><rect x="1085.0" y="229" width="0.6" height="15.0" fill="rgb(223,199,52)" rx="2" ry="2" />
<text  x="1087.96" y="239.5" ></text>
</g>
<g >
<title>cpufreq_this_cpu_can_update (2 samples, 0.02%)</title><rect x="1082.9" y="181" width="0.3" height="15.0" fill="rgb(252,150,35)" rx="2" ry="2" />
<text  x="1085.94" y="191.5" ></text>
</g>
<g >
<title>copy_page_to_iter (6 samples, 0.05%)</title><rect x="60.3" y="245" width="0.6" height="15.0" fill="rgb(218,47,26)" rx="2" ry="2" />
<text  x="63.29" y="255.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.01%)</title><rect x="111.8" y="389" width="0.1" height="15.0" fill="rgb(237,79,43)" rx="2" ry="2" />
<text  x="114.76" y="399.5" ></text>
</g>
<g >
<title>get_page_from_freelist (17 samples, 0.15%)</title><rect x="1163.2" y="277" width="1.8" height="15.0" fill="rgb(237,219,28)" rx="2" ry="2" />
<text  x="1166.16" y="287.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_destroy (1 samples, 0.01%)</title><rect x="1141.0" y="341" width="0.1" height="15.0" fill="rgb(228,182,37)" rx="2" ry="2" />
<text  x="1143.98" y="351.5" ></text>
</g>
<g >
<title>cpuacct_account_field (4 samples, 0.04%)</title><rect x="1080.4" y="213" width="0.4" height="15.0" fill="rgb(232,64,21)" rx="2" ry="2" />
<text  x="1083.39" y="223.5" ></text>
</g>
<g >
<title>second_overflow (1 samples, 0.01%)</title><rect x="1080.0" y="213" width="0.1" height="15.0" fill="rgb(217,17,50)" rx="2" ry="2" />
<text  x="1082.97" y="223.5" ></text>
</g>
<g >
<title>timekeeping_advance (4 samples, 0.04%)</title><rect x="1079.9" y="229" width="0.4" height="15.0" fill="rgb(207,81,30)" rx="2" ry="2" />
<text  x="1082.86" y="239.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.01%)</title><rect x="86.9" y="277" width="0.1" height="15.0" fill="rgb(236,83,7)" rx="2" ry="2" />
<text  x="89.93" y="287.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64.part.0 (6 samples, 0.05%)</title><rect x="1079.7" y="261" width="0.6" height="15.0" fill="rgb(242,65,27)" rx="2" ry="2" />
<text  x="1082.65" y="271.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (502 samples, 4.51%)</title><rect x="1089.2" y="357" width="53.3" height="15.0" fill="rgb(245,109,43)" rx="2" ry="2" />
<text  x="1092.20" y="367.5" >std::..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.01%)</title><rect x="50.1" y="341" width="0.1" height="15.0" fill="rgb(236,134,5)" rx="2" ry="2" />
<text  x="53.11" y="351.5" ></text>
</g>
<g >
<title>amd_pmu_disable_all (1 samples, 0.01%)</title><rect x="1084.5" y="181" width="0.1" height="15.0" fill="rgb(245,164,9)" rx="2" ry="2" />
<text  x="1087.53" y="191.5" ></text>
</g>
<g >
<title>asm_sysvec_irq_work (6 samples, 0.05%)</title><rect x="1085.0" y="277" width="0.6" height="15.0" fill="rgb(215,91,28)" rx="2" ry="2" />
<text  x="1087.96" y="287.5" ></text>
</g>
<g >
<title>__vfprintf_internal (3 samples, 0.03%)</title><rect x="18.2" y="389" width="0.3" height="15.0" fill="rgb(250,207,31)" rx="2" ry="2" />
<text  x="21.17" y="399.5" ></text>
</g>
<g >
<title>asm_sysvec_irq_work (1 samples, 0.01%)</title><rect x="1085.8" y="293" width="0.1" height="15.0" fill="rgb(238,61,38)" rx="2" ry="2" />
<text  x="1088.80" y="303.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.01%)</title><rect x="1079.4" y="293" width="0.1" height="15.0" fill="rgb(248,109,44)" rx="2" ry="2" />
<text  x="1082.44" y="303.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="50.1" y="325" width="0.1" height="15.0" fill="rgb(214,129,46)" rx="2" ry="2" />
<text  x="53.11" y="335.5" ></text>
</g>
<g >
<title>free_unref_page_list (2 samples, 0.02%)</title><rect x="1146.7" y="229" width="0.2" height="15.0" fill="rgb(244,221,41)" rx="2" ry="2" />
<text  x="1149.71" y="239.5" ></text>
</g>
<g >
<title>page_remove_rmap (1 samples, 0.01%)</title><rect x="1147.3" y="229" width="0.2" height="15.0" fill="rgb(243,155,20)" rx="2" ry="2" />
<text  x="1150.35" y="239.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.01%)</title><rect x="111.5" y="421" width="0.1" height="15.0" fill="rgb(242,218,47)" rx="2" ry="2" />
<text  x="114.54" y="431.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (3 samples, 0.03%)</title><rect x="18.2" y="405" width="0.3" height="15.0" fill="rgb(249,111,22)" rx="2" ry="2" />
<text  x="21.17" y="415.5" ></text>
</g>
<g >
<title>dbs_update_util_handler (5 samples, 0.04%)</title><rect x="1082.7" y="197" width="0.6" height="15.0" fill="rgb(222,7,36)" rx="2" ry="2" />
<text  x="1085.73" y="207.5" ></text>
</g>
<g >
<title>wake_up_process (5 samples, 0.04%)</title><rect x="1085.1" y="117" width="0.5" height="15.0" fill="rgb(212,93,42)" rx="2" ry="2" />
<text  x="1088.06" y="127.5" ></text>
</g>
<g >
<title>enqueue_task_fair (3 samples, 0.03%)</title><rect x="1085.2" y="69" width="0.3" height="15.0" fill="rgb(219,80,44)" rx="2" ry="2" />
<text  x="1088.17" y="79.5" ></text>
</g>
<g >
<title>__update_load_avg_se (1 samples, 0.01%)</title><rect x="1082.5" y="197" width="0.1" height="15.0" fill="rgb(224,93,45)" rx="2" ry="2" />
<text  x="1085.52" y="207.5" ></text>
</g>
<g >
<title>insert_work (2 samples, 0.02%)</title><rect x="41.3" y="181" width="0.2" height="15.0" fill="rgb(208,94,33)" rx="2" ry="2" />
<text  x="44.30" y="191.5" ></text>
</g>
<g >
<title>filemap_map_pages (1 samples, 0.01%)</title><rect x="50.1" y="261" width="0.1" height="15.0" fill="rgb(234,164,40)" rx="2" ry="2" />
<text  x="53.11" y="271.5" ></text>
</g>
<g >
<title>__strtod_l (7 samples, 0.06%)</title><rect x="49.3" y="405" width="0.7" height="15.0" fill="rgb(241,70,43)" rx="2" ry="2" />
<text  x="52.26" y="415.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (5 samples, 0.04%)</title><rect x="1122.2" y="341" width="0.5" height="15.0" fill="rgb(218,28,19)" rx="2" ry="2" />
<text  x="1125.20" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.01%)</title><rect x="58.0" y="373" width="0.1" height="15.0" fill="rgb(235,39,23)" rx="2" ry="2" />
<text  x="60.96" y="383.5" ></text>
</g>
<g >
<title>kick_ilb (1 samples, 0.01%)</title><rect x="1083.5" y="213" width="0.1" height="15.0" fill="rgb(232,187,33)" rx="2" ry="2" />
<text  x="1086.47" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (1 samples, 0.01%)</title><rect x="1084.8" y="277" width="0.2" height="15.0" fill="rgb(205,194,40)" rx="2" ry="2" />
<text  x="1087.85" y="287.5" ></text>
</g>
<g >
<title>__sysvec_irq_work (6 samples, 0.05%)</title><rect x="1085.0" y="245" width="0.6" height="15.0" fill="rgb(240,78,22)" rx="2" ry="2" />
<text  x="1087.96" y="255.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="86.9" y="389" width="0.1" height="15.0" fill="rgb(212,153,32)" rx="2" ry="2" />
<text  x="89.93" y="399.5" ></text>
</g>
<g >
<title>[unknown] (744 samples, 6.69%)</title><rect x="18.5" y="421" width="78.9" height="15.0" fill="rgb(247,56,4)" rx="2" ry="2" />
<text  x="21.49" y="431.5" >[unknown]</text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (49 samples, 0.44%)</title><rect x="68.5" y="405" width="5.2" height="15.0" fill="rgb(233,142,44)" rx="2" ry="2" />
<text  x="71.46" y="415.5" ></text>
</g>
<g >
<title>malloc (16 samples, 0.14%)</title><rect x="58.1" y="405" width="1.7" height="15.0" fill="rgb(218,39,36)" rx="2" ry="2" />
<text  x="61.07" y="415.5" ></text>
</g>
<g >
<title>mem_cgroup_from_task (1 samples, 0.01%)</title><rect x="1165.2" y="341" width="0.1" height="15.0" fill="rgb(208,115,41)" rx="2" ry="2" />
<text  x="1168.17" y="351.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (14 samples, 0.13%)</title><rect x="1142.5" y="357" width="1.5" height="15.0" fill="rgb(213,143,37)" rx="2" ry="2" />
<text  x="1145.46" y="367.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_out (1 samples, 0.01%)</title><rect x="1084.5" y="261" width="0.1" height="15.0" fill="rgb(246,124,24)" rx="2" ry="2" />
<text  x="1087.53" y="271.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (4 samples, 0.04%)</title><rect x="1147.0" y="245" width="0.5" height="15.0" fill="rgb(244,156,46)" rx="2" ry="2" />
<text  x="1150.03" y="255.5" ></text>
</g>
<g >
<title>scheduler_tick (25 samples, 0.22%)</title><rect x="1081.0" y="245" width="2.7" height="15.0" fill="rgb(205,183,33)" rx="2" ry="2" />
<text  x="1084.03" y="255.5" ></text>
</g>
<g >
<title>do_user_addr_fault (23 samples, 0.21%)</title><rect x="1162.8" y="373" width="2.5" height="15.0" fill="rgb(209,12,36)" rx="2" ry="2" />
<text  x="1165.84" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_read (8 samples, 0.07%)</title><rect x="60.2" y="357" width="0.8" height="15.0" fill="rgb(234,136,38)" rx="2" ry="2" />
<text  x="63.19" y="367.5" ></text>
</g>
<g >
<title>perf_pmu_disable.part.0 (1 samples, 0.01%)</title><rect x="1084.5" y="213" width="0.1" height="15.0" fill="rgb(228,116,45)" rx="2" ry="2" />
<text  x="1087.53" y="223.5" ></text>
</g>
<g >
<title>Serial::ForwardElimination (9,174 samples, 82.49%)</title><rect x="112.8" y="389" width="973.4" height="15.0" fill="rgb(208,138,50)" rx="2" ry="2" />
<text  x="115.82" y="399.5" >Serial::ForwardElimination</text>
</g>
<g >
<title>tty_write (6 samples, 0.05%)</title><rect x="41.0" y="293" width="0.6" height="15.0" fill="rgb(252,140,23)" rx="2" ry="2" />
<text  x="43.98" y="303.5" ></text>
</g>
<g >
<title>generic_file_read_iter (8 samples, 0.07%)</title><rect x="60.2" y="277" width="0.8" height="15.0" fill="rgb(251,69,53)" rx="2" ry="2" />
<text  x="63.19" y="287.5" ></text>
</g>
<g >
<title>rcu_core (1 samples, 0.01%)</title><rect x="1085.6" y="261" width="0.1" height="15.0" fill="rgb(250,122,18)" rx="2" ry="2" />
<text  x="1088.59" y="271.5" ></text>
</g>
<g >
<title>alloc_pages_vma (19 samples, 0.17%)</title><rect x="1162.9" y="309" width="2.1" height="15.0" fill="rgb(239,168,53)" rx="2" ry="2" />
<text  x="1165.94" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.06%)</title><rect x="40.9" y="389" width="0.7" height="15.0" fill="rgb(212,126,11)" rx="2" ry="2" />
<text  x="43.88" y="399.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (4 samples, 0.04%)</title><rect x="1146.6" y="293" width="0.4" height="15.0" fill="rgb(232,63,24)" rx="2" ry="2" />
<text  x="1149.60" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (1 samples, 0.01%)</title><rect x="111.9" y="357" width="0.1" height="15.0" fill="rgb(235,194,47)" rx="2" ry="2" />
<text  x="114.86" y="367.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.0 (1 samples, 0.01%)</title><rect x="58.0" y="357" width="0.1" height="15.0" fill="rgb(228,55,8)" rx="2" ry="2" />
<text  x="60.96" y="367.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="1079.9" y="213" width="0.1" height="15.0" fill="rgb(215,165,51)" rx="2" ry="2" />
<text  x="1082.86" y="223.5" ></text>
</g>
<g >
<title>pick_next_task_fair (1 samples, 0.01%)</title><rect x="1084.6" y="261" width="0.1" height="15.0" fill="rgb(205,188,18)" rx="2" ry="2" />
<text  x="1087.64" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="111.8" y="421" width="0.1" height="15.0" fill="rgb(206,163,28)" rx="2" ry="2" />
<text  x="114.76" y="431.5" ></text>
</g>
<g >
<title>Serial::SerialSolve (9,751 samples, 87.68%)</title><rect x="112.0" y="405" width="1034.6" height="15.0" fill="rgb(230,167,42)" rx="2" ry="2" />
<text  x="114.97" y="415.5" >Serial::SerialSolve</text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.01%)</title><rect x="1085.7" y="277" width="0.1" height="15.0" fill="rgb(239,26,3)" rx="2" ry="2" />
<text  x="1088.70" y="287.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (68 samples, 0.61%)</title><rect x="1079.0" y="357" width="7.2" height="15.0" fill="rgb(251,169,31)" rx="2" ry="2" />
<text  x="1082.01" y="367.5" ></text>
</g>
<g >
<title>unmap_page_range (4 samples, 0.04%)</title><rect x="1147.0" y="261" width="0.5" height="15.0" fill="rgb(231,223,15)" rx="2" ry="2" />
<text  x="1150.03" y="271.5" ></text>
</g>
<g >
<title>std::locale::~locale (1 samples, 0.01%)</title><rect x="1146.5" y="373" width="0.1" height="15.0" fill="rgb(224,35,49)" rx="2" ry="2" />
<text  x="1149.50" y="383.5" ></text>
</g>
<g >
<title>x86_pmu_disable (3 samples, 0.03%)</title><rect x="1081.1" y="197" width="0.4" height="15.0" fill="rgb(230,193,54)" rx="2" ry="2" />
<text  x="1084.14" y="207.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (1 samples, 0.01%)</title><rect x="41.3" y="133" width="0.1" height="15.0" fill="rgb(244,142,33)" rx="2" ry="2" />
<text  x="44.30" y="143.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.01%)</title><rect x="41.2" y="229" width="0.1" height="15.0" fill="rgb(245,92,15)" rx="2" ry="2" />
<text  x="44.20" y="239.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (47 samples, 0.42%)</title><rect x="1079.3" y="325" width="5.0" height="15.0" fill="rgb(241,110,15)" rx="2" ry="2" />
<text  x="1082.33" y="335.5" ></text>
</g>
<g >
<title>__mpn_construct_double (12 samples, 0.11%)</title><rect x="41.6" y="405" width="1.3" height="15.0" fill="rgb(223,146,41)" rx="2" ry="2" />
<text  x="44.62" y="415.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.01%)</title><rect x="1084.2" y="309" width="0.1" height="15.0" fill="rgb(243,190,31)" rx="2" ry="2" />
<text  x="1087.21" y="319.5" ></text>
</g>
<g >
<title>task_tick_fair (17 samples, 0.15%)</title><rect x="1081.5" y="229" width="1.8" height="15.0" fill="rgb(251,0,20)" rx="2" ry="2" />
<text  x="1084.45" y="239.5" ></text>
</g>
<g >
<title>fsnotify_parent (1 samples, 0.01%)</title><rect x="40.9" y="309" width="0.1" height="15.0" fill="rgb(240,208,24)" rx="2" ry="2" />
<text  x="43.88" y="319.5" ></text>
</g>
<g >
<title>account_entity_enqueue (1 samples, 0.01%)</title><rect x="1085.4" y="37" width="0.1" height="15.0" fill="rgb(211,111,6)" rx="2" ry="2" />
<text  x="1088.38" y="47.5" ></text>
</g>
<g >
<title>enqueue_entity (1 samples, 0.01%)</title><rect x="1085.4" y="53" width="0.1" height="15.0" fill="rgb(208,190,33)" rx="2" ry="2" />
<text  x="1088.38" y="63.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (1 samples, 0.01%)</title><rect x="1083.5" y="181" width="0.1" height="15.0" fill="rgb(252,121,33)" rx="2" ry="2" />
<text  x="1086.47" y="191.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="73.6" y="389" width="0.1" height="15.0" fill="rgb(214,141,53)" rx="2" ry="2" />
<text  x="76.56" y="399.5" ></text>
</g>
<g >
<title>account_process_tick (5 samples, 0.04%)</title><rect x="1080.3" y="245" width="0.5" height="15.0" fill="rgb(254,131,43)" rx="2" ry="2" />
<text  x="1083.29" y="255.5" ></text>
</g>
<g >
<title>tick_sched_timer (39 samples, 0.35%)</title><rect x="1079.5" y="293" width="4.2" height="15.0" fill="rgb(211,131,26)" rx="2" ry="2" />
<text  x="1082.54" y="303.5" ></text>
</g>
<g >
<title>__correctly_grouped_prefixmb (8 samples, 0.07%)</title><rect x="110.7" y="421" width="0.8" height="15.0" fill="rgb(238,229,53)" rx="2" ry="2" />
<text  x="113.69" y="431.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="1165.1" y="293" width="0.1" height="15.0" fill="rgb(209,226,10)" rx="2" ry="2" />
<text  x="1168.07" y="303.5" ></text>
</g>
<g >
<title>tick_sched_handle.isra.0 (32 samples, 0.29%)</title><rect x="1080.3" y="277" width="3.4" height="15.0" fill="rgb(235,8,48)" rx="2" ry="2" />
<text  x="1083.29" y="287.5" ></text>
</g>
<g >
<title>cpuacct_charge (1 samples, 0.01%)</title><rect x="1082.4" y="197" width="0.1" height="15.0" fill="rgb(235,222,9)" rx="2" ry="2" />
<text  x="1085.41" y="207.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (2 samples, 0.02%)</title><rect x="50.0" y="405" width="0.2" height="15.0" fill="rgb(245,153,10)" rx="2" ry="2" />
<text  x="53.00" y="415.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (1 samples, 0.01%)</title><rect x="111.9" y="341" width="0.1" height="15.0" fill="rgb(241,93,54)" rx="2" ry="2" />
<text  x="114.86" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="50.1" y="309" width="0.1" height="15.0" fill="rgb(216,123,54)" rx="2" ry="2" />
<text  x="53.11" y="319.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (19 samples, 0.17%)</title><rect x="1144.0" y="357" width="2.0" height="15.0" fill="rgb(224,4,14)" rx="2" ry="2" />
<text  x="1146.95" y="367.5" ></text>
</g>
<g >
<title>timekeeping_update (1 samples, 0.01%)</title><rect x="1080.1" y="213" width="0.1" height="15.0" fill="rgb(243,52,13)" rx="2" ry="2" />
<text  x="1083.07" y="223.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.01%)</title><rect x="1146.8" y="197" width="0.1" height="15.0" fill="rgb(228,178,14)" rx="2" ry="2" />
<text  x="1149.82" y="207.5" ></text>
</g>
<g >
<title>__vm_munmap (8 samples, 0.07%)</title><rect x="1146.6" y="341" width="0.9" height="15.0" fill="rgb(222,172,52)" rx="2" ry="2" />
<text  x="1149.60" y="351.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.01%)</title><rect x="111.6" y="421" width="0.2" height="15.0" fill="rgb(245,161,22)" rx="2" ry="2" />
<text  x="114.65" y="431.5" ></text>
</g>
<g >
<title>do_anonymous_page (21 samples, 0.19%)</title><rect x="1162.9" y="325" width="2.3" height="15.0" fill="rgb(251,28,11)" rx="2" ry="2" />
<text  x="1165.94" y="335.5" ></text>
</g>
<g >
<title>lru_cache_add (1 samples, 0.01%)</title><rect x="111.8" y="293" width="0.1" height="15.0" fill="rgb(238,200,0)" rx="2" ry="2" />
<text  x="114.76" y="303.5" ></text>
</g>
<g >
<title>update_curr (6 samples, 0.05%)</title><rect x="1081.9" y="213" width="0.6" height="15.0" fill="rgb(238,154,5)" rx="2" ry="2" />
<text  x="1084.88" y="223.5" ></text>
</g>
<g >
<title>ktime_get_update_offsets_now (2 samples, 0.02%)</title><rect x="1083.7" y="309" width="0.2" height="15.0" fill="rgb(226,1,41)" rx="2" ry="2" />
<text  x="1086.68" y="319.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (125 samples, 1.12%)</title><rect x="73.8" y="405" width="13.2" height="15.0" fill="rgb(253,141,47)" rx="2" ry="2" />
<text  x="76.77" y="415.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.01%)</title><rect x="73.6" y="373" width="0.1" height="15.0" fill="rgb(239,81,44)" rx="2" ry="2" />
<text  x="76.56" y="383.5" ></text>
</g>
<g >
<title>amd_pmu_wait_on_overflow (1 samples, 0.01%)</title><rect x="1081.1" y="165" width="0.1" height="15.0" fill="rgb(252,14,54)" rx="2" ry="2" />
<text  x="1084.14" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_write (7 samples, 0.06%)</title><rect x="40.9" y="405" width="0.7" height="15.0" fill="rgb(223,91,48)" rx="2" ry="2" />
<text  x="43.88" y="415.5" ></text>
</g>
<g >
<title>trigger_load_balance (3 samples, 0.03%)</title><rect x="1083.3" y="229" width="0.3" height="15.0" fill="rgb(241,121,46)" rx="2" ry="2" />
<text  x="1086.26" y="239.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (1 samples, 0.01%)</title><rect x="111.8" y="277" width="0.1" height="15.0" fill="rgb(225,8,44)" rx="2" ry="2" />
<text  x="114.76" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (22 samples, 0.20%)</title><rect x="1162.8" y="341" width="2.4" height="15.0" fill="rgb(209,2,20)" rx="2" ry="2" />
<text  x="1165.84" y="351.5" ></text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.01%)</title><rect x="73.6" y="325" width="0.1" height="15.0" fill="rgb(241,90,34)" rx="2" ry="2" />
<text  x="76.56" y="335.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_clone (15 samples, 0.13%)</title><rect x="87.0" y="405" width="1.6" height="15.0" fill="rgb(214,163,53)" rx="2" ry="2" />
<text  x="90.03" y="415.5" ></text>
</g>
<g >
<title>__note_gp_changes (1 samples, 0.01%)</title><rect x="1085.6" y="245" width="0.1" height="15.0" fill="rgb(228,49,5)" rx="2" ry="2" />
<text  x="1088.59" y="255.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (8 samples, 0.07%)</title><rect x="60.2" y="261" width="0.8" height="15.0" fill="rgb(222,84,22)" rx="2" ry="2" />
<text  x="63.19" y="271.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.01%)</title><rect x="111.8" y="309" width="0.1" height="15.0" fill="rgb(215,216,15)" rx="2" ry="2" />
<text  x="114.76" y="319.5" ></text>
</g>
<g >
<title>main (9,759 samples, 87.75%)</title><rect x="112.0" y="421" width="1035.5" height="15.0" fill="rgb(239,140,39)" rx="2" ry="2" />
<text  x="114.97" y="431.5" >main</text>
</g>
<g >
<title>perf_event_task_tick (4 samples, 0.04%)</title><rect x="1081.0" y="229" width="0.5" height="15.0" fill="rgb(216,180,54)" rx="2" ry="2" />
<text  x="1084.03" y="239.5" ></text>
</g>
<g >
<title>mprotect_fixup (1 samples, 0.01%)</title><rect x="111.9" y="325" width="0.1" height="15.0" fill="rgb(212,82,15)" rx="2" ry="2" />
<text  x="114.86" y="335.5" ></text>
</g>
<g >
<title>native_apic_mem_read (1 samples, 0.01%)</title><rect x="1083.2" y="133" width="0.1" height="15.0" fill="rgb(232,6,36)" rx="2" ry="2" />
<text  x="1086.15" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="58.0" y="405" width="0.1" height="15.0" fill="rgb(210,109,54)" rx="2" ry="2" />
<text  x="60.96" y="415.5" ></text>
</g>
<g >
<title>perf_event_mmap (1 samples, 0.01%)</title><rect x="111.9" y="309" width="0.1" height="15.0" fill="rgb(227,140,50)" rx="2" ry="2" />
<text  x="114.86" y="319.5" ></text>
</g>
<g >
<title>rcu_core_si (1 samples, 0.01%)</title><rect x="1085.6" y="277" width="0.1" height="15.0" fill="rgb(235,213,17)" rx="2" ry="2" />
<text  x="1088.59" y="287.5" ></text>
</g>
<g >
<title>memset (1 samples, 0.01%)</title><rect x="111.9" y="293" width="0.1" height="15.0" fill="rgb(215,25,15)" rx="2" ry="2" />
<text  x="114.86" y="303.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.01%)</title><rect x="21.1" y="389" width="0.1" height="15.0" fill="rgb(240,63,43)" rx="2" ry="2" />
<text  x="24.14" y="399.5" ></text>
</g>
<g >
<title>wake_up_process (1 samples, 0.01%)</title><rect x="86.9" y="293" width="0.1" height="15.0" fill="rgb(242,188,27)" rx="2" ry="2" />
<text  x="89.93" y="303.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (7 samples, 0.06%)</title><rect x="1079.5" y="277" width="0.8" height="15.0" fill="rgb(226,96,10)" rx="2" ry="2" />
<text  x="1082.54" y="287.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="73.6" y="341" width="0.1" height="15.0" fill="rgb(246,150,27)" rx="2" ry="2" />
<text  x="76.56" y="351.5" ></text>
</g>
<g >
<title>std::string::_Rep::_S_create (13 samples, 0.12%)</title><rect x="88.6" y="405" width="1.4" height="15.0" fill="rgb(243,111,17)" rx="2" ry="2" />
<text  x="91.62" y="415.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (11 samples, 0.10%)</title><rect x="1084.7" y="309" width="1.2" height="15.0" fill="rgb(227,190,22)" rx="2" ry="2" />
<text  x="1087.74" y="319.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (23 samples, 0.21%)</title><rect x="95.0" y="405" width="2.4" height="15.0" fill="rgb(214,113,32)" rx="2" ry="2" />
<text  x="97.99" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (80 samples, 0.72%)</title><rect x="10.0" y="421" width="8.5" height="15.0" fill="rgb(214,99,24)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>idtentry_exit_cond_rcu (4 samples, 0.04%)</title><rect x="1084.3" y="341" width="0.4" height="15.0" fill="rgb(228,27,50)" rx="2" ry="2" />
<text  x="1087.32" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (25 samples, 0.22%)</title><rect x="18.5" y="405" width="2.6" height="15.0" fill="rgb(219,106,7)" rx="2" ry="2" />
<text  x="21.49" y="415.5" ></text>
</g>
<g >
<title>psi_task_change (1 samples, 0.01%)</title><rect x="1085.5" y="69" width="0.1" height="15.0" fill="rgb(244,110,43)" rx="2" ry="2" />
<text  x="1088.49" y="79.5" ></text>
</g>
<g >
<title>native_write_msr (2 samples, 0.02%)</title><rect x="1081.2" y="165" width="0.3" height="15.0" fill="rgb(208,146,4)" rx="2" ry="2" />
<text  x="1084.24" y="175.5" ></text>
</g>
<g >
<title>malloc (144 samples, 1.29%)</title><rect x="1147.5" y="421" width="15.2" height="15.0" fill="rgb(221,222,10)" rx="2" ry="2" />
<text  x="1150.45" y="431.5" ></text>
</g>
<g >
<title>ksys_write (7 samples, 0.06%)</title><rect x="40.9" y="341" width="0.7" height="15.0" fill="rgb(245,189,19)" rx="2" ry="2" />
<text  x="43.88" y="351.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (1 samples, 0.01%)</title><rect x="41.3" y="117" width="0.1" height="15.0" fill="rgb(220,198,34)" rx="2" ry="2" />
<text  x="44.30" y="127.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (4 samples, 0.04%)</title><rect x="1146.6" y="277" width="0.4" height="15.0" fill="rgb(218,12,2)" rx="2" ry="2" />
<text  x="1149.60" y="287.5" ></text>
</g>
<g >
<title>update_rq_clock (1 samples, 0.01%)</title><rect x="1083.6" y="229" width="0.1" height="15.0" fill="rgb(242,160,44)" rx="2" ry="2" />
<text  x="1086.58" y="239.5" ></text>
</g>
<g >
<title>__mpn_lshift (10 samples, 0.09%)</title><rect x="42.9" y="405" width="1.1" height="15.0" fill="rgb(205,82,50)" rx="2" ry="2" />
<text  x="45.89" y="415.5" ></text>
</g>
<g >
<title>task_ctx_sched_out (1 samples, 0.01%)</title><rect x="1084.5" y="245" width="0.1" height="15.0" fill="rgb(210,37,47)" rx="2" ry="2" />
<text  x="1087.53" y="255.5" ></text>
</g>
<g >
<title>vfs_read (8 samples, 0.07%)</title><rect x="60.2" y="325" width="0.8" height="15.0" fill="rgb(250,71,25)" rx="2" ry="2" />
<text  x="63.19" y="335.5" ></text>
</g>
<g >
<title>n_tty_write (5 samples, 0.04%)</title><rect x="41.0" y="261" width="0.5" height="15.0" fill="rgb(230,17,37)" rx="2" ry="2" />
<text  x="43.98" y="271.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.01%)</title><rect x="50.1" y="277" width="0.1" height="15.0" fill="rgb(229,127,24)" rx="2" ry="2" />
<text  x="53.11" y="287.5" ></text>
</g>
<g >
<title>shift_arg_pages (1 samples, 0.01%)</title><rect x="58.0" y="293" width="0.1" height="15.0" fill="rgb(233,146,41)" rx="2" ry="2" />
<text  x="60.96" y="303.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.28%)</title><rect x="1118.9" y="341" width="3.3" height="15.0" fill="rgb(241,207,22)" rx="2" ry="2" />
<text  x="1121.91" y="351.5" ></text>
</g>
<g >
<title>read (9 samples, 0.08%)</title><rect x="60.2" y="405" width="0.9" height="15.0" fill="rgb(242,111,53)" rx="2" ry="2" />
<text  x="63.19" y="415.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (125 samples, 1.12%)</title><rect x="97.4" y="421" width="13.3" height="15.0" fill="rgb(233,196,15)" rx="2" ry="2" />
<text  x="100.43" y="431.5" ></text>
</g>
<g >
<title>vfs_write (7 samples, 0.06%)</title><rect x="40.9" y="325" width="0.7" height="15.0" fill="rgb(234,160,43)" rx="2" ry="2" />
<text  x="43.88" y="335.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (50 samples, 0.45%)</title><rect x="1079.0" y="341" width="5.3" height="15.0" fill="rgb(254,61,7)" rx="2" ry="2" />
<text  x="1082.01" y="351.5" ></text>
</g>
<g >
<title>enqueue_hrtimer (1 samples, 0.01%)</title><rect x="1079.3" y="293" width="0.1" height="15.0" fill="rgb(231,30,4)" rx="2" ry="2" />
<text  x="1082.33" y="303.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="86.9" y="341" width="0.1" height="15.0" fill="rgb(242,2,22)" rx="2" ry="2" />
<text  x="89.93" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (23 samples, 0.21%)</title><rect x="1162.8" y="357" width="2.5" height="15.0" fill="rgb(218,83,34)" rx="2" ry="2" />
<text  x="1165.84" y="367.5" ></text>
</g>
<g >
<title>error_entry (1 samples, 0.01%)</title><rect x="61.0" y="389" width="0.1" height="15.0" fill="rgb(254,196,44)" rx="2" ry="2" />
<text  x="64.04" y="399.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (185 samples, 1.66%)</title><rect x="21.2" y="405" width="19.7" height="15.0" fill="rgb(209,101,14)" rx="2" ry="2" />
<text  x="24.25" y="415.5" ></text>
</g>
<g >
<title>pagecache_get_page (1 samples, 0.01%)</title><rect x="60.9" y="245" width="0.1" height="15.0" fill="rgb(210,177,28)" rx="2" ry="2" />
<text  x="63.93" y="255.5" ></text>
</g>
<g >
<title>ksoftirqd_running (2 samples, 0.02%)</title><rect x="1085.9" y="341" width="0.2" height="15.0" fill="rgb(241,115,5)" rx="2" ry="2" />
<text  x="1088.91" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="111.9" y="373" width="0.1" height="15.0" fill="rgb(205,197,27)" rx="2" ry="2" />
<text  x="114.86" y="383.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.01%)</title><rect x="1164.9" y="261" width="0.1" height="15.0" fill="rgb(243,108,20)" rx="2" ry="2" />
<text  x="1167.85" y="271.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="111.8" y="341" width="0.1" height="15.0" fill="rgb(205,62,8)" rx="2" ry="2" />
<text  x="114.76" y="351.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.02%)</title><rect x="41.3" y="149" width="0.2" height="15.0" fill="rgb(227,93,42)" rx="2" ry="2" />
<text  x="44.30" y="159.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.01%)</title><rect x="111.8" y="357" width="0.1" height="15.0" fill="rgb(240,77,19)" rx="2" ry="2" />
<text  x="114.76" y="367.5" ></text>
</g>
<g >
<title>irq_work_queue (1 samples, 0.01%)</title><rect x="1083.2" y="181" width="0.1" height="15.0" fill="rgb(240,56,0)" rx="2" ry="2" />
<text  x="1086.15" y="191.5" ></text>
</g>
<g >
<title>perf_pmu_disable.part.0 (3 samples, 0.03%)</title><rect x="1081.1" y="213" width="0.4" height="15.0" fill="rgb(219,32,45)" rx="2" ry="2" />
<text  x="1084.14" y="223.5" ></text>
</g>
<g >
<title>tty_write_room (1 samples, 0.01%)</title><rect x="41.5" y="261" width="0.1" height="15.0" fill="rgb(207,214,40)" rx="2" ry="2" />
<text  x="44.51" y="271.5" ></text>
</g>
<g >
<title>_int_free (73 samples, 0.66%)</title><rect x="50.2" y="405" width="7.8" height="15.0" fill="rgb(212,133,44)" rx="2" ry="2" />
<text  x="53.21" y="415.5" ></text>
</g>
<g >
<title>find_get_entry (1 samples, 0.01%)</title><rect x="60.9" y="229" width="0.1" height="15.0" fill="rgb(250,94,45)" rx="2" ry="2" />
<text  x="63.93" y="239.5" ></text>
</g>
<g >
<title>Utility::InitializeArray (569 samples, 5.12%)</title><rect x="1086.2" y="389" width="60.4" height="15.0" fill="rgb(209,228,18)" rx="2" ry="2" />
<text  x="1089.23" y="399.5" >Utilit..</text>
</g>
<g >
<title>insert_work (5 samples, 0.04%)</title><rect x="1085.1" y="133" width="0.5" height="15.0" fill="rgb(232,19,51)" rx="2" ry="2" />
<text  x="1088.06" y="143.5" ></text>
</g>
<g >
<title>dl_main (2 samples, 0.02%)</title><rect x="50.0" y="389" width="0.2" height="15.0" fill="rgb(235,40,54)" rx="2" ry="2" />
<text  x="53.00" y="399.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (37 samples, 0.33%)</title><rect x="1186.1" y="421" width="3.9" height="15.0" fill="rgb(244,17,50)" rx="2" ry="2" />
<text  x="1189.07" y="431.5" ></text>
</g>
<g >
<title>psi_flags_change (1 samples, 0.01%)</title><rect x="1085.5" y="53" width="0.1" height="15.0" fill="rgb(242,13,11)" rx="2" ry="2" />
<text  x="1088.49" y="63.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.01%)</title><rect x="1165.0" y="309" width="0.1" height="15.0" fill="rgb(212,153,51)" rx="2" ry="2" />
<text  x="1167.96" y="319.5" ></text>
</g>
<g >
<title>update_cfs_rq_h_load (1 samples, 0.01%)</title><rect x="41.4" y="133" width="0.1" height="15.0" fill="rgb(209,216,53)" rx="2" ry="2" />
<text  x="44.41" y="143.5" ></text>
</g>
<g >
<title>__vma_adjust (1 samples, 0.01%)</title><rect x="58.0" y="277" width="0.1" height="15.0" fill="rgb(230,104,7)" rx="2" ry="2" />
<text  x="60.96" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="50.1" y="293" width="0.1" height="15.0" fill="rgb(221,120,18)" rx="2" ry="2" />
<text  x="53.11" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 0.06%)</title><rect x="40.9" y="373" width="0.7" height="15.0" fill="rgb(230,195,42)" rx="2" ry="2" />
<text  x="43.88" y="383.5" ></text>
</g>
<g >
<title>clear_page_rep (15 samples, 0.13%)</title><rect x="1163.2" y="261" width="1.5" height="15.0" fill="rgb(205,31,52)" rx="2" ry="2" />
<text  x="1166.16" y="271.5" ></text>
</g>
<g >
<title>timerqueue_add (1 samples, 0.01%)</title><rect x="1079.3" y="277" width="0.1" height="15.0" fill="rgb(231,146,48)" rx="2" ry="2" />
<text  x="1082.33" y="287.5" ></text>
</g>
<g >
<title>mutex_lock (1 samples, 0.01%)</title><rect x="41.0" y="245" width="0.1" height="15.0" fill="rgb(221,25,4)" rx="2" ry="2" />
<text  x="43.98" y="255.5" ></text>
</g>
<g >
<title>setup_arg_pages (1 samples, 0.01%)</title><rect x="58.0" y="309" width="0.1" height="15.0" fill="rgb(215,99,53)" rx="2" ry="2" />
<text  x="60.96" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="111.9" y="389" width="0.1" height="15.0" fill="rgb(228,159,44)" rx="2" ry="2" />
<text  x="114.86" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.01%)</title><rect x="58.0" y="389" width="0.1" height="15.0" fill="rgb(219,106,50)" rx="2" ry="2" />
<text  x="60.96" y="399.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (1 samples, 0.01%)</title><rect x="1165.4" y="421" width="0.1" height="15.0" fill="rgb(211,69,49)" rx="2" ry="2" />
<text  x="1168.38" y="431.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="73.7" y="389" width="0.1" height="15.0" fill="rgb(209,171,44)" rx="2" ry="2" />
<text  x="76.66" y="399.5" ></text>
</g>
<g >
<title>update_process_times (32 samples, 0.29%)</title><rect x="1080.3" y="261" width="3.4" height="15.0" fill="rgb(225,214,0)" rx="2" ry="2" />
<text  x="1083.29" y="271.5" ></text>
</g>
<g >
<title>__memchr_avx2 (1 samples, 0.01%)</title><rect x="73.7" y="373" width="0.1" height="15.0" fill="rgb(233,119,54)" rx="2" ry="2" />
<text  x="76.66" y="383.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.01%)</title><rect x="1164.7" y="261" width="0.2" height="15.0" fill="rgb(214,153,28)" rx="2" ry="2" />
<text  x="1167.75" y="271.5" ></text>
</g>
<g >
<title>std::moneypunct&lt;wchar_t, false&gt;::_M_initialize_moneypunct (1 samples, 0.01%)</title><rect x="1165.5" y="421" width="0.1" height="15.0" fill="rgb(228,114,41)" rx="2" ry="2" />
<text  x="1168.49" y="431.5" ></text>
</g>
<g >
<title>sysvec_irq_work (6 samples, 0.05%)</title><rect x="1085.0" y="261" width="0.6" height="15.0" fill="rgb(211,52,50)" rx="2" ry="2" />
<text  x="1087.96" y="271.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (8 samples, 0.07%)</title><rect x="60.2" y="293" width="0.8" height="15.0" fill="rgb(233,182,26)" rx="2" ry="2" />
<text  x="63.19" y="303.5" ></text>
</g>
<g >
<title>hrtimer_wakeup (1 samples, 0.01%)</title><rect x="86.9" y="309" width="0.1" height="15.0" fill="rgb(252,115,42)" rx="2" ry="2" />
<text  x="89.93" y="319.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (70 samples, 0.63%)</title><rect x="1078.8" y="373" width="7.4" height="15.0" fill="rgb(244,178,49)" rx="2" ry="2" />
<text  x="1081.80" y="383.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="21.1" y="405" width="0.1" height="15.0" fill="rgb(252,10,34)" rx="2" ry="2" />
<text  x="24.14" y="415.5" ></text>
</g>
<g >
<title>calc_global_load (1 samples, 0.01%)</title><rect x="1079.7" y="245" width="0.1" height="15.0" fill="rgb(235,129,9)" rx="2" ry="2" />
<text  x="1082.65" y="255.5" ></text>
</g>
<g >
<title>tick_program_event (3 samples, 0.03%)</title><rect x="1083.9" y="309" width="0.3" height="15.0" fill="rgb(250,67,43)" rx="2" ry="2" />
<text  x="1086.89" y="319.5" ></text>
</g>
<g >
<title>queue_work_on (2 samples, 0.02%)</title><rect x="41.3" y="213" width="0.2" height="15.0" fill="rgb(221,205,30)" rx="2" ry="2" />
<text  x="44.30" y="223.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1086.1" y="341" width="0.1" height="15.0" fill="rgb(217,38,8)" rx="2" ry="2" />
<text  x="1089.12" y="351.5" ></text>
</g>
<g >
<title>copy_user_generic_string (6 samples, 0.05%)</title><rect x="60.3" y="229" width="0.6" height="15.0" fill="rgb(214,143,1)" rx="2" ry="2" />
<text  x="63.29" y="239.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (4 samples, 0.04%)</title><rect x="1146.6" y="261" width="0.4" height="15.0" fill="rgb(246,171,38)" rx="2" ry="2" />
<text  x="1149.60" y="271.5" ></text>
</g>
<g >
<title>native_write_msr (1 samples, 0.01%)</title><rect x="1084.5" y="165" width="0.1" height="15.0" fill="rgb(205,112,38)" rx="2" ry="2" />
<text  x="1087.53" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="86.9" y="261" width="0.1" height="15.0" fill="rgb(254,226,43)" rx="2" ry="2" />
<text  x="89.93" y="271.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (4 samples, 0.04%)</title><rect x="1084.3" y="325" width="0.4" height="15.0" fill="rgb(229,9,43)" rx="2" ry="2" />
<text  x="1087.32" y="335.5" ></text>
</g>
<g >
<title>round_and_return (69 samples, 0.62%)</title><rect x="61.1" y="405" width="7.4" height="15.0" fill="rgb(228,158,26)" rx="2" ry="2" />
<text  x="64.14" y="415.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (24 samples, 0.22%)</title><rect x="1162.7" y="421" width="2.6" height="15.0" fill="rgb(243,35,47)" rx="2" ry="2" />
<text  x="1165.73" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 0.07%)</title><rect x="60.2" y="373" width="0.8" height="15.0" fill="rgb(252,216,34)" rx="2" ry="2" />
<text  x="63.19" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_filebuf (1 samples, 0.01%)</title><rect x="73.7" y="405" width="0.1" height="15.0" fill="rgb(242,197,52)" rx="2" ry="2" />
<text  x="76.66" y="415.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="1079.5" y="261" width="0.2" height="15.0" fill="rgb(246,98,52)" rx="2" ry="2" />
<text  x="1082.54" y="271.5" ></text>
</g>
<g >
<title>exc_page_fault (24 samples, 0.22%)</title><rect x="1162.7" y="389" width="2.6" height="15.0" fill="rgb(252,134,13)" rx="2" ry="2" />
<text  x="1165.73" y="399.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="86.9" y="373" width="0.1" height="15.0" fill="rgb(251,22,27)" rx="2" ry="2" />
<text  x="89.93" y="383.5" ></text>
</g>
<g >
<title>exec_binprm (1 samples, 0.01%)</title><rect x="58.0" y="341" width="0.1" height="15.0" fill="rgb(221,148,27)" rx="2" ry="2" />
<text  x="60.96" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 0.07%)</title><rect x="1146.6" y="373" width="0.9" height="15.0" fill="rgb(220,209,45)" rx="2" ry="2" />
<text  x="1149.60" y="383.5" ></text>
</g>
<g >
<title>native_read_msr (1 samples, 0.01%)</title><rect x="1081.1" y="149" width="0.1" height="15.0" fill="rgb(240,34,54)" rx="2" ry="2" />
<text  x="1084.14" y="159.5" ></text>
</g>
<g >
<title>__schedule (2 samples, 0.02%)</title><rect x="1084.5" y="277" width="0.2" height="15.0" fill="rgb(241,95,33)" rx="2" ry="2" />
<text  x="1087.53" y="287.5" ></text>
</g>
<g >
<title>smp_call_function_single_async (1 samples, 0.01%)</title><rect x="1083.5" y="197" width="0.1" height="15.0" fill="rgb(226,151,40)" rx="2" ry="2" />
<text  x="1086.47" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.07%)</title><rect x="60.2" y="389" width="0.8" height="15.0" fill="rgb(237,120,6)" rx="2" ry="2" />
<text  x="63.19" y="399.5" ></text>
</g>
<g >
<title>__irq_work_queue_local (1 samples, 0.01%)</title><rect x="1083.2" y="165" width="0.1" height="15.0" fill="rgb(216,83,48)" rx="2" ry="2" />
<text  x="1086.15" y="175.5" ></text>
</g>
<g >
<title>__mpn_divrem (1 samples, 0.01%)</title><rect x="18.4" y="373" width="0.1" height="15.0" fill="rgb(229,58,44)" rx="2" ry="2" />
<text  x="21.38" y="383.5" ></text>
</g>
<g >
<title>_dl_relocate_object (2 samples, 0.02%)</title><rect x="50.0" y="373" width="0.2" height="15.0" fill="rgb(236,14,46)" rx="2" ry="2" />
<text  x="53.00" y="383.5" ></text>
</g>
<g >
<title>x86_pmu_disable (1 samples, 0.01%)</title><rect x="1084.5" y="197" width="0.1" height="15.0" fill="rgb(245,91,22)" rx="2" ry="2" />
<text  x="1087.53" y="207.5" ></text>
</g>
<g >
<title>__do_munmap (8 samples, 0.07%)</title><rect x="1146.6" y="325" width="0.9" height="15.0" fill="rgb(227,123,41)" rx="2" ry="2" />
<text  x="1149.60" y="335.5" ></text>
</g>
<g >
<title>pty_write (4 samples, 0.04%)</title><rect x="41.1" y="245" width="0.4" height="15.0" fill="rgb(207,67,9)" rx="2" ry="2" />
<text  x="44.09" y="255.5" ></text>
</g>
<g >
<title>queue_work_on (6 samples, 0.05%)</title><rect x="1085.0" y="165" width="0.6" height="15.0" fill="rgb(242,137,14)" rx="2" ry="2" />
<text  x="1087.96" y="175.5" ></text>
</g>
<g >
<title>release_pages (4 samples, 0.04%)</title><rect x="1146.6" y="245" width="0.4" height="15.0" fill="rgb(211,208,33)" rx="2" ry="2" />
<text  x="1149.60" y="255.5" ></text>
</g>
<g >
<title>cpufreq_this_cpu_can_update (1 samples, 0.01%)</title><rect x="1082.6" y="197" width="0.1" height="15.0" fill="rgb(242,83,36)" rx="2" ry="2" />
<text  x="1085.62" y="207.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (26 samples, 0.23%)</title><rect x="1127.2" y="341" width="2.7" height="15.0" fill="rgb(247,41,33)" rx="2" ry="2" />
<text  x="1130.19" y="351.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="73.6" y="357" width="0.1" height="15.0" fill="rgb(232,216,47)" rx="2" ry="2" />
<text  x="76.56" y="367.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (78 samples, 0.70%)</title><rect x="1110.6" y="341" width="8.3" height="15.0" fill="rgb(239,217,7)" rx="2" ry="2" />
<text  x="1113.63" y="351.5" ></text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.01%)</title><rect x="111.8" y="325" width="0.1" height="15.0" fill="rgb(226,80,13)" rx="2" ry="2" />
<text  x="114.76" y="335.5" ></text>
</g>
<g >
<title>rcu_sched_clock_irq (1 samples, 0.01%)</title><rect x="1080.8" y="245" width="0.1" height="15.0" fill="rgb(251,58,18)" rx="2" ry="2" />
<text  x="1083.82" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (1 samples, 0.01%)</title><rect x="1085.7" y="261" width="0.1" height="15.0" fill="rgb(237,216,30)" rx="2" ry="2" />
<text  x="1088.70" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (24 samples, 0.22%)</title><rect x="1162.7" y="405" width="2.6" height="15.0" fill="rgb(214,223,18)" rx="2" ry="2" />
<text  x="1165.73" y="415.5" ></text>
</g>
<g >
<title>irq_work_single (6 samples, 0.05%)</title><rect x="1085.0" y="197" width="0.6" height="15.0" fill="rgb(208,189,32)" rx="2" ry="2" />
<text  x="1087.96" y="207.5" ></text>
</g>
<g >
<title>irq_work_run_list (6 samples, 0.05%)</title><rect x="1085.0" y="213" width="0.6" height="15.0" fill="rgb(232,87,21)" rx="2" ry="2" />
<text  x="1087.96" y="223.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.01%)</title><rect x="1084.1" y="277" width="0.1" height="15.0" fill="rgb(251,88,28)" rx="2" ry="2" />
<text  x="1087.11" y="287.5" ></text>
</g>
<g >
<title>ReadLine (562 samples, 5.05%)</title><rect x="1086.3" y="373" width="59.7" height="15.0" fill="rgb(213,5,43)" rx="2" ry="2" />
<text  x="1089.33" y="383.5" >ReadLine</text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (35 samples, 0.31%)</title><rect x="1122.7" y="341" width="3.7" height="15.0" fill="rgb(252,105,24)" rx="2" ry="2" />
<text  x="1125.73" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.07%)</title><rect x="1146.6" y="389" width="0.9" height="15.0" fill="rgb(222,58,23)" rx="2" ry="2" />
<text  x="1149.60" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (8 samples, 0.07%)</title><rect x="1146.6" y="357" width="0.9" height="15.0" fill="rgb(233,212,41)" rx="2" ry="2" />
<text  x="1149.60" y="367.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.04%)</title><rect x="59.8" y="405" width="0.4" height="15.0" fill="rgb(239,213,26)" rx="2" ry="2" />
<text  x="62.76" y="415.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="86.9" y="357" width="0.1" height="15.0" fill="rgb(208,76,48)" rx="2" ry="2" />
<text  x="89.93" y="367.5" ></text>
</g>
<g >
<title>ttwu_do_activate (5 samples, 0.04%)</title><rect x="1085.1" y="85" width="0.5" height="15.0" fill="rgb(243,206,44)" rx="2" ry="2" />
<text  x="1088.06" y="95.5" ></text>
</g>
<g >
<title>tty_flip_buffer_push (2 samples, 0.02%)</title><rect x="41.3" y="229" width="0.2" height="15.0" fill="rgb(234,204,23)" rx="2" ry="2" />
<text  x="44.30" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 0.01%)</title><rect x="1089.1" y="357" width="0.1" height="15.0" fill="rgb(249,215,52)" rx="2" ry="2" />
<text  x="1092.09" y="367.5" ></text>
</g>
<g >
<title>__GI___printf_fp_l (1 samples, 0.01%)</title><rect x="18.3" y="373" width="0.1" height="15.0" fill="rgb(214,157,32)" rx="2" ry="2" />
<text  x="21.28" y="383.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (4 samples, 0.04%)</title><rect x="1146.1" y="373" width="0.4" height="15.0" fill="rgb(227,187,51)" rx="2" ry="2" />
<text  x="1149.07" y="383.5" ></text>
</g>
<g >
<title>free_unref_page_commit (2 samples, 0.02%)</title><rect x="1146.7" y="213" width="0.2" height="15.0" fill="rgb(207,54,38)" rx="2" ry="2" />
<text  x="1149.71" y="223.5" ></text>
</g>
<g >
<title>account_user_time (5 samples, 0.04%)</title><rect x="1080.3" y="229" width="0.5" height="15.0" fill="rgb(221,79,27)" rx="2" ry="2" />
<text  x="1083.29" y="239.5" ></text>
</g>
<g >
<title>new_sync_read (8 samples, 0.07%)</title><rect x="60.2" y="309" width="0.8" height="15.0" fill="rgb(222,97,53)" rx="2" ry="2" />
<text  x="63.19" y="319.5" ></text>
</g>
<g >
<title>std::string::reserve (47 samples, 0.42%)</title><rect x="90.0" y="405" width="5.0" height="15.0" fill="rgb(226,77,14)" rx="2" ry="2" />
<text  x="93.00" y="415.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (193 samples, 1.74%)</title><rect x="1165.6" y="421" width="20.5" height="15.0" fill="rgb(248,149,37)" rx="2" ry="2" />
<text  x="1168.60" y="431.5" ></text>
</g>
<g >
<title>mem_cgroup_charge (1 samples, 0.01%)</title><rect x="1165.1" y="309" width="0.1" height="15.0" fill="rgb(216,221,52)" rx="2" ry="2" />
<text  x="1168.07" y="319.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (11 samples, 0.10%)</title><rect x="1084.7" y="325" width="1.2" height="15.0" fill="rgb(217,187,41)" rx="2" ry="2" />
<text  x="1087.74" y="335.5" ></text>
</g>
<g >
<title>ctx_sched_out (1 samples, 0.01%)</title><rect x="1084.5" y="229" width="0.1" height="15.0" fill="rgb(208,87,24)" rx="2" ry="2" />
<text  x="1087.53" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (1 samples, 0.01%)</title><rect x="1165.3" y="421" width="0.1" height="15.0" fill="rgb(232,6,53)" rx="2" ry="2" />
<text  x="1168.28" y="431.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.01%)</title><rect x="111.9" y="405" width="0.1" height="15.0" fill="rgb(236,131,28)" rx="2" ry="2" />
<text  x="114.86" y="415.5" ></text>
</g>
<g >
<title>update_wall_time (5 samples, 0.04%)</title><rect x="1079.8" y="245" width="0.5" height="15.0" fill="rgb(227,208,49)" rx="2" ry="2" />
<text  x="1082.76" y="255.5" ></text>
</g>
<g >
<title>unmap_vmas (4 samples, 0.04%)</title><rect x="1147.0" y="293" width="0.5" height="15.0" fill="rgb(246,190,43)" rx="2" ry="2" />
<text  x="1150.03" y="303.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_list (1 samples, 0.01%)</title><rect x="1146.9" y="229" width="0.1" height="15.0" fill="rgb(244,129,50)" rx="2" ry="2" />
<text  x="1149.92" y="239.5" ></text>
</g>
<g >
<title>__strlen_avx2 (50 samples, 0.45%)</title><rect x="44.0" y="405" width="5.3" height="15.0" fill="rgb(253,49,44)" rx="2" ry="2" />
<text  x="46.95" y="415.5" ></text>
</g>
<g >
<title>arch_irq_work_raise (1 samples, 0.01%)</title><rect x="1083.2" y="149" width="0.1" height="15.0" fill="rgb(231,15,50)" rx="2" ry="2" />
<text  x="1086.15" y="159.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (104 samples, 0.94%)</title><rect x="1129.9" y="341" width="11.1" height="15.0" fill="rgb(232,18,33)" rx="2" ry="2" />
<text  x="1132.94" y="351.5" ></text>
</g>
<g >
<title>__munmap (8 samples, 0.07%)</title><rect x="1146.6" y="405" width="0.9" height="15.0" fill="rgb(214,146,26)" rx="2" ry="2" />
<text  x="1149.60" y="415.5" ></text>
</g>
<g >
<title>std::string::reserve (13 samples, 0.12%)</title><rect x="1141.1" y="341" width="1.4" height="15.0" fill="rgb(214,55,11)" rx="2" ry="2" />
<text  x="1144.09" y="351.5" ></text>
</g>
<g >
<title>unmap_region (8 samples, 0.07%)</title><rect x="1146.6" y="309" width="0.9" height="15.0" fill="rgb(238,34,5)" rx="2" ry="2" />
<text  x="1149.60" y="319.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (7 samples, 0.06%)</title><rect x="1126.4" y="341" width="0.8" height="15.0" fill="rgb(241,148,10)" rx="2" ry="2" />
<text  x="1129.44" y="351.5" ></text>
</g>
<g >
<title>amd_pmu_disable_all (3 samples, 0.03%)</title><rect x="1081.1" y="181" width="0.4" height="15.0" fill="rgb(240,28,45)" rx="2" ry="2" />
<text  x="1084.14" y="191.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="111.8" y="405" width="0.1" height="15.0" fill="rgb(219,202,42)" rx="2" ry="2" />
<text  x="114.76" y="415.5" ></text>
</g>
<g >
<title>send_call_function_single_ipi (1 samples, 0.01%)</title><rect x="41.3" y="101" width="0.1" height="15.0" fill="rgb(222,30,47)" rx="2" ry="2" />
<text  x="44.30" y="111.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="50.1" y="357" width="0.1" height="15.0" fill="rgb(237,160,26)" rx="2" ry="2" />
<text  x="53.11" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (111 samples, 1.00%)</title><rect x="1095.2" y="341" width="11.8" height="15.0" fill="rgb(226,33,54)" rx="2" ry="2" />
<text  x="1098.25" y="351.5" ></text>
</g>
<g >
<title>try_to_wake_up (5 samples, 0.04%)</title><rect x="1085.1" y="101" width="0.5" height="15.0" fill="rgb(216,143,43)" rx="2" ry="2" />
<text  x="1088.06" y="111.5" ></text>
</g>
</g>
</svg>
