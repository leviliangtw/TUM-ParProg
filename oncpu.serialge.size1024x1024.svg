<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >On-CPU Time Flame Graph: $ ./serialge ./ge_data/size1024x1024</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>__x64_sys_read (2 samples, 0.08%)</title><rect x="69.0" y="245" width="1.0" height="15.0" fill="rgb(234,29,20)" rx="2" ry="2" />
<text  x="72.00" y="255.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (2 samples, 0.08%)</title><rect x="1159.1" y="165" width="0.9" height="15.0" fill="rgb(221,115,10)" rx="2" ry="2" />
<text  x="1162.07" y="175.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (51 samples, 2.06%)</title><rect x="1161.5" y="309" width="24.2" height="15.0" fill="rgb(239,216,3)" rx="2" ry="2" />
<text  x="1164.45" y="319.5" >s..</text>
</g>
<g >
<title>__GI_____strtod_l_internal (32 samples, 1.29%)</title><rect x="112.8" y="309" width="15.2" height="15.0" fill="rgb(215,13,38)" rx="2" ry="2" />
<text  x="115.77" y="319.5" ></text>
</g>
<g >
<title>exc_page_fault (19 samples, 0.77%)</title><rect x="1151.9" y="277" width="9.1" height="15.0" fill="rgb(223,23,23)" rx="2" ry="2" />
<text  x="1154.94" y="287.5" ></text>
</g>
<g >
<title>ksys_read (2 samples, 0.08%)</title><rect x="69.0" y="229" width="1.0" height="15.0" fill="rgb(205,221,3)" rx="2" ry="2" />
<text  x="72.00" y="239.5" ></text>
</g>
<g >
<title>mutex_lock (1 samples, 0.04%)</title><rect x="42.8" y="133" width="0.5" height="15.0" fill="rgb(226,130,5)" rx="2" ry="2" />
<text  x="45.83" y="143.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (1 samples, 0.04%)</title><rect x="64.2" y="85" width="0.5" height="15.0" fill="rgb(244,93,15)" rx="2" ry="2" />
<text  x="67.24" y="95.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (39 samples, 1.57%)</title><rect x="1082.0" y="213" width="18.5" height="15.0" fill="rgb(219,9,41)" rx="2" ry="2" />
<text  x="1084.99" y="223.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="57.6" y="245" width="0.5" height="15.0" fill="rgb(236,70,15)" rx="2" ry="2" />
<text  x="60.58" y="255.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.04%)</title><rect x="76.1" y="165" width="0.5" height="15.0" fill="rgb(219,35,22)" rx="2" ry="2" />
<text  x="79.14" y="175.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (14 samples, 0.56%)</title><rect x="76.6" y="293" width="6.7" height="15.0" fill="rgb(242,88,36)" rx="2" ry="2" />
<text  x="79.61" y="303.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (38 samples, 1.53%)</title><rect x="84.7" y="293" width="18.1" height="15.0" fill="rgb(242,44,19)" rx="2" ry="2" />
<text  x="87.70" y="303.5" ></text>
</g>
<g >
<title>round_and_return (14 samples, 0.56%)</title><rect x="70.0" y="293" width="6.6" height="15.0" fill="rgb(237,9,17)" rx="2" ry="2" />
<text  x="72.95" y="303.5" ></text>
</g>
<g >
<title>amd_pmu_addr_offset (1 samples, 0.04%)</title><rect x="76.1" y="69" width="0.5" height="15.0" fill="rgb(229,83,12)" rx="2" ry="2" />
<text  x="79.14" y="79.5" ></text>
</g>
<g >
<title>get_page_from_freelist (11 samples, 0.44%)</title><rect x="1153.8" y="165" width="5.3" height="15.0" fill="rgb(238,106,41)" rx="2" ry="2" />
<text  x="1156.84" y="175.5" ></text>
</g>
<g >
<title>ksys_write (4 samples, 0.16%)</title><rect x="42.8" y="229" width="1.9" height="15.0" fill="rgb(242,187,49)" rx="2" ry="2" />
<text  x="45.83" y="239.5" ></text>
</g>
<g >
<title>elf_map (1 samples, 0.04%)</title><rect x="64.2" y="197" width="0.5" height="15.0" fill="rgb(247,137,43)" rx="2" ry="2" />
<text  x="67.24" y="207.5" ></text>
</g>
<g >
<title>perf_iterate_sb (1 samples, 0.04%)</title><rect x="64.2" y="101" width="0.5" height="15.0" fill="rgb(207,60,17)" rx="2" ry="2" />
<text  x="67.24" y="111.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.04%)</title><rect x="64.2" y="165" width="0.5" height="15.0" fill="rgb(214,81,15)" rx="2" ry="2" />
<text  x="67.24" y="175.5" ></text>
</g>
<g >
<title>read (3 samples, 0.12%)</title><rect x="68.5" y="293" width="1.5" height="15.0" fill="rgb(207,191,27)" rx="2" ry="2" />
<text  x="71.52" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.04%)</title><rect x="68.0" y="293" width="0.5" height="15.0" fill="rgb(251,25,27)" rx="2" ry="2" />
<text  x="71.05" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="64.2" y="293" width="0.5" height="15.0" fill="rgb(210,182,47)" rx="2" ry="2" />
<text  x="67.24" y="303.5" ></text>
</g>
<g >
<title>perf_pmu_disable.part.0 (1 samples, 0.04%)</title><rect x="76.1" y="117" width="0.5" height="15.0" fill="rgb(252,0,36)" rx="2" ry="2" />
<text  x="79.14" y="127.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.04%)</title><rect x="1143.8" y="245" width="0.5" height="15.0" fill="rgb(226,124,39)" rx="2" ry="2" />
<text  x="1146.85" y="255.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.04%)</title><rect x="1143.4" y="117" width="0.4" height="15.0" fill="rgb(232,170,30)" rx="2" ry="2" />
<text  x="1146.37" y="127.5" ></text>
</g>
<g >
<title>do_mmap (1 samples, 0.04%)</title><rect x="64.2" y="149" width="0.5" height="15.0" fill="rgb(205,143,35)" rx="2" ry="2" />
<text  x="67.24" y="159.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (16 samples, 0.65%)</title><rect x="10.0" y="309" width="7.6" height="15.0" fill="rgb(224,196,54)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (53 samples, 2.14%)</title><rect x="17.6" y="293" width="25.2" height="15.0" fill="rgb(233,112,21)" rx="2" ry="2" />
<text  x="20.61" y="303.5" >_..</text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="76.1" y="213" width="0.5" height="15.0" fill="rgb(237,67,46)" rx="2" ry="2" />
<text  x="79.14" y="223.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.04%)</title><rect x="1143.8" y="181" width="0.5" height="15.0" fill="rgb(253,200,14)" rx="2" ry="2" />
<text  x="1146.85" y="191.5" ></text>
</g>
<g >
<title>mem_cgroup_charge (2 samples, 0.08%)</title><rect x="1160.0" y="197" width="1.0" height="15.0" fill="rgb(221,22,43)" rx="2" ry="2" />
<text  x="1163.02" y="207.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (2 samples, 0.08%)</title><rect x="69.0" y="181" width="1.0" height="15.0" fill="rgb(229,154,4)" rx="2" ry="2" />
<text  x="72.00" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.16%)</title><rect x="42.8" y="261" width="1.9" height="15.0" fill="rgb(217,36,15)" rx="2" ry="2" />
<text  x="45.83" y="271.5" ></text>
</g>
<g >
<title>handle_mm_fault (18 samples, 0.73%)</title><rect x="1152.4" y="245" width="8.6" height="15.0" fill="rgb(237,148,5)" rx="2" ry="2" />
<text  x="1155.41" y="255.5" ></text>
</g>
<g >
<title>find_get_entry (1 samples, 0.04%)</title><rect x="69.5" y="117" width="0.5" height="15.0" fill="rgb(217,134,24)" rx="2" ry="2" />
<text  x="72.48" y="127.5" ></text>
</g>
<g >
<title>dl_main (1 samples, 0.04%)</title><rect x="57.6" y="277" width="0.5" height="15.0" fill="rgb(245,25,50)" rx="2" ry="2" />
<text  x="60.58" y="287.5" ></text>
</g>
<g >
<title>perf_event_task_tick (1 samples, 0.04%)</title><rect x="76.1" y="133" width="0.5" height="15.0" fill="rgb(206,116,33)" rx="2" ry="2" />
<text  x="79.14" y="143.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (17 samples, 0.69%)</title><rect x="1126.7" y="213" width="8.1" height="15.0" fill="rgb(207,150,16)" rx="2" ry="2" />
<text  x="1129.72" y="223.5" ></text>
</g>
<g >
<title>std::locale::locale (1 samples, 0.04%)</title><rect x="1142.4" y="245" width="0.5" height="15.0" fill="rgb(217,95,1)" rx="2" ry="2" />
<text  x="1145.42" y="255.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="57.6" y="293" width="0.5" height="15.0" fill="rgb(252,179,26)" rx="2" ry="2" />
<text  x="60.58" y="303.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.08%)</title><rect x="1142.9" y="181" width="0.9" height="15.0" fill="rgb(218,213,13)" rx="2" ry="2" />
<text  x="1145.90" y="191.5" ></text>
</g>
<g >
<title>propagate_protected_usage (1 samples, 0.04%)</title><rect x="1160.5" y="165" width="0.5" height="15.0" fill="rgb(217,30,37)" rx="2" ry="2" />
<text  x="1163.50" y="175.5" ></text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.04%)</title><rect x="1143.8" y="117" width="0.5" height="15.0" fill="rgb(213,160,15)" rx="2" ry="2" />
<text  x="1146.85" y="127.5" ></text>
</g>
<g >
<title>alloc_set_pte (1 samples, 0.04%)</title><rect x="57.6" y="133" width="0.5" height="15.0" fill="rgb(208,129,16)" rx="2" ry="2" />
<text  x="60.58" y="143.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (19 samples, 0.77%)</title><rect x="1151.9" y="309" width="9.1" height="15.0" fill="rgb(213,199,31)" rx="2" ry="2" />
<text  x="1154.94" y="319.5" ></text>
</g>
<g >
<title>tty_write (4 samples, 0.16%)</title><rect x="42.8" y="181" width="1.9" height="15.0" fill="rgb(233,74,27)" rx="2" ry="2" />
<text  x="45.83" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1143.8" y="309" width="0.5" height="15.0" fill="rgb(253,62,49)" rx="2" ry="2" />
<text  x="1146.85" y="319.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.04%)</title><rect x="1143.8" y="261" width="0.5" height="15.0" fill="rgb(248,54,13)" rx="2" ry="2" />
<text  x="1146.85" y="271.5" ></text>
</g>
<g >
<title>std::string::reserve (1 samples, 0.04%)</title><rect x="1135.3" y="213" width="0.5" height="15.0" fill="rgb(244,44,11)" rx="2" ry="2" />
<text  x="1138.28" y="223.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (12 samples, 0.48%)</title><rect x="1136.2" y="229" width="5.7" height="15.0" fill="rgb(213,134,6)" rx="2" ry="2" />
<text  x="1139.23" y="239.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.08%)</title><rect x="1160.0" y="181" width="1.0" height="15.0" fill="rgb(231,176,25)" rx="2" ry="2" />
<text  x="1163.02" y="191.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (2 samples, 0.08%)</title><rect x="69.0" y="149" width="1.0" height="15.0" fill="rgb(209,150,18)" rx="2" ry="2" />
<text  x="72.00" y="159.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.04%)</title><rect x="1143.8" y="149" width="0.5" height="15.0" fill="rgb(236,210,16)" rx="2" ry="2" />
<text  x="1146.85" y="159.5" ></text>
</g>
<g >
<title>x86_pmu_disable (1 samples, 0.04%)</title><rect x="76.1" y="101" width="0.5" height="15.0" fill="rgb(225,36,34)" rx="2" ry="2" />
<text  x="79.14" y="111.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.04%)</title><rect x="57.6" y="229" width="0.5" height="15.0" fill="rgb(228,191,6)" rx="2" ry="2" />
<text  x="60.58" y="239.5" ></text>
</g>
<g >
<title>__strtod_l (2 samples, 0.08%)</title><rect x="56.6" y="293" width="1.0" height="15.0" fill="rgb(243,103,7)" rx="2" ry="2" />
<text  x="59.63" y="303.5" ></text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.04%)</title><rect x="43.8" y="133" width="0.5" height="15.0" fill="rgb(239,12,39)" rx="2" ry="2" />
<text  x="46.78" y="143.5" ></text>
</g>
<g >
<title>__handle_mm_fault (17 samples, 0.69%)</title><rect x="1152.9" y="229" width="8.1" height="15.0" fill="rgb(239,175,22)" rx="2" ry="2" />
<text  x="1155.89" y="239.5" ></text>
</g>
<g >
<title>__mpn_construct_double (2 samples, 0.08%)</title><rect x="44.7" y="293" width="1.0" height="15.0" fill="rgb(235,124,13)" rx="2" ry="2" />
<text  x="47.73" y="303.5" ></text>
</g>
<g >
<title>__count_memcg_events (1 samples, 0.04%)</title><rect x="1152.4" y="229" width="0.5" height="15.0" fill="rgb(253,54,8)" rx="2" ry="2" />
<text  x="1155.41" y="239.5" ></text>
</g>
<g >
<title>ktime_get_real_seconds (1 samples, 0.04%)</title><rect x="44.3" y="165" width="0.4" height="15.0" fill="rgb(238,65,17)" rx="2" ry="2" />
<text  x="47.26" y="175.5" ></text>
</g>
<g >
<title>Serial::ForwardElimination (1,975 samples, 79.64%)</title><rect x="130.4" y="261" width="939.7" height="15.0" fill="rgb(228,24,25)" rx="2" ry="2" />
<text  x="133.38" y="271.5" >Serial::ForwardElimination</text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.04%)</title><rect x="69.0" y="117" width="0.5" height="15.0" fill="rgb(236,92,39)" rx="2" ry="2" />
<text  x="72.00" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="43.8" y="117" width="0.5" height="15.0" fill="rgb(209,29,39)" rx="2" ry="2" />
<text  x="46.78" y="127.5" ></text>
</g>
<g >
<title>__libc_start_main (2,132 samples, 85.97%)</title><rect x="129.4" y="309" width="1014.4" height="15.0" fill="rgb(222,185,7)" rx="2" ry="2" />
<text  x="132.43" y="319.5" >__libc_start_main</text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.04%)</title><rect x="1122.0" y="213" width="0.4" height="15.0" fill="rgb(229,20,33)" rx="2" ry="2" />
<text  x="1124.96" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.04%)</title><rect x="1143.8" y="277" width="0.5" height="15.0" fill="rgb(216,23,50)" rx="2" ry="2" />
<text  x="1146.85" y="287.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.12%)</title><rect x="83.3" y="277" width="1.4" height="15.0" fill="rgb(213,56,27)" rx="2" ry="2" />
<text  x="86.27" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.08%)</title><rect x="1142.9" y="261" width="0.9" height="15.0" fill="rgb(245,54,22)" rx="2" ry="2" />
<text  x="1145.90" y="271.5" ></text>
</g>
<g >
<title>Utility::InitializeArray (153 samples, 6.17%)</title><rect x="1070.1" y="261" width="72.8" height="15.0" fill="rgb(238,126,50)" rx="2" ry="2" />
<text  x="1073.10" y="271.5" >Utility:..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.08%)</title><rect x="69.0" y="261" width="1.0" height="15.0" fill="rgb(252,80,1)" rx="2" ry="2" />
<text  x="72.00" y="271.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.04%)</title><rect x="1143.8" y="213" width="0.5" height="15.0" fill="rgb(240,224,49)" rx="2" ry="2" />
<text  x="1146.85" y="223.5" ></text>
</g>
<g >
<title>perf_event_pid_type (1 samples, 0.04%)</title><rect x="64.2" y="37" width="0.5" height="15.0" fill="rgb(205,9,50)" rx="2" ry="2" />
<text  x="67.24" y="47.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (22 samples, 0.89%)</title><rect x="1105.8" y="213" width="10.4" height="15.0" fill="rgb(217,78,25)" rx="2" ry="2" />
<text  x="1108.78" y="223.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.04%)</title><rect x="1143.4" y="165" width="0.4" height="15.0" fill="rgb(233,36,34)" rx="2" ry="2" />
<text  x="1146.37" y="175.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="68.5" y="277" width="0.5" height="15.0" fill="rgb(231,139,47)" rx="2" ry="2" />
<text  x="71.52" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="83.3" y="261" width="0.5" height="15.0" fill="rgb(224,90,45)" rx="2" ry="2" />
<text  x="86.27" y="271.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (5 samples, 0.20%)</title><rect x="1119.6" y="213" width="2.4" height="15.0" fill="rgb(221,4,52)" rx="2" ry="2" />
<text  x="1122.58" y="223.5" ></text>
</g>
<g >
<title>__correctly_grouped_prefixmb (1 samples, 0.04%)</title><rect x="128.0" y="309" width="0.5" height="15.0" fill="rgb(242,214,13)" rx="2" ry="2" />
<text  x="131.00" y="319.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="76.1" y="261" width="0.5" height="15.0" fill="rgb(207,137,4)" rx="2" ry="2" />
<text  x="79.14" y="271.5" ></text>
</g>
<g >
<title>perf_event_mmap (1 samples, 0.04%)</title><rect x="64.2" y="117" width="0.5" height="15.0" fill="rgb(228,102,39)" rx="2" ry="2" />
<text  x="67.24" y="127.5" ></text>
</g>
<g >
<title>vfs_write (4 samples, 0.16%)</title><rect x="42.8" y="213" width="1.9" height="15.0" fill="rgb(208,110,49)" rx="2" ry="2" />
<text  x="45.83" y="223.5" ></text>
</g>
<g >
<title>new_sync_read (2 samples, 0.08%)</title><rect x="69.0" y="197" width="1.0" height="15.0" fill="rgb(231,218,43)" rx="2" ry="2" />
<text  x="72.00" y="207.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.04%)</title><rect x="57.6" y="197" width="0.5" height="15.0" fill="rgb(245,118,39)" rx="2" ry="2" />
<text  x="60.58" y="207.5" ></text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.04%)</title><rect x="64.2" y="213" width="0.5" height="15.0" fill="rgb(246,205,8)" rx="2" ry="2" />
<text  x="67.24" y="223.5" ></text>
</g>
<g >
<title>vm_mmap (1 samples, 0.04%)</title><rect x="64.2" y="181" width="0.5" height="15.0" fill="rgb(212,79,41)" rx="2" ry="2" />
<text  x="67.24" y="191.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.04%)</title><rect x="1142.9" y="133" width="0.5" height="15.0" fill="rgb(215,102,11)" rx="2" ry="2" />
<text  x="1145.90" y="143.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.04%)</title><rect x="1143.4" y="133" width="0.4" height="15.0" fill="rgb(230,155,37)" rx="2" ry="2" />
<text  x="1146.37" y="143.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.04%)</title><rect x="1143.8" y="133" width="0.5" height="15.0" fill="rgb(233,19,5)" rx="2" ry="2" />
<text  x="1146.85" y="143.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (11 samples, 0.44%)</title><rect x="1153.8" y="181" width="5.3" height="15.0" fill="rgb(215,46,3)" rx="2" ry="2" />
<text  x="1156.84" y="191.5" ></text>
</g>
<g >
<title>std::string::reserve (9 samples, 0.36%)</title><rect x="107.1" y="293" width="4.2" height="15.0" fill="rgb(215,217,40)" rx="2" ry="2" />
<text  x="110.06" y="303.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (2 samples, 0.08%)</title><rect x="1159.1" y="149" width="0.9" height="15.0" fill="rgb(232,41,13)" rx="2" ry="2" />
<text  x="1162.07" y="159.5" ></text>
</g>
<g >
<title>lru_cache_add (2 samples, 0.08%)</title><rect x="1159.1" y="181" width="0.9" height="15.0" fill="rgb(226,90,2)" rx="2" ry="2" />
<text  x="1162.07" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_filebuf (3 samples, 0.12%)</title><rect x="83.3" y="293" width="1.4" height="15.0" fill="rgb(214,172,40)" rx="2" ry="2" />
<text  x="86.27" y="303.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.04%)</title><rect x="1143.8" y="229" width="0.5" height="15.0" fill="rgb(215,178,11)" rx="2" ry="2" />
<text  x="1146.85" y="239.5" ></text>
</g>
<g >
<title>insert_work (1 samples, 0.04%)</title><rect x="43.3" y="85" width="0.5" height="15.0" fill="rgb(241,74,52)" rx="2" ry="2" />
<text  x="46.31" y="95.5" ></text>
</g>
<g >
<title>tty_flip_buffer_push (1 samples, 0.04%)</title><rect x="43.3" y="117" width="0.5" height="15.0" fill="rgb(229,79,52)" rx="2" ry="2" />
<text  x="46.31" y="127.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.04%)</title><rect x="57.6" y="181" width="0.5" height="15.0" fill="rgb(227,10,47)" rx="2" ry="2" />
<text  x="60.58" y="191.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (1 samples, 0.04%)</title><rect x="17.1" y="293" width="0.5" height="15.0" fill="rgb(230,55,52)" rx="2" ry="2" />
<text  x="20.14" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.08%)</title><rect x="1142.9" y="245" width="0.9" height="15.0" fill="rgb(239,47,33)" rx="2" ry="2" />
<text  x="1145.90" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1143.8" y="293" width="0.5" height="15.0" fill="rgb(233,87,31)" rx="2" ry="2" />
<text  x="1146.85" y="303.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.04%)</title><rect x="64.2" y="133" width="0.5" height="15.0" fill="rgb(209,58,35)" rx="2" ry="2" />
<text  x="67.24" y="143.5" ></text>
</g>
<g >
<title>tick_sched_handle.isra.0 (1 samples, 0.04%)</title><rect x="76.1" y="181" width="0.5" height="15.0" fill="rgb(242,222,0)" rx="2" ry="2" />
<text  x="79.14" y="191.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="76.1" y="245" width="0.5" height="15.0" fill="rgb(220,68,15)" rx="2" ry="2" />
<text  x="79.14" y="255.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (2 samples, 0.08%)</title><rect x="1159.1" y="197" width="0.9" height="15.0" fill="rgb(249,213,52)" rx="2" ry="2" />
<text  x="1162.07" y="207.5" ></text>
</g>
<g >
<title>exec_binprm (1 samples, 0.04%)</title><rect x="64.2" y="229" width="0.5" height="15.0" fill="rgb(254,147,17)" rx="2" ry="2" />
<text  x="67.24" y="239.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_list (1 samples, 0.04%)</title><rect x="1142.9" y="101" width="0.5" height="15.0" fill="rgb(250,150,36)" rx="2" ry="2" />
<text  x="1145.90" y="111.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.16%)</title><rect x="1116.2" y="213" width="2.0" height="15.0" fill="rgb(243,148,33)" rx="2" ry="2" />
<text  x="1119.25" y="223.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.08%)</title><rect x="1142.9" y="197" width="0.9" height="15.0" fill="rgb(212,137,12)" rx="2" ry="2" />
<text  x="1145.90" y="207.5" ></text>
</g>
<g >
<title>ReadLine (151 samples, 6.09%)</title><rect x="1070.1" y="245" width="71.8" height="15.0" fill="rgb(213,125,45)" rx="2" ry="2" />
<text  x="1073.10" y="255.5" >ReadLine</text>
</g>
<g >
<title>filemap_map_pages (1 samples, 0.04%)</title><rect x="57.6" y="149" width="0.5" height="15.0" fill="rgb(219,1,25)" rx="2" ry="2" />
<text  x="60.58" y="159.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.04%)</title><rect x="1142.9" y="117" width="0.5" height="15.0" fill="rgb(246,223,49)" rx="2" ry="2" />
<text  x="1145.90" y="127.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.04%)</title><rect x="1143.4" y="149" width="0.4" height="15.0" fill="rgb(242,196,37)" rx="2" ry="2" />
<text  x="1146.37" y="159.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.08%)</title><rect x="1142.9" y="213" width="0.9" height="15.0" fill="rgb(222,216,52)" rx="2" ry="2" />
<text  x="1145.90" y="223.5" ></text>
</g>
<g >
<title>all (2,480 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(217,15,31)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>vfs_read (2 samples, 0.08%)</title><rect x="69.0" y="213" width="1.0" height="15.0" fill="rgb(222,101,2)" rx="2" ry="2" />
<text  x="72.00" y="223.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (19 samples, 0.77%)</title><rect x="1151.9" y="293" width="9.1" height="15.0" fill="rgb(245,168,11)" rx="2" ry="2" />
<text  x="1154.94" y="303.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (2 samples, 0.08%)</title><rect x="82.3" y="277" width="1.0" height="15.0" fill="rgb(221,87,43)" rx="2" ry="2" />
<text  x="85.32" y="287.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (1 samples, 0.04%)</title><rect x="1141.9" y="245" width="0.5" height="15.0" fill="rgb(226,34,33)" rx="2" ry="2" />
<text  x="1144.94" y="255.5" ></text>
</g>
<g >
<title>do_anonymous_page (16 samples, 0.65%)</title><rect x="1153.4" y="213" width="7.6" height="15.0" fill="rgb(226,39,1)" rx="2" ry="2" />
<text  x="1156.36" y="223.5" ></text>
</g>
<g >
<title>main (2,132 samples, 85.97%)</title><rect x="129.4" y="293" width="1014.4" height="15.0" fill="rgb(220,175,46)" rx="2" ry="2" />
<text  x="132.43" y="303.5" >main</text>
</g>
<g >
<title>__strlen_avx2 (19 samples, 0.77%)</title><rect x="47.6" y="293" width="9.0" height="15.0" fill="rgb(245,187,32)" rx="2" ry="2" />
<text  x="50.59" y="303.5" ></text>
</g>
<g >
<title>copy_page_to_iter (1 samples, 0.04%)</title><rect x="69.0" y="133" width="0.5" height="15.0" fill="rgb(252,95,37)" rx="2" ry="2" />
<text  x="72.00" y="143.5" ></text>
</g>
<g >
<title>__wmemchr_ifunc (1 samples, 0.04%)</title><rect x="57.6" y="261" width="0.5" height="15.0" fill="rgb(205,57,20)" rx="2" ry="2" />
<text  x="60.58" y="271.5" ></text>
</g>
<g >
<title>std::string::_Rep::_S_create (6 samples, 0.24%)</title><rect x="104.2" y="293" width="2.9" height="15.0" fill="rgb(218,205,3)" rx="2" ry="2" />
<text  x="107.21" y="303.5" ></text>
</g>
<g >
<title>__mpn_lshift (4 samples, 0.16%)</title><rect x="45.7" y="293" width="1.9" height="15.0" fill="rgb(206,48,21)" rx="2" ry="2" />
<text  x="48.69" y="303.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_destroy (1 samples, 0.04%)</title><rect x="1134.8" y="213" width="0.5" height="15.0" fill="rgb(215,82,54)" rx="2" ry="2" />
<text  x="1137.81" y="223.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.04%)</title><rect x="1142.9" y="149" width="0.5" height="15.0" fill="rgb(210,144,51)" rx="2" ry="2" />
<text  x="1145.90" y="159.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (1 samples, 0.04%)</title><rect x="1135.8" y="229" width="0.4" height="15.0" fill="rgb(236,158,44)" rx="2" ry="2" />
<text  x="1138.76" y="239.5" ></text>
</g>
<g >
<title>serialge (2,480 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(217,154,21)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >serialge</text>
</g>
<g >
<title>malloc (16 samples, 0.65%)</title><rect x="1144.3" y="309" width="7.6" height="15.0" fill="rgb(212,160,24)" rx="2" ry="2" />
<text  x="1147.32" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_write (4 samples, 0.16%)</title><rect x="42.8" y="245" width="1.9" height="15.0" fill="rgb(210,143,26)" rx="2" ry="2" />
<text  x="45.83" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="64.2" y="277" width="0.5" height="15.0" fill="rgb(211,7,38)" rx="2" ry="2" />
<text  x="67.24" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.04%)</title><rect x="64.2" y="261" width="0.5" height="15.0" fill="rgb(221,142,48)" rx="2" ry="2" />
<text  x="67.24" y="271.5" ></text>
</g>
<g >
<title>Serial::SerialSolve (2,130 samples, 85.89%)</title><rect x="129.4" y="277" width="1013.5" height="15.0" fill="rgb(236,74,29)" rx="2" ry="2" />
<text  x="132.43" y="287.5" >Serial::SerialSolve</text>
</g>
<g >
<title>queue_work_on (1 samples, 0.04%)</title><rect x="43.3" y="101" width="0.5" height="15.0" fill="rgb(229,141,34)" rx="2" ry="2" />
<text  x="46.31" y="111.5" ></text>
</g>
<g >
<title>generic_file_read_iter (2 samples, 0.08%)</title><rect x="69.0" y="165" width="1.0" height="15.0" fill="rgb(209,199,45)" rx="2" ry="2" />
<text  x="72.00" y="175.5" ></text>
</g>
<g >
<title>amd_pmu_disable_all (1 samples, 0.04%)</title><rect x="76.1" y="85" width="0.5" height="15.0" fill="rgb(236,58,40)" rx="2" ry="2" />
<text  x="79.14" y="95.5" ></text>
</g>
<g >
<title>std::locale::_Impl::_M_install_facet (1 samples, 0.04%)</title><rect x="1161.0" y="309" width="0.5" height="15.0" fill="rgb(249,70,1)" rx="2" ry="2" />
<text  x="1163.98" y="319.5" ></text>
</g>
<g >
<title>malloc (7 samples, 0.28%)</title><rect x="64.7" y="293" width="3.3" height="15.0" fill="rgb(220,75,30)" rx="2" ry="2" />
<text  x="67.72" y="303.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.04%)</title><rect x="1142.9" y="165" width="0.5" height="15.0" fill="rgb(230,16,53)" rx="2" ry="2" />
<text  x="1145.90" y="175.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="76.1" y="229" width="0.5" height="15.0" fill="rgb(252,192,39)" rx="2" ry="2" />
<text  x="79.14" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.08%)</title><rect x="69.0" y="277" width="1.0" height="15.0" fill="rgb(229,84,15)" rx="2" ry="2" />
<text  x="72.00" y="287.5" ></text>
</g>
<g >
<title>_int_free (11 samples, 0.44%)</title><rect x="1100.5" y="213" width="5.3" height="15.0" fill="rgb(207,28,2)" rx="2" ry="2" />
<text  x="1103.55" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="76.1" y="277" width="0.5" height="15.0" fill="rgb(236,67,33)" rx="2" ry="2" />
<text  x="79.14" y="287.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.04%)</title><rect x="1143.8" y="197" width="0.5" height="15.0" fill="rgb(229,214,19)" rx="2" ry="2" />
<text  x="1146.85" y="207.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (3 samples, 0.12%)</title><rect x="111.3" y="293" width="1.5" height="15.0" fill="rgb(232,69,16)" rx="2" ry="2" />
<text  x="114.35" y="303.5" ></text>
</g>
<g >
<title>new_sync_write (4 samples, 0.16%)</title><rect x="42.8" y="197" width="1.9" height="15.0" fill="rgb(234,30,28)" rx="2" ry="2" />
<text  x="45.83" y="207.5" ></text>
</g>
<g >
<title>clear_page_rep (9 samples, 0.36%)</title><rect x="1153.8" y="149" width="4.3" height="15.0" fill="rgb(208,36,7)" rx="2" ry="2" />
<text  x="1156.84" y="159.5" ></text>
</g>
<g >
<title>pagecache_get_page (1 samples, 0.04%)</title><rect x="69.5" y="133" width="0.5" height="15.0" fill="rgb(227,36,50)" rx="2" ry="2" />
<text  x="72.48" y="143.5" ></text>
</g>
<g >
<title>std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.08%)</title><rect x="83.8" y="261" width="0.9" height="15.0" fill="rgb(207,59,14)" rx="2" ry="2" />
<text  x="86.75" y="271.5" ></text>
</g>
<g >
<title>[unknown] (200 samples, 8.06%)</title><rect x="17.6" y="309" width="95.2" height="15.0" fill="rgb(226,87,27)" rx="2" ry="2" />
<text  x="20.61" y="319.5" >[unknown]</text>
</g>
<g >
<title>alloc_pages_vma (11 samples, 0.44%)</title><rect x="1153.8" y="197" width="5.3" height="15.0" fill="rgb(210,71,20)" rx="2" ry="2" />
<text  x="1156.84" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.16%)</title><rect x="42.8" y="277" width="1.9" height="15.0" fill="rgb(213,65,9)" rx="2" ry="2" />
<text  x="45.83" y="287.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (9 samples, 0.36%)</title><rect x="1185.7" y="309" width="4.3" height="15.0" fill="rgb(205,222,6)" rx="2" ry="2" />
<text  x="1188.72" y="319.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (3 samples, 0.12%)</title><rect x="1118.2" y="213" width="1.4" height="15.0" fill="rgb(205,93,43)" rx="2" ry="2" />
<text  x="1121.15" y="223.5" ></text>
</g>
<g >
<title>do_user_addr_fault (18 samples, 0.73%)</title><rect x="1152.4" y="261" width="8.6" height="15.0" fill="rgb(220,95,10)" rx="2" ry="2" />
<text  x="1155.41" y="271.5" ></text>
</g>
<g >
<title>__munmap (2 samples, 0.08%)</title><rect x="1142.9" y="277" width="0.9" height="15.0" fill="rgb(247,220,38)" rx="2" ry="2" />
<text  x="1145.90" y="287.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.04%)</title><rect x="57.6" y="165" width="0.5" height="15.0" fill="rgb(254,57,20)" rx="2" ry="2" />
<text  x="60.58" y="175.5" ></text>
</g>
<g >
<title>perf_event_mmap_output (1 samples, 0.04%)</title><rect x="64.2" y="69" width="0.5" height="15.0" fill="rgb(221,185,35)" rx="2" ry="2" />
<text  x="67.24" y="79.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (3 samples, 0.12%)</title><rect x="42.8" y="165" width="1.5" height="15.0" fill="rgb(208,182,26)" rx="2" ry="2" />
<text  x="45.83" y="175.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.04%)</title><rect x="1143.8" y="101" width="0.5" height="15.0" fill="rgb(209,179,31)" rx="2" ry="2" />
<text  x="1146.85" y="111.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (9 samples, 0.36%)</title><rect x="1122.4" y="213" width="4.3" height="15.0" fill="rgb(209,31,35)" rx="2" ry="2" />
<text  x="1125.44" y="223.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.0 (1 samples, 0.04%)</title><rect x="64.2" y="245" width="0.5" height="15.0" fill="rgb(234,213,12)" rx="2" ry="2" />
<text  x="67.24" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_write (4 samples, 0.16%)</title><rect x="42.8" y="293" width="1.9" height="15.0" fill="rgb(238,83,35)" rx="2" ry="2" />
<text  x="45.83" y="303.5" ></text>
</g>
<g >
<title>pty_write (1 samples, 0.04%)</title><rect x="43.3" y="133" width="0.5" height="15.0" fill="rgb(237,100,19)" rx="2" ry="2" />
<text  x="46.31" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.08%)</title><rect x="1142.9" y="229" width="0.9" height="15.0" fill="rgb(250,87,34)" rx="2" ry="2" />
<text  x="1145.90" y="239.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.04%)</title><rect x="17.1" y="277" width="0.5" height="15.0" fill="rgb(213,32,37)" rx="2" ry="2" />
<text  x="20.14" y="287.5" ></text>
</g>
<g >
<title>rmqueue (2 samples, 0.08%)</title><rect x="1158.1" y="149" width="1.0" height="15.0" fill="rgb(210,79,23)" rx="2" ry="2" />
<text  x="1161.12" y="159.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.04%)</title><rect x="1143.8" y="165" width="0.5" height="15.0" fill="rgb(248,219,6)" rx="2" ry="2" />
<text  x="1146.85" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.08%)</title><rect x="128.5" y="309" width="0.9" height="15.0" fill="rgb(246,229,6)" rx="2" ry="2" />
<text  x="131.48" y="319.5" ></text>
</g>
<g >
<title>_int_free (13 samples, 0.52%)</title><rect x="58.1" y="293" width="6.1" height="15.0" fill="rgb(227,213,33)" rx="2" ry="2" />
<text  x="61.06" y="303.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_clone (3 samples, 0.12%)</title><rect x="102.8" y="293" width="1.4" height="15.0" fill="rgb(209,52,30)" rx="2" ry="2" />
<text  x="105.78" y="303.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.04%)</title><rect x="76.1" y="197" width="0.5" height="15.0" fill="rgb(212,213,1)" rx="2" ry="2" />
<text  x="79.14" y="207.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (129 samples, 5.20%)</title><rect x="1074.4" y="229" width="61.4" height="15.0" fill="rgb(252,180,36)" rx="2" ry="2" />
<text  x="1077.38" y="239.5" >std::i..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="57.6" y="213" width="0.5" height="15.0" fill="rgb(240,92,26)" rx="2" ry="2" />
<text  x="60.58" y="223.5" ></text>
</g>
<g >
<title>n_tty_write (3 samples, 0.12%)</title><rect x="42.8" y="149" width="1.5" height="15.0" fill="rgb(251,67,27)" rx="2" ry="2" />
<text  x="45.83" y="159.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.04%)</title><rect x="76.1" y="149" width="0.5" height="15.0" fill="rgb(210,62,22)" rx="2" ry="2" />
<text  x="79.14" y="159.5" ></text>
</g>
<g >
<title>__perf_event_header__init_id.isra.0 (1 samples, 0.04%)</title><rect x="64.2" y="53" width="0.5" height="15.0" fill="rgb(211,221,34)" rx="2" ry="2" />
<text  x="67.24" y="63.5" ></text>
</g>
</g>
</svg>
