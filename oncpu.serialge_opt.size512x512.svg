<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >On-CPU Time Flame Graph: $ ./serialge ./ge_data/size512x512 (Optimized)</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>std::istream::sentry::sentry (8 samples, 3.51%)</title><rect x="284.3" y="341" width="41.4" height="15.0" fill="rgb(241,45,52)" rx="2" ry="2" />
<text  x="287.30" y="351.5" >std..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.44%)</title><rect x="46.2" y="341" width="5.2" height="15.0" fill="rgb(236,183,32)" rx="2" ry="2" />
<text  x="49.23" y="351.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 2.19%)</title><rect x="869.1" y="277" width="25.9" height="15.0" fill="rgb(219,51,54)" rx="2" ry="2" />
<text  x="872.12" y="287.5" >_..</text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.44%)</title><rect x="165.3" y="309" width="5.1" height="15.0" fill="rgb(246,136,26)" rx="2" ry="2" />
<text  x="168.26" y="319.5" ></text>
</g>
<g >
<title>queue_work_on (1 samples, 0.44%)</title><rect x="403.3" y="133" width="5.2" height="15.0" fill="rgb(230,59,48)" rx="2" ry="2" />
<text  x="406.33" y="143.5" ></text>
</g>
<g >
<title>irq_work_single (1 samples, 0.44%)</title><rect x="403.3" y="165" width="5.2" height="15.0" fill="rgb(217,87,6)" rx="2" ry="2" />
<text  x="406.33" y="175.5" ></text>
</g>
<g >
<title>sysvec_irq_work (1 samples, 0.44%)</title><rect x="403.3" y="229" width="5.2" height="15.0" fill="rgb(229,44,15)" rx="2" ry="2" />
<text  x="406.33" y="239.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="1081.3" y="277" width="5.2" height="15.0" fill="rgb(222,145,45)" rx="2" ry="2" />
<text  x="1084.32" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2 samples, 0.88%)</title><rect x="393.0" y="341" width="10.3" height="15.0" fill="rgb(213,152,29)" rx="2" ry="2" />
<text  x="395.98" y="351.5" ></text>
</g>
<g >
<title>native_read_msr (1 samples, 0.44%)</title><rect x="398.2" y="117" width="5.1" height="15.0" fill="rgb(248,215,35)" rx="2" ry="2" />
<text  x="401.16" y="127.5" ></text>
</g>
<g >
<title>idtentry_exit_cond_rcu (1 samples, 0.44%)</title><rect x="398.2" y="309" width="5.1" height="15.0" fill="rgb(230,14,35)" rx="2" ry="2" />
<text  x="401.16" y="319.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.44%)</title><rect x="165.3" y="197" width="5.1" height="15.0" fill="rgb(250,41,13)" rx="2" ry="2" />
<text  x="168.26" y="207.5" ></text>
</g>
<g >
<title>__prepare_exit_to_usermode (1 samples, 0.44%)</title><rect x="398.2" y="277" width="5.1" height="15.0" fill="rgb(249,140,16)" rx="2" ry="2" />
<text  x="401.16" y="287.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (18 samples, 7.89%)</title><rect x="1086.5" y="357" width="93.1" height="15.0" fill="rgb(235,26,3)" rx="2" ry="2" />
<text  x="1089.49" y="367.5" >std::num_ge..</text>
</g>
<g >
<title>perf_pmu_disable.part.0 (1 samples, 0.44%)</title><rect x="398.2" y="181" width="5.1" height="15.0" fill="rgb(227,90,49)" rx="2" ry="2" />
<text  x="401.16" y="191.5" ></text>
</g>
<g >
<title>ctx_sched_out (1 samples, 0.44%)</title><rect x="398.2" y="197" width="5.1" height="15.0" fill="rgb(230,90,6)" rx="2" ry="2" />
<text  x="401.16" y="207.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.44%)</title><rect x="413.7" y="229" width="5.2" height="15.0" fill="rgb(242,126,13)" rx="2" ry="2" />
<text  x="416.68" y="239.5" ></text>
</g>
<g >
<title>wake_up_process (1 samples, 0.44%)</title><rect x="403.3" y="85" width="5.2" height="15.0" fill="rgb(214,96,4)" rx="2" ry="2" />
<text  x="406.33" y="95.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.44%)</title><rect x="1081.3" y="245" width="5.2" height="15.0" fill="rgb(251,198,25)" rx="2" ry="2" />
<text  x="1084.32" y="255.5" ></text>
</g>
<g >
<title>record_times (1 samples, 0.44%)</title><rect x="770.8" y="165" width="5.2" height="15.0" fill="rgb(249,183,53)" rx="2" ry="2" />
<text  x="773.79" y="175.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.44%)</title><rect x="413.7" y="245" width="5.2" height="15.0" fill="rgb(210,16,8)" rx="2" ry="2" />
<text  x="416.68" y="255.5" ></text>
</g>
<g >
<title>__prepare_exit_to_usermode (1 samples, 0.44%)</title><rect x="770.8" y="245" width="5.2" height="15.0" fill="rgb(250,44,49)" rx="2" ry="2" />
<text  x="773.79" y="255.5" ></text>
</g>
<g >
<title>vm_munmap (1 samples, 0.44%)</title><rect x="165.3" y="229" width="5.1" height="15.0" fill="rgb(247,57,10)" rx="2" ry="2" />
<text  x="168.26" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.44%)</title><rect x="413.7" y="325" width="5.2" height="15.0" fill="rgb(232,75,46)" rx="2" ry="2" />
<text  x="416.68" y="335.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (12 samples, 5.26%)</title><rect x="51.4" y="341" width="62.1" height="15.0" fill="rgb(239,104,9)" rx="2" ry="2" />
<text  x="54.40" y="351.5" >__GI__..</text>
</g>
<g >
<title>irq_work_run_list (1 samples, 0.44%)</title><rect x="403.3" y="181" width="5.2" height="15.0" fill="rgb(250,170,43)" rx="2" ry="2" />
<text  x="406.33" y="191.5" ></text>
</g>
<g >
<title>Serial::SerialSolve (115 samples, 50.44%)</title><rect x="418.9" y="341" width="595.1" height="15.0" fill="rgb(223,58,14)" rx="2" ry="2" />
<text  x="421.86" y="351.5" >Serial::SerialSolve</text>
</g>
<g >
<title>release_pages (1 samples, 0.44%)</title><rect x="413.7" y="197" width="5.2" height="15.0" fill="rgb(233,88,45)" rx="2" ry="2" />
<text  x="416.68" y="207.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.44%)</title><rect x="403.3" y="309" width="5.2" height="15.0" fill="rgb(218,84,44)" rx="2" ry="2" />
<text  x="406.33" y="319.5" ></text>
</g>
<g >
<title>enqueue_hrtimer (1 samples, 0.44%)</title><rect x="393.0" y="261" width="5.2" height="15.0" fill="rgb(232,51,16)" rx="2" ry="2" />
<text  x="395.98" y="271.5" ></text>
</g>
<g >
<title>clear_page_rep (1 samples, 0.44%)</title><rect x="1081.3" y="197" width="5.2" height="15.0" fill="rgb(220,149,25)" rx="2" ry="2" />
<text  x="1084.32" y="207.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.44%)</title><rect x="413.7" y="277" width="5.2" height="15.0" fill="rgb(210,174,26)" rx="2" ry="2" />
<text  x="416.68" y="287.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.44%)</title><rect x="413.7" y="181" width="5.2" height="15.0" fill="rgb(235,133,21)" rx="2" ry="2" />
<text  x="416.68" y="191.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.44%)</title><rect x="413.7" y="149" width="5.2" height="15.0" fill="rgb(246,21,48)" rx="2" ry="2" />
<text  x="416.68" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.44%)</title><rect x="118.7" y="325" width="5.2" height="15.0" fill="rgb(216,178,19)" rx="2" ry="2" />
<text  x="121.68" y="335.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.44%)</title><rect x="403.3" y="277" width="5.2" height="15.0" fill="rgb(209,130,15)" rx="2" ry="2" />
<text  x="406.33" y="287.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.44%)</title><rect x="770.8" y="293" width="5.2" height="15.0" fill="rgb(216,65,14)" rx="2" ry="2" />
<text  x="773.79" y="303.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.44%)</title><rect x="398.2" y="261" width="5.1" height="15.0" fill="rgb(252,195,41)" rx="2" ry="2" />
<text  x="401.16" y="271.5" ></text>
</g>
<g >
<title>serialge (228 samples, 100.00%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(226,168,20)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >serialge</text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (7 samples, 3.07%)</title><rect x="931.2" y="277" width="36.3" height="15.0" fill="rgb(212,95,32)" rx="2" ry="2" />
<text  x="934.23" y="287.5" >std..</text>
</g>
<g >
<title>do_exit (1 samples, 0.44%)</title><rect x="413.7" y="293" width="5.2" height="15.0" fill="rgb(209,98,29)" rx="2" ry="2" />
<text  x="416.68" y="303.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_out (1 samples, 0.44%)</title><rect x="398.2" y="229" width="5.1" height="15.0" fill="rgb(236,23,23)" rx="2" ry="2" />
<text  x="401.16" y="239.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (2 samples, 0.88%)</title><rect x="998.5" y="293" width="10.4" height="15.0" fill="rgb(207,130,47)" rx="2" ry="2" />
<text  x="1001.51" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.44%)</title><rect x="118.7" y="293" width="5.2" height="15.0" fill="rgb(242,143,20)" rx="2" ry="2" />
<text  x="121.68" y="303.5" ></text>
</g>
<g >
<title>elf_map (1 samples, 0.44%)</title><rect x="165.3" y="245" width="5.1" height="15.0" fill="rgb(249,113,2)" rx="2" ry="2" />
<text  x="168.26" y="255.5" ></text>
</g>
<g >
<title>main (115 samples, 50.44%)</title><rect x="418.9" y="357" width="595.1" height="15.0" fill="rgb(230,28,28)" rx="2" ry="2" />
<text  x="421.86" y="367.5" >main</text>
</g>
<g >
<title>insert_work (1 samples, 0.44%)</title><rect x="403.3" y="101" width="5.2" height="15.0" fill="rgb(212,160,22)" rx="2" ry="2" />
<text  x="406.33" y="111.5" ></text>
</g>
<g >
<title>irq_work_run (1 samples, 0.44%)</title><rect x="403.3" y="197" width="5.2" height="15.0" fill="rgb(208,154,18)" rx="2" ry="2" />
<text  x="406.33" y="207.5" ></text>
</g>
<g >
<title>amd_pmu_disable_all (1 samples, 0.44%)</title><rect x="398.2" y="149" width="5.1" height="15.0" fill="rgb(241,37,47)" rx="2" ry="2" />
<text  x="401.16" y="159.5" ></text>
</g>
<g >
<title>__GI___libc_write (2 samples, 0.88%)</title><rect x="113.5" y="341" width="10.4" height="15.0" fill="rgb(225,11,14)" rx="2" ry="2" />
<text  x="116.51" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.44%)</title><rect x="165.3" y="325" width="5.1" height="15.0" fill="rgb(239,190,32)" rx="2" ry="2" />
<text  x="168.26" y="335.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.44%)</title><rect x="398.2" y="293" width="5.1" height="15.0" fill="rgb(231,106,22)" rx="2" ry="2" />
<text  x="401.16" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.44%)</title><rect x="165.3" y="341" width="5.1" height="15.0" fill="rgb(211,138,4)" rx="2" ry="2" />
<text  x="168.26" y="351.5" ></text>
</g>
<g >
<title>ksys_read (1 samples, 0.44%)</title><rect x="191.1" y="277" width="5.2" height="15.0" fill="rgb(229,110,2)" rx="2" ry="2" />
<text  x="194.14" y="287.5" ></text>
</g>
<g >
<title>__sysvec_irq_work (1 samples, 0.44%)</title><rect x="403.3" y="213" width="5.2" height="15.0" fill="rgb(241,70,52)" rx="2" ry="2" />
<text  x="406.33" y="223.5" ></text>
</g>
<g >
<title>malloc (12 samples, 5.26%)</title><rect x="1014.0" y="357" width="62.1" height="15.0" fill="rgb(242,147,27)" rx="2" ry="2" />
<text  x="1017.04" y="367.5" >malloc</text>
</g>
<g >
<title>__strlen_avx2 (5 samples, 2.19%)</title><rect x="139.4" y="341" width="25.9" height="15.0" fill="rgb(226,74,25)" rx="2" ry="2" />
<text  x="142.39" y="351.5" >_..</text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 0.44%)</title><rect x="41.1" y="341" width="5.1" height="15.0" fill="rgb(237,93,40)" rx="2" ry="2" />
<text  x="44.05" y="351.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.44%)</title><rect x="413.7" y="261" width="5.2" height="15.0" fill="rgb(252,61,45)" rx="2" ry="2" />
<text  x="416.68" y="271.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.44%)</title><rect x="403.3" y="69" width="5.2" height="15.0" fill="rgb(249,42,42)" rx="2" ry="2" />
<text  x="406.33" y="79.5" ></text>
</g>
<g >
<title>round_and_return (11 samples, 4.82%)</title><rect x="196.3" y="341" width="56.9" height="15.0" fill="rgb(246,20,48)" rx="2" ry="2" />
<text  x="199.32" y="351.5" >round_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.44%)</title><rect x="191.1" y="325" width="5.2" height="15.0" fill="rgb(217,194,5)" rx="2" ry="2" />
<text  x="194.14" y="335.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.44%)</title><rect x="393.0" y="293" width="5.2" height="15.0" fill="rgb(251,157,1)" rx="2" ry="2" />
<text  x="395.98" y="303.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.44%)</title><rect x="413.7" y="309" width="5.2" height="15.0" fill="rgb(219,32,10)" rx="2" ry="2" />
<text  x="416.68" y="319.5" ></text>
</g>
<g >
<title>security_file_permission (1 samples, 0.44%)</title><rect x="191.1" y="229" width="5.2" height="15.0" fill="rgb(218,60,43)" rx="2" ry="2" />
<text  x="194.14" y="239.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.44%)</title><rect x="403.3" y="261" width="5.2" height="15.0" fill="rgb(206,91,10)" rx="2" ry="2" />
<text  x="406.33" y="271.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_clone (1 samples, 0.44%)</title><rect x="325.7" y="341" width="5.2" height="15.0" fill="rgb(226,26,53)" rx="2" ry="2" />
<text  x="328.70" y="351.5" ></text>
</g>
<g >
<title>psi_task_switch (1 samples, 0.44%)</title><rect x="770.8" y="197" width="5.2" height="15.0" fill="rgb(253,178,31)" rx="2" ry="2" />
<text  x="773.79" y="207.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (6 samples, 2.63%)</title><rect x="253.2" y="341" width="31.1" height="15.0" fill="rgb(248,209,54)" rx="2" ry="2" />
<text  x="256.25" y="351.5" >st..</text>
</g>
<g >
<title>__fget_light (1 samples, 0.44%)</title><rect x="118.7" y="261" width="5.2" height="15.0" fill="rgb(242,101,43)" rx="2" ry="2" />
<text  x="121.68" y="271.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.44%)</title><rect x="770.8" y="229" width="5.2" height="15.0" fill="rgb(208,27,22)" rx="2" ry="2" />
<text  x="773.79" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (11 samples, 4.82%)</title><rect x="812.2" y="277" width="56.9" height="15.0" fill="rgb(224,6,43)" rx="2" ry="2" />
<text  x="815.19" y="287.5" >[libst..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.44%)</title><rect x="413.7" y="341" width="5.2" height="15.0" fill="rgb(220,184,17)" rx="2" ry="2" />
<text  x="416.68" y="351.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.44%)</title><rect x="1081.3" y="213" width="5.2" height="15.0" fill="rgb(216,46,13)" rx="2" ry="2" />
<text  x="1084.32" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.44%)</title><rect x="403.3" y="341" width="5.2" height="15.0" fill="rgb(221,47,4)" rx="2" ry="2" />
<text  x="406.33" y="351.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (11 samples, 4.82%)</title><rect x="346.4" y="357" width="56.9" height="15.0" fill="rgb(248,158,50)" rx="2" ry="2" />
<text  x="349.40" y="367.5" >__GI__..</text>
</g>
<g >
<title>__queue_work (1 samples, 0.44%)</title><rect x="403.3" y="117" width="5.2" height="15.0" fill="rgb(241,169,2)" rx="2" ry="2" />
<text  x="406.33" y="127.5" ></text>
</g>
<g >
<title>__vm_munmap (1 samples, 0.44%)</title><rect x="165.3" y="213" width="5.1" height="15.0" fill="rgb(226,104,11)" rx="2" ry="2" />
<text  x="168.26" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.44%)</title><rect x="1081.3" y="293" width="5.2" height="15.0" fill="rgb(242,123,2)" rx="2" ry="2" />
<text  x="1084.32" y="303.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.44%)</title><rect x="926.1" y="277" width="5.1" height="15.0" fill="rgb(236,43,27)" rx="2" ry="2" />
<text  x="929.05" y="287.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (1 samples, 0.44%)</title><rect x="1179.6" y="357" width="5.2" height="15.0" fill="rgb(242,185,26)" rx="2" ry="2" />
<text  x="1182.65" y="367.5" ></text>
</g>
<g >
<title>_dl_addr (1 samples, 0.44%)</title><rect x="408.5" y="357" width="5.2" height="15.0" fill="rgb(220,141,41)" rx="2" ry="2" />
<text  x="411.51" y="367.5" ></text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.44%)</title><rect x="1081.3" y="261" width="5.2" height="15.0" fill="rgb(247,221,40)" rx="2" ry="2" />
<text  x="1084.32" y="271.5" ></text>
</g>
<g >
<title>ttwu_do_wakeup (1 samples, 0.44%)</title><rect x="403.3" y="37" width="5.2" height="15.0" fill="rgb(206,178,29)" rx="2" ry="2" />
<text  x="406.33" y="47.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.44%)</title><rect x="393.0" y="277" width="5.2" height="15.0" fill="rgb(223,68,38)" rx="2" ry="2" />
<text  x="395.98" y="287.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (2 samples, 0.88%)</title><rect x="915.7" y="277" width="10.4" height="15.0" fill="rgb(250,218,26)" rx="2" ry="2" />
<text  x="918.70" y="287.5" ></text>
</g>
<g >
<title>__mpn_lshift (1 samples, 0.44%)</title><rect x="134.2" y="341" width="5.2" height="15.0" fill="rgb(222,29,31)" rx="2" ry="2" />
<text  x="137.21" y="351.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.44%)</title><rect x="1081.3" y="341" width="5.2" height="15.0" fill="rgb(232,140,40)" rx="2" ry="2" />
<text  x="1084.32" y="351.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.44%)</title><rect x="413.7" y="213" width="5.2" height="15.0" fill="rgb(208,191,37)" rx="2" ry="2" />
<text  x="416.68" y="223.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.44%)</title><rect x="170.4" y="341" width="5.2" height="15.0" fill="rgb(212,215,54)" rx="2" ry="2" />
<text  x="173.44" y="351.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (1 samples, 0.44%)</title><rect x="1081.3" y="357" width="5.2" height="15.0" fill="rgb(233,186,15)" rx="2" ry="2" />
<text  x="1084.32" y="367.5" ></text>
</g>
<g >
<title>read (1 samples, 0.44%)</title><rect x="191.1" y="341" width="5.2" height="15.0" fill="rgb(232,184,29)" rx="2" ry="2" />
<text  x="194.14" y="351.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.44%)</title><rect x="1081.3" y="229" width="5.2" height="15.0" fill="rgb(221,215,37)" rx="2" ry="2" />
<text  x="1084.32" y="239.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.44%)</title><rect x="770.8" y="261" width="5.2" height="15.0" fill="rgb(245,76,24)" rx="2" ry="2" />
<text  x="773.79" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.44%)</title><rect x="191.1" y="309" width="5.2" height="15.0" fill="rgb(251,167,28)" rx="2" ry="2" />
<text  x="194.14" y="319.5" ></text>
</g>
<g >
<title>Serial::ForwardElimination (68 samples, 29.82%)</title><rect x="424.0" y="325" width="352.0" height="15.0" fill="rgb(215,130,16)" rx="2" ry="2" />
<text  x="427.04" y="335.5" >Serial::ForwardElimination</text>
</g>
<g >
<title>common_file_perm (1 samples, 0.44%)</title><rect x="191.1" y="197" width="5.2" height="15.0" fill="rgb(248,151,26)" rx="2" ry="2" />
<text  x="194.14" y="207.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (5 samples, 2.19%)</title><rect x="967.5" y="277" width="25.8" height="15.0" fill="rgb(245,56,31)" rx="2" ry="2" />
<text  x="970.46" y="287.5" >s..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.44%)</title><rect x="393.0" y="309" width="5.2" height="15.0" fill="rgb(221,207,23)" rx="2" ry="2" />
<text  x="395.98" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (6 samples, 2.63%)</title><rect x="10.0" y="357" width="31.1" height="15.0" fill="rgb(226,80,17)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >[l..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.44%)</title><rect x="770.8" y="309" width="5.2" height="15.0" fill="rgb(207,131,15)" rx="2" ry="2" />
<text  x="773.79" y="319.5" ></text>
</g>
<g >
<title>timerqueue_add (1 samples, 0.44%)</title><rect x="393.0" y="245" width="5.2" height="15.0" fill="rgb(237,204,38)" rx="2" ry="2" />
<text  x="395.98" y="255.5" ></text>
</g>
<g >
<title>vfs_read (1 samples, 0.44%)</title><rect x="191.1" y="261" width="5.2" height="15.0" fill="rgb(222,49,8)" rx="2" ry="2" />
<text  x="194.14" y="271.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.44%)</title><rect x="118.7" y="277" width="5.2" height="15.0" fill="rgb(211,150,28)" rx="2" ry="2" />
<text  x="121.68" y="287.5" ></text>
</g>
<g >
<title>ReadLine (45 samples, 19.74%)</title><rect x="776.0" y="309" width="232.9" height="15.0" fill="rgb(240,107,45)" rx="2" ry="2" />
<text  x="778.96" y="319.5" >ReadLine</text>
</g>
<g >
<title>__vma_adjust (1 samples, 0.44%)</title><rect x="165.3" y="165" width="5.1" height="15.0" fill="rgb(215,120,42)" rx="2" ry="2" />
<text  x="168.26" y="175.5" ></text>
</g>
<g >
<title>asm_sysvec_irq_work (1 samples, 0.44%)</title><rect x="403.3" y="245" width="5.2" height="15.0" fill="rgb(217,181,14)" rx="2" ry="2" />
<text  x="406.33" y="255.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.44%)</title><rect x="1081.3" y="325" width="5.2" height="15.0" fill="rgb(238,54,38)" rx="2" ry="2" />
<text  x="1084.32" y="335.5" ></text>
</g>
<g >
<title>dbs_irq_work (1 samples, 0.44%)</title><rect x="403.3" y="149" width="5.2" height="15.0" fill="rgb(251,16,51)" rx="2" ry="2" />
<text  x="406.33" y="159.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.44%)</title><rect x="403.3" y="357" width="5.2" height="15.0" fill="rgb(254,44,4)" rx="2" ry="2" />
<text  x="406.33" y="367.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (1 samples, 0.44%)</title><rect x="993.3" y="293" width="5.2" height="15.0" fill="rgb(252,35,24)" rx="2" ry="2" />
<text  x="996.33" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.44%)</title><rect x="910.5" y="277" width="5.2" height="15.0" fill="rgb(241,156,43)" rx="2" ry="2" />
<text  x="913.53" y="287.5" ></text>
</g>
<g >
<title>std::string::_Rep::_S_create (2 samples, 0.88%)</title><rect x="330.9" y="341" width="10.3" height="15.0" fill="rgb(217,112,37)" rx="2" ry="2" />
<text  x="333.88" y="351.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.0 (1 samples, 0.44%)</title><rect x="165.3" y="293" width="5.1" height="15.0" fill="rgb(228,109,33)" rx="2" ry="2" />
<text  x="168.26" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.44%)</title><rect x="413.7" y="357" width="5.2" height="15.0" fill="rgb(234,172,9)" rx="2" ry="2" />
<text  x="416.68" y="367.5" ></text>
</g>
<g >
<title>__mpn_construct_double (2 samples, 0.88%)</title><rect x="123.9" y="341" width="10.3" height="15.0" fill="rgb(217,199,48)" rx="2" ry="2" />
<text  x="126.86" y="351.5" ></text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.44%)</title><rect x="413.7" y="165" width="5.2" height="15.0" fill="rgb(254,176,13)" rx="2" ry="2" />
<text  x="416.68" y="175.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2 samples, 0.88%)</title><rect x="393.0" y="325" width="10.3" height="15.0" fill="rgb(243,119,5)" rx="2" ry="2" />
<text  x="395.98" y="335.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="1081.3" y="309" width="5.2" height="15.0" fill="rgb(239,158,48)" rx="2" ry="2" />
<text  x="1084.32" y="319.5" ></text>
</g>
<g >
<title>x86_pmu_disable (1 samples, 0.44%)</title><rect x="398.2" y="165" width="5.1" height="15.0" fill="rgb(211,217,15)" rx="2" ry="2" />
<text  x="401.16" y="175.5" ></text>
</g>
<g >
<title>all (228 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(236,64,33)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1 samples, 0.44%)</title><rect x="191.1" y="213" width="5.2" height="15.0" fill="rgb(254,109,33)" rx="2" ry="2" />
<text  x="194.14" y="223.5" ></text>
</g>
<g >
<title>__split_vma (1 samples, 0.44%)</title><rect x="165.3" y="181" width="5.1" height="15.0" fill="rgb(254,67,41)" rx="2" ry="2" />
<text  x="168.26" y="191.5" ></text>
</g>
<g >
<title>psi_group_change (1 samples, 0.44%)</title><rect x="770.8" y="181" width="5.2" height="15.0" fill="rgb(254,5,18)" rx="2" ry="2" />
<text  x="773.79" y="191.5" ></text>
</g>
<g >
<title>rw_verify_area (1 samples, 0.44%)</title><rect x="191.1" y="245" width="5.2" height="15.0" fill="rgb(253,21,54)" rx="2" ry="2" />
<text  x="194.14" y="255.5" ></text>
</g>
<g >
<title>x86_pmu_disable_all (1 samples, 0.44%)</title><rect x="398.2" y="133" width="5.1" height="15.0" fill="rgb(244,182,29)" rx="2" ry="2" />
<text  x="401.16" y="143.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (1 samples, 0.44%)</title><rect x="1008.9" y="309" width="5.1" height="15.0" fill="rgb(220,98,46)" rx="2" ry="2" />
<text  x="1011.86" y="319.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (3 samples, 1.32%)</title><rect x="895.0" y="277" width="15.5" height="15.0" fill="rgb(209,74,34)" rx="2" ry="2" />
<text  x="898.00" y="287.5" ></text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (41 samples, 17.98%)</title><rect x="781.1" y="293" width="212.2" height="15.0" fill="rgb(211,94,9)" rx="2" ry="2" />
<text  x="784.14" y="303.5" >std::istream::_M_extract&lt;do..</text>
</g>
<g >
<title>mmap64 (1 samples, 0.44%)</title><rect x="1076.1" y="357" width="5.2" height="15.0" fill="rgb(249,147,34)" rx="2" ry="2" />
<text  x="1079.14" y="367.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.44%)</title><rect x="403.3" y="293" width="5.2" height="15.0" fill="rgb(233,89,54)" rx="2" ry="2" />
<text  x="406.33" y="303.5" ></text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.44%)</title><rect x="165.3" y="261" width="5.1" height="15.0" fill="rgb(232,97,37)" rx="2" ry="2" />
<text  x="168.26" y="271.5" ></text>
</g>
<g >
<title>std::string::reserve (1 samples, 0.44%)</title><rect x="341.2" y="341" width="5.2" height="15.0" fill="rgb(211,73,11)" rx="2" ry="2" />
<text  x="344.23" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.44%)</title><rect x="118.7" y="309" width="5.2" height="15.0" fill="rgb(217,56,9)" rx="2" ry="2" />
<text  x="121.68" y="319.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.44%)</title><rect x="46.2" y="325" width="5.2" height="15.0" fill="rgb(208,208,25)" rx="2" ry="2" />
<text  x="49.23" y="335.5" ></text>
</g>
<g >
<title>task_ctx_sched_out (1 samples, 0.44%)</title><rect x="398.2" y="213" width="5.1" height="15.0" fill="rgb(206,165,53)" rx="2" ry="2" />
<text  x="401.16" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_read (1 samples, 0.44%)</title><rect x="191.1" y="293" width="5.2" height="15.0" fill="rgb(220,227,35)" rx="2" ry="2" />
<text  x="194.14" y="303.5" ></text>
</g>
<g >
<title>strcmp (1 samples, 0.44%)</title><rect x="1184.8" y="357" width="5.2" height="15.0" fill="rgb(215,180,8)" rx="2" ry="2" />
<text  x="1187.82" y="367.5" ></text>
</g>
<g >
<title>Utility::InitializeArray (46 samples, 20.18%)</title><rect x="776.0" y="325" width="238.0" height="15.0" fill="rgb(242,153,42)" rx="2" ry="2" />
<text  x="778.96" y="335.5" >Utility::InitializeArray</text>
</g>
<g >
<title>exec_binprm (1 samples, 0.44%)</title><rect x="165.3" y="277" width="5.1" height="15.0" fill="rgb(243,73,23)" rx="2" ry="2" />
<text  x="168.26" y="287.5" ></text>
</g>
<g >
<title>idtentry_exit_cond_rcu (1 samples, 0.44%)</title><rect x="770.8" y="277" width="5.2" height="15.0" fill="rgb(215,55,41)" rx="2" ry="2" />
<text  x="773.79" y="287.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.44%)</title><rect x="770.8" y="213" width="5.2" height="15.0" fill="rgb(206,115,45)" rx="2" ry="2" />
<text  x="773.79" y="223.5" ></text>
</g>
<g >
<title>[unknown] (59 samples, 25.88%)</title><rect x="41.1" y="357" width="305.3" height="15.0" fill="rgb(231,191,2)" rx="2" ry="2" />
<text  x="44.05" y="367.5" >[unknown]</text>
</g>
<g >
<title>operator new (3 samples, 1.32%)</title><rect x="175.6" y="341" width="15.5" height="15.0" fill="rgb(209,25,30)" rx="2" ry="2" />
<text  x="178.61" y="351.5" ></text>
</g>
<g >
<title>ttwu_do_activate (1 samples, 0.44%)</title><rect x="403.3" y="53" width="5.2" height="15.0" fill="rgb(214,134,51)" rx="2" ry="2" />
<text  x="406.33" y="63.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.44%)</title><rect x="398.2" y="245" width="5.1" height="15.0" fill="rgb(236,187,39)" rx="2" ry="2" />
<text  x="401.16" y="255.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.44%)</title><rect x="403.3" y="325" width="5.2" height="15.0" fill="rgb(238,191,23)" rx="2" ry="2" />
<text  x="406.33" y="335.5" ></text>
</g>
</g>
</svg>
