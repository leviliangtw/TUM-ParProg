<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >On-CPU Time Flame Graph: $ ./serialge ./ge_data/size512x512</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>__GI_____strtod_l_internal (16 samples, 4.20%)</title><rect x="34.8" y="389" width="49.5" height="15.0" fill="rgb(254,72,27)" rx="2" ry="2" />
<text  x="37.78" y="399.5" >__GI..</text>
</g>
<g >
<title>main (268 samples, 70.34%)</title><rect x="276.4" y="389" width="830.0" height="15.0" fill="rgb(228,102,49)" rx="2" ry="2" />
<text  x="279.35" y="399.5" >main</text>
</g>
<g >
<title>ReadLine (39 samples, 10.24%)</title><rect x="976.3" y="341" width="120.8" height="15.0" fill="rgb(233,144,32)" rx="2" ry="2" />
<text  x="979.30" y="351.5" >ReadLine</text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.26%)</title><rect x="1128.1" y="389" width="3.1" height="15.0" fill="rgb(242,128,27)" rx="2" ry="2" />
<text  x="1131.06" y="399.5" ></text>
</g>
<g >
<title>mmap64 (1 samples, 0.26%)</title><rect x="1125.0" y="405" width="3.1" height="15.0" fill="rgb(211,174,28)" rx="2" ry="2" />
<text  x="1127.96" y="415.5" ></text>
</g>
<g >
<title>__default_send_IPI_dest_field (1 samples, 0.26%)</title><rect x="87.4" y="37" width="3.1" height="15.0" fill="rgb(228,5,44)" rx="2" ry="2" />
<text  x="90.43" y="47.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_clone (2 samples, 0.52%)</title><rect x="211.3" y="389" width="6.2" height="15.0" fill="rgb(232,79,16)" rx="2" ry="2" />
<text  x="214.31" y="399.5" ></text>
</g>
<g >
<title>__memchr_avx2 (1 samples, 0.26%)</title><rect x="180.3" y="357" width="3.1" height="15.0" fill="rgb(253,139,8)" rx="2" ry="2" />
<text  x="183.34" y="367.5" ></text>
</g>
<g >
<title>serialge (381 samples, 100.00%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(215,115,49)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >serialge</text>
</g>
<g >
<title>std::string::reserve (5 samples, 1.31%)</title><rect x="217.5" y="389" width="15.5" height="15.0" fill="rgb(223,199,54)" rx="2" ry="2" />
<text  x="220.51" y="399.5" ></text>
</g>
<g >
<title>[unknown] (66 samples, 17.32%)</title><rect x="31.7" y="405" width="204.4" height="15.0" fill="rgb(251,70,45)" rx="2" ry="2" />
<text  x="34.68" y="415.5" >[unknown]</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="1125.0" y="389" width="3.1" height="15.0" fill="rgb(235,162,49)" rx="2" ry="2" />
<text  x="1127.96" y="399.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.26%)</title><rect x="1125.0" y="341" width="3.1" height="15.0" fill="rgb(206,33,35)" rx="2" ry="2" />
<text  x="1127.96" y="351.5" ></text>
</g>
<g >
<title>__install_special_mapping (1 samples, 0.26%)</title><rect x="127.7" y="229" width="3.1" height="15.0" fill="rgb(243,82,10)" rx="2" ry="2" />
<text  x="130.69" y="239.5" ></text>
</g>
<g >
<title>round_and_return (6 samples, 1.57%)</title><rect x="149.4" y="389" width="18.6" height="15.0" fill="rgb(209,69,4)" rx="2" ry="2" />
<text  x="152.37" y="399.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (1 samples, 0.26%)</title><rect x="87.4" y="117" width="3.1" height="15.0" fill="rgb(206,170,20)" rx="2" ry="2" />
<text  x="90.43" y="127.5" ></text>
</g>
<g >
<title>map_vdso (1 samples, 0.26%)</title><rect x="127.7" y="261" width="3.1" height="15.0" fill="rgb(252,70,25)" rx="2" ry="2" />
<text  x="130.69" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.52%)</title><rect x="127.7" y="389" width="6.2" height="15.0" fill="rgb(219,23,26)" rx="2" ry="2" />
<text  x="130.69" y="399.5" ></text>
</g>
<g >
<title>__strtod_l (2 samples, 0.52%)</title><rect x="102.9" y="389" width="6.2" height="15.0" fill="rgb(250,133,43)" rx="2" ry="2" />
<text  x="105.91" y="399.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.26%)</title><rect x="1050.6" y="309" width="3.1" height="15.0" fill="rgb(234,18,41)" rx="2" ry="2" />
<text  x="1053.63" y="319.5" ></text>
</g>
<g >
<title>__vm_munmap (1 samples, 0.26%)</title><rect x="1103.3" y="309" width="3.1" height="15.0" fill="rgb(211,65,22)" rx="2" ry="2" />
<text  x="1106.28" y="319.5" ></text>
</g>
<g >
<title>std::locale::~locale (1 samples, 0.26%)</title><rect x="1100.2" y="341" width="3.1" height="15.0" fill="rgb(243,100,15)" rx="2" ry="2" />
<text  x="1103.18" y="351.5" ></text>
</g>
<g >
<title>ksys_write (2 samples, 0.52%)</title><rect x="84.3" y="325" width="6.2" height="15.0" fill="rgb(251,110,42)" rx="2" ry="2" />
<text  x="87.33" y="335.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.26%)</title><rect x="180.3" y="373" width="3.1" height="15.0" fill="rgb(221,2,15)" rx="2" ry="2" />
<text  x="183.34" y="383.5" ></text>
</g>
<g >
<title>get_random_u64 (1 samples, 0.26%)</title><rect x="130.8" y="261" width="3.1" height="15.0" fill="rgb(231,190,35)" rx="2" ry="2" />
<text  x="133.79" y="271.5" ></text>
</g>
<g >
<title>queue_work_on (1 samples, 0.26%)</title><rect x="87.4" y="197" width="3.1" height="15.0" fill="rgb(232,211,19)" rx="2" ry="2" />
<text  x="90.43" y="207.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.26%)</title><rect x="1103.3" y="197" width="3.1" height="15.0" fill="rgb(231,152,21)" rx="2" ry="2" />
<text  x="1106.28" y="207.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (7 samples, 1.84%)</title><rect x="10.0" y="405" width="21.7" height="15.0" fill="rgb(213,60,53)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >[..</text>
</g>
<g >
<title>__GI_____strtod_l_internal (13 samples, 3.41%)</title><rect x="236.1" y="405" width="40.3" height="15.0" fill="rgb(222,8,41)" rx="2" ry="2" />
<text  x="239.09" y="415.5" >__G..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.26%)</title><rect x="1128.1" y="341" width="3.1" height="15.0" fill="rgb(247,212,48)" rx="2" ry="2" />
<text  x="1131.06" y="351.5" ></text>
</g>
<g >
<title>dl_main (2 samples, 0.52%)</title><rect x="109.1" y="373" width="6.2" height="15.0" fill="rgb(215,200,16)" rx="2" ry="2" />
<text  x="112.11" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="1103.3" y="357" width="3.1" height="15.0" fill="rgb(210,223,10)" rx="2" ry="2" />
<text  x="1106.28" y="367.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.26%)</title><rect x="1128.1" y="357" width="3.1" height="15.0" fill="rgb(249,174,51)" rx="2" ry="2" />
<text  x="1131.06" y="367.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.26%)</title><rect x="87.4" y="133" width="3.1" height="15.0" fill="rgb(248,142,51)" rx="2" ry="2" />
<text  x="90.43" y="143.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (1 samples, 0.26%)</title><rect x="1044.4" y="309" width="3.1" height="15.0" fill="rgb(218,178,28)" rx="2" ry="2" />
<text  x="1047.44" y="319.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (1 samples, 0.26%)</title><rect x="1128.1" y="405" width="3.1" height="15.0" fill="rgb(236,186,14)" rx="2" ry="2" />
<text  x="1131.06" y="415.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (1 samples, 0.26%)</title><rect x="87.4" y="101" width="3.1" height="15.0" fill="rgb(251,112,19)" rx="2" ry="2" />
<text  x="90.43" y="111.5" ></text>
</g>
<g >
<title>__libc_start_main (268 samples, 70.34%)</title><rect x="276.4" y="405" width="830.0" height="15.0" fill="rgb(252,143,29)" rx="2" ry="2" />
<text  x="279.35" y="415.5" >__libc_start_main</text>
</g>
<g >
<title>tty_write (2 samples, 0.52%)</title><rect x="84.3" y="277" width="6.2" height="15.0" fill="rgb(213,166,7)" rx="2" ry="2" />
<text  x="87.33" y="287.5" ></text>
</g>
<g >
<title>insert_work (1 samples, 0.26%)</title><rect x="87.4" y="165" width="3.1" height="15.0" fill="rgb(234,200,28)" rx="2" ry="2" />
<text  x="90.43" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_filebuf (1 samples, 0.26%)</title><rect x="180.3" y="389" width="3.1" height="15.0" fill="rgb(221,203,5)" rx="2" ry="2" />
<text  x="183.34" y="399.5" ></text>
</g>
<g >
<title>default_send_IPI_single_phys (1 samples, 0.26%)</title><rect x="87.4" y="53" width="3.1" height="15.0" fill="rgb(221,185,32)" rx="2" ry="2" />
<text  x="90.43" y="63.5" ></text>
</g>
<g >
<title>arch_setup_additional_pages (1 samples, 0.26%)</title><rect x="127.7" y="293" width="3.1" height="15.0" fill="rgb(232,42,19)" rx="2" ry="2" />
<text  x="130.69" y="303.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.26%)</title><rect x="1128.1" y="373" width="3.1" height="15.0" fill="rgb(206,174,51)" rx="2" ry="2" />
<text  x="1131.06" y="383.5" ></text>
</g>
<g >
<title>__strlen_avx2 (4 samples, 1.05%)</title><rect x="90.5" y="389" width="12.4" height="15.0" fill="rgb(253,125,6)" rx="2" ry="2" />
<text  x="93.52" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (7 samples, 1.84%)</title><rect x="994.9" y="309" width="21.7" height="15.0" fill="rgb(250,209,12)" rx="2" ry="2" />
<text  x="997.88" y="319.5" >[..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.52%)</title><rect x="84.3" y="373" width="6.2" height="15.0" fill="rgb(218,161,42)" rx="2" ry="2" />
<text  x="87.33" y="383.5" ></text>
</g>
<g >
<title>new_sync_write (2 samples, 0.52%)</title><rect x="84.3" y="293" width="6.2" height="15.0" fill="rgb(221,107,29)" rx="2" ry="2" />
<text  x="87.33" y="303.5" ></text>
</g>
<g >
<title>arch_pick_mmap_layout (1 samples, 0.26%)</title><rect x="130.8" y="277" width="3.1" height="15.0" fill="rgb(206,61,36)" rx="2" ry="2" />
<text  x="133.79" y="287.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (2 samples, 0.52%)</title><rect x="84.3" y="261" width="6.2" height="15.0" fill="rgb(230,158,12)" rx="2" ry="2" />
<text  x="87.33" y="271.5" ></text>
</g>
<g >
<title>perf_event_mmap (1 samples, 0.26%)</title><rect x="1125.0" y="277" width="3.1" height="15.0" fill="rgb(235,223,14)" rx="2" ry="2" />
<text  x="1127.96" y="287.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (5 samples, 1.31%)</title><rect x="1174.5" y="405" width="15.5" height="15.0" fill="rgb(238,40,37)" rx="2" ry="2" />
<text  x="1177.51" y="415.5" ></text>
</g>
<g >
<title>setup_new_exec (1 samples, 0.26%)</title><rect x="130.8" y="293" width="3.1" height="15.0" fill="rgb(241,186,33)" rx="2" ry="2" />
<text  x="133.79" y="303.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_get (9 samples, 2.36%)</title><rect x="1069.2" y="309" width="27.9" height="15.0" fill="rgb(210,174,32)" rx="2" ry="2" />
<text  x="1072.21" y="319.5" >s..</text>
</g>
<g >
<title>std::istream::_M_extract&lt;double&gt; (36 samples, 9.45%)</title><rect x="985.6" y="325" width="111.5" height="15.0" fill="rgb(253,157,54)" rx="2" ry="2" />
<text  x="988.59" y="335.5" >std::istream:..</text>
</g>
<g >
<title>exec_binprm (2 samples, 0.52%)</title><rect x="127.7" y="325" width="6.2" height="15.0" fill="rgb(220,157,45)" rx="2" ry="2" />
<text  x="130.69" y="335.5" ></text>
</g>
<g >
<title>_int_free (4 samples, 1.05%)</title><rect x="115.3" y="389" width="12.4" height="15.0" fill="rgb(227,174,42)" rx="2" ry="2" />
<text  x="118.30" y="399.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (1 samples, 0.26%)</title><rect x="127.7" y="181" width="3.1" height="15.0" fill="rgb(253,152,0)" rx="2" ry="2" />
<text  x="130.69" y="191.5" ></text>
</g>
<g >
<title>__munmap (1 samples, 0.26%)</title><rect x="1103.3" y="373" width="3.1" height="15.0" fill="rgb(254,178,37)" rx="2" ry="2" />
<text  x="1106.28" y="383.5" ></text>
</g>
<g >
<title>__queue_work (1 samples, 0.26%)</title><rect x="87.4" y="181" width="3.1" height="15.0" fill="rgb(210,60,44)" rx="2" ry="2" />
<text  x="90.43" y="191.5" ></text>
</g>
<g >
<title>_extract_crng (1 samples, 0.26%)</title><rect x="130.8" y="229" width="3.1" height="15.0" fill="rgb(209,79,37)" rx="2" ry="2" />
<text  x="133.79" y="239.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.26%)</title><rect x="1128.1" y="325" width="3.1" height="15.0" fill="rgb(211,213,48)" rx="2" ry="2" />
<text  x="1131.06" y="335.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.26%)</title><rect x="1103.3" y="245" width="3.1" height="15.0" fill="rgb(243,201,29)" rx="2" ry="2" />
<text  x="1106.28" y="255.5" ></text>
</g>
<g >
<title>Utility::InitializeArray (41 samples, 10.76%)</title><rect x="976.3" y="357" width="127.0" height="15.0" fill="rgb(239,34,10)" rx="2" ry="2" />
<text  x="979.30" y="367.5" >Utility::Initia..</text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.26%)</title><rect x="1103.3" y="229" width="3.1" height="15.0" fill="rgb(242,58,16)" rx="2" ry="2" />
<text  x="1106.28" y="239.5" ></text>
</g>
<g >
<title>free_pcp_prepare (1 samples, 0.26%)</title><rect x="1103.3" y="181" width="3.1" height="15.0" fill="rgb(237,219,22)" rx="2" ry="2" />
<text  x="1106.28" y="191.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.26%)</title><rect x="1103.3" y="213" width="3.1" height="15.0" fill="rgb(215,30,48)" rx="2" ry="2" />
<text  x="1106.28" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_execve (2 samples, 0.52%)</title><rect x="127.7" y="357" width="6.2" height="15.0" fill="rgb(219,149,15)" rx="2" ry="2" />
<text  x="130.69" y="367.5" ></text>
</g>
<g >
<title>all (381 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(233,15,39)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (14 samples, 3.67%)</title><rect x="1131.2" y="405" width="43.3" height="15.0" fill="rgb(246,189,44)" rx="2" ry="2" />
<text  x="1134.15" y="415.5" >std:..</text>
</g>
<g >
<title>__memchr_avx2 (1 samples, 0.26%)</title><rect x="208.2" y="341" width="3.1" height="15.0" fill="rgb(205,214,22)" rx="2" ry="2" />
<text  x="211.22" y="351.5" ></text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_float (5 samples, 1.31%)</title><rect x="1053.7" y="309" width="15.5" height="15.0" fill="rgb(217,16,54)" rx="2" ry="2" />
<text  x="1056.73" y="319.5" ></text>
</g>
<g >
<title>map_vdso_randomized (1 samples, 0.26%)</title><rect x="127.7" y="277" width="3.1" height="15.0" fill="rgb(241,37,54)" rx="2" ry="2" />
<text  x="130.69" y="287.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 1.05%)</title><rect x="1032.0" y="309" width="12.4" height="15.0" fill="rgb(216,200,27)" rx="2" ry="2" />
<text  x="1035.05" y="319.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (4 samples, 1.05%)</title><rect x="1019.7" y="309" width="12.3" height="15.0" fill="rgb(221,201,26)" rx="2" ry="2" />
<text  x="1022.66" y="319.5" ></text>
</g>
<g >
<title>perf_iterate_sb (1 samples, 0.26%)</title><rect x="127.7" y="197" width="3.1" height="15.0" fill="rgb(252,117,3)" rx="2" ry="2" />
<text  x="130.69" y="207.5" ></text>
</g>
<g >
<title>Serial::ForwardElimination (226 samples, 59.32%)</title><rect x="276.4" y="357" width="699.9" height="15.0" fill="rgb(233,188,2)" rx="2" ry="2" />
<text  x="279.35" y="367.5" >Serial::ForwardElimination</text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_put (1 samples, 0.26%)</title><rect x="208.2" y="389" width="3.1" height="15.0" fill="rgb(249,51,54)" rx="2" ry="2" />
<text  x="211.22" y="399.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (2 samples, 0.52%)</title><rect x="109.1" y="389" width="6.2" height="15.0" fill="rgb(232,167,11)" rx="2" ry="2" />
<text  x="112.11" y="399.5" ></text>
</g>
<g >
<title>perf_event_mmap (1 samples, 0.26%)</title><rect x="127.7" y="213" width="3.1" height="15.0" fill="rgb(241,186,50)" rx="2" ry="2" />
<text  x="130.69" y="223.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.0 (2 samples, 0.52%)</title><rect x="127.7" y="341" width="6.2" height="15.0" fill="rgb(222,184,3)" rx="2" ry="2" />
<text  x="130.69" y="351.5" ></text>
</g>
<g >
<title>extract_crng (1 samples, 0.26%)</title><rect x="130.8" y="245" width="3.1" height="15.0" fill="rgb(207,124,36)" rx="2" ry="2" />
<text  x="133.79" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_write (2 samples, 0.52%)</title><rect x="84.3" y="389" width="6.2" height="15.0" fill="rgb(219,96,20)" rx="2" ry="2" />
<text  x="87.33" y="399.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (2 samples, 0.52%)</title><rect x="109.1" y="357" width="6.2" height="15.0" fill="rgb(205,11,20)" rx="2" ry="2" />
<text  x="112.11" y="367.5" ></text>
</g>
<g >
<title>pty_write (1 samples, 0.26%)</title><rect x="87.4" y="229" width="3.1" height="15.0" fill="rgb(219,116,27)" rx="2" ry="2" />
<text  x="90.43" y="239.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (1 samples, 0.26%)</title><rect x="87.4" y="69" width="3.1" height="15.0" fill="rgb(253,60,41)" rx="2" ry="2" />
<text  x="90.43" y="79.5" ></text>
</g>
<g >
<title>load_elf_binary (2 samples, 0.52%)</title><rect x="127.7" y="309" width="6.2" height="15.0" fill="rgb(246,72,47)" rx="2" ry="2" />
<text  x="130.69" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.52%)</title><rect x="127.7" y="373" width="6.2" height="15.0" fill="rgb(208,115,41)" rx="2" ry="2" />
<text  x="130.69" y="383.5" ></text>
</g>
<g >
<title>n_tty_write (2 samples, 0.52%)</title><rect x="84.3" y="245" width="6.2" height="15.0" fill="rgb(216,194,36)" rx="2" ry="2" />
<text  x="87.33" y="255.5" ></text>
</g>
<g >
<title>kfree (1 samples, 0.26%)</title><rect x="1125.0" y="261" width="3.1" height="15.0" fill="rgb(215,189,35)" rx="2" ry="2" />
<text  x="1127.96" y="271.5" ></text>
</g>
<g >
<title>std::__convert_to_v&lt;double&gt; (4 samples, 1.05%)</title><rect x="168.0" y="389" width="12.3" height="15.0" fill="rgb(252,111,7)" rx="2" ry="2" />
<text  x="170.95" y="399.5" ></text>
</g>
<g >
<title>vfs_write (2 samples, 0.52%)</title><rect x="84.3" y="309" width="6.2" height="15.0" fill="rgb(207,143,26)" rx="2" ry="2" />
<text  x="87.33" y="319.5" ></text>
</g>
<g >
<title>malloc (5 samples, 1.31%)</title><rect x="133.9" y="389" width="15.5" height="15.0" fill="rgb(220,112,2)" rx="2" ry="2" />
<text  x="136.88" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.26%)</title><rect x="1125.0" y="357" width="3.1" height="15.0" fill="rgb(210,217,43)" rx="2" ry="2" />
<text  x="1127.96" y="367.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.26%)</title><rect x="1125.0" y="293" width="3.1" height="15.0" fill="rgb(250,138,43)" rx="2" ry="2" />
<text  x="1127.96" y="303.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.26%)</title><rect x="1097.1" y="341" width="3.1" height="15.0" fill="rgb(250,186,49)" rx="2" ry="2" />
<text  x="1100.09" y="351.5" ></text>
</g>
<g >
<title>std::locale::facet::_S_get_c_locale (1 samples, 0.26%)</title><rect x="1047.5" y="309" width="3.1" height="15.0" fill="rgb(240,153,39)" rx="2" ry="2" />
<text  x="1050.53" y="319.5" ></text>
</g>
<g >
<title>unmap_region (1 samples, 0.26%)</title><rect x="1103.3" y="277" width="3.1" height="15.0" fill="rgb(219,164,7)" rx="2" ry="2" />
<text  x="1106.28" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_write (2 samples, 0.52%)</title><rect x="84.3" y="341" width="6.2" height="15.0" fill="rgb(248,36,30)" rx="2" ry="2" />
<text  x="87.33" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1 samples, 0.26%)</title><rect x="31.7" y="373" width="3.1" height="15.0" fill="rgb(231,34,2)" rx="2" ry="2" />
<text  x="34.68" y="383.5" ></text>
</g>
<g >
<title>_install_special_mapping (1 samples, 0.26%)</title><rect x="127.7" y="245" width="3.1" height="15.0" fill="rgb(213,73,47)" rx="2" ry="2" />
<text  x="130.69" y="255.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (1 samples, 0.26%)</title><rect x="233.0" y="389" width="3.1" height="15.0" fill="rgb(216,176,45)" rx="2" ry="2" />
<text  x="235.99" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.26%)</title><rect x="1103.3" y="341" width="3.1" height="15.0" fill="rgb(207,16,47)" rx="2" ry="2" />
<text  x="1106.28" y="351.5" ></text>
</g>
<g >
<title>send_call_function_single_ipi (1 samples, 0.26%)</title><rect x="87.4" y="85" width="3.1" height="15.0" fill="rgb(233,120,41)" rx="2" ry="2" />
<text  x="90.43" y="95.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.26%)</title><rect x="1103.3" y="261" width="3.1" height="15.0" fill="rgb(211,81,38)" rx="2" ry="2" />
<text  x="1106.28" y="271.5" ></text>
</g>
<g >
<title>do_mmap (1 samples, 0.26%)</title><rect x="1125.0" y="309" width="3.1" height="15.0" fill="rgb(247,105,2)" rx="2" ry="2" />
<text  x="1127.96" y="319.5" ></text>
</g>
<g >
<title>Serial::SerialSolve (267 samples, 70.08%)</title><rect x="276.4" y="373" width="826.9" height="15.0" fill="rgb(210,195,46)" rx="2" ry="2" />
<text  x="279.35" y="383.5" >Serial::SerialSolve</text>
</g>
<g >
<title>wake_up_process (1 samples, 0.26%)</title><rect x="87.4" y="149" width="3.1" height="15.0" fill="rgb(254,28,33)" rx="2" ry="2" />
<text  x="90.43" y="159.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.52%)</title><rect x="84.3" y="357" width="6.2" height="15.0" fill="rgb(240,222,23)" rx="2" ry="2" />
<text  x="87.33" y="367.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.26%)</title><rect x="1016.6" y="309" width="3.1" height="15.0" fill="rgb(245,39,0)" rx="2" ry="2" />
<text  x="1019.56" y="319.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (8 samples, 2.10%)</title><rect x="183.4" y="389" width="24.8" height="15.0" fill="rgb(230,170,19)" rx="2" ry="2" />
<text  x="186.44" y="399.5" >s..</text>
</g>
<g >
<title>tty_flip_buffer_push (1 samples, 0.26%)</title><rect x="87.4" y="213" width="3.1" height="15.0" fill="rgb(241,0,32)" rx="2" ry="2" />
<text  x="90.43" y="223.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.26%)</title><rect x="208.2" y="373" width="3.1" height="15.0" fill="rgb(211,28,43)" rx="2" ry="2" />
<text  x="211.22" y="383.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.26%)</title><rect x="1103.3" y="293" width="3.1" height="15.0" fill="rgb(212,112,20)" rx="2" ry="2" />
<text  x="1106.28" y="303.5" ></text>
</g>
<g >
<title>malloc (6 samples, 1.57%)</title><rect x="1106.4" y="405" width="18.6" height="15.0" fill="rgb(252,218,24)" rx="2" ry="2" />
<text  x="1109.38" y="415.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;double&gt; (1 samples, 0.26%)</title><rect x="208.2" y="357" width="3.1" height="15.0" fill="rgb(207,123,40)" rx="2" ry="2" />
<text  x="211.22" y="367.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.26%)</title><rect x="1125.0" y="325" width="3.1" height="15.0" fill="rgb(210,29,4)" rx="2" ry="2" />
<text  x="1127.96" y="335.5" ></text>
</g>
<g >
<title>pmd_devmap_trans_unstable (1 samples, 0.26%)</title><rect x="1128.1" y="309" width="3.1" height="15.0" fill="rgb(243,4,7)" rx="2" ry="2" />
<text  x="1131.06" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.26%)</title><rect x="1125.0" y="373" width="3.1" height="15.0" fill="rgb(220,79,52)" rx="2" ry="2" />
<text  x="1127.96" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (1 samples, 0.26%)</title><rect x="1103.3" y="325" width="3.1" height="15.0" fill="rgb(211,9,31)" rx="2" ry="2" />
<text  x="1106.28" y="335.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.26%)</title><rect x="31.7" y="389" width="3.1" height="15.0" fill="rgb(229,108,0)" rx="2" ry="2" />
<text  x="34.68" y="399.5" ></text>
</g>
</g>
</svg>
